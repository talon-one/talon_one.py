# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class AccountDashboardStatistic(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'revenue': 'list[AccountDashboardStatisticRevenue]',
        'discounts': 'list[AccountDashboardStatisticDiscount]',
        'loyalty_points': 'list[AccountDashboardStatisticLoyaltyPoints]',
        'referrals': 'list[AccountDashboardStatisticReferrals]',
        'campaigns': 'AccountDashboardStatisticCampaigns'
    }

    attribute_map = {
        'revenue': 'revenue',
        'discounts': 'discounts',
        'loyalty_points': 'loyaltyPoints',
        'referrals': 'referrals',
        'campaigns': 'campaigns'
    }

    def __init__(self, revenue=None, discounts=None, loyalty_points=None, referrals=None, campaigns=None, local_vars_configuration=None):  # noqa: E501
        """AccountDashboardStatistic - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._revenue = None
        self._discounts = None
        self._loyalty_points = None
        self._referrals = None
        self._campaigns = None
        self.discriminator = None

        if revenue is not None:
            self.revenue = revenue
        if discounts is not None:
            self.discounts = discounts
        if loyalty_points is not None:
            self.loyalty_points = loyalty_points
        if referrals is not None:
            self.referrals = referrals
        self.campaigns = campaigns

    @property
    def revenue(self):
        """Gets the revenue of this AccountDashboardStatistic.  # noqa: E501

        Aggregated statistic for account revenue.  # noqa: E501

        :return: The revenue of this AccountDashboardStatistic.  # noqa: E501
        :rtype: list[AccountDashboardStatisticRevenue]
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """Sets the revenue of this AccountDashboardStatistic.

        Aggregated statistic for account revenue.  # noqa: E501

        :param revenue: The revenue of this AccountDashboardStatistic.  # noqa: E501
        :type: list[AccountDashboardStatisticRevenue]
        """

        self._revenue = revenue

    @property
    def discounts(self):
        """Gets the discounts of this AccountDashboardStatistic.  # noqa: E501

        Aggregated statistic for account discount.  # noqa: E501

        :return: The discounts of this AccountDashboardStatistic.  # noqa: E501
        :rtype: list[AccountDashboardStatisticDiscount]
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """Sets the discounts of this AccountDashboardStatistic.

        Aggregated statistic for account discount.  # noqa: E501

        :param discounts: The discounts of this AccountDashboardStatistic.  # noqa: E501
        :type: list[AccountDashboardStatisticDiscount]
        """

        self._discounts = discounts

    @property
    def loyalty_points(self):
        """Gets the loyalty_points of this AccountDashboardStatistic.  # noqa: E501

        Aggregated statistic for account loyalty points.  # noqa: E501

        :return: The loyalty_points of this AccountDashboardStatistic.  # noqa: E501
        :rtype: list[AccountDashboardStatisticLoyaltyPoints]
        """
        return self._loyalty_points

    @loyalty_points.setter
    def loyalty_points(self, loyalty_points):
        """Sets the loyalty_points of this AccountDashboardStatistic.

        Aggregated statistic for account loyalty points.  # noqa: E501

        :param loyalty_points: The loyalty_points of this AccountDashboardStatistic.  # noqa: E501
        :type: list[AccountDashboardStatisticLoyaltyPoints]
        """

        self._loyalty_points = loyalty_points

    @property
    def referrals(self):
        """Gets the referrals of this AccountDashboardStatistic.  # noqa: E501

        Aggregated statistic for account referrals.  # noqa: E501

        :return: The referrals of this AccountDashboardStatistic.  # noqa: E501
        :rtype: list[AccountDashboardStatisticReferrals]
        """
        return self._referrals

    @referrals.setter
    def referrals(self, referrals):
        """Sets the referrals of this AccountDashboardStatistic.

        Aggregated statistic for account referrals.  # noqa: E501

        :param referrals: The referrals of this AccountDashboardStatistic.  # noqa: E501
        :type: list[AccountDashboardStatisticReferrals]
        """

        self._referrals = referrals

    @property
    def campaigns(self):
        """Gets the campaigns of this AccountDashboardStatistic.  # noqa: E501


        :return: The campaigns of this AccountDashboardStatistic.  # noqa: E501
        :rtype: AccountDashboardStatisticCampaigns
        """
        return self._campaigns

    @campaigns.setter
    def campaigns(self, campaigns):
        """Sets the campaigns of this AccountDashboardStatistic.


        :param campaigns: The campaigns of this AccountDashboardStatistic.  # noqa: E501
        :type: AccountDashboardStatisticCampaigns
        """
        if self.local_vars_configuration.client_side_validation and campaigns is None:  # noqa: E501
            raise ValueError("Invalid value for `campaigns`, must not be `None`")  # noqa: E501

        self._campaigns = campaigns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountDashboardStatistic):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountDashboardStatistic):
            return True

        return self.to_dict() != other.to_dict()
