# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class CouponDeletionJob(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'created': 'datetime',
        'application_id': 'int',
        'account_id': 'int',
        'filters': 'CouponDeletionFilters',
        'status': 'str',
        'deleted_amount': 'int',
        'fail_count': 'int',
        'errors': 'list[str]',
        'created_by': 'int',
        'communicated': 'bool',
        'campaign_i_ds': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'application_id': 'applicationId',
        'account_id': 'accountId',
        'filters': 'filters',
        'status': 'status',
        'deleted_amount': 'deletedAmount',
        'fail_count': 'failCount',
        'errors': 'errors',
        'created_by': 'createdBy',
        'communicated': 'communicated',
        'campaign_i_ds': 'campaignIDs'
    }

    def __init__(self, id=None, created=None, application_id=None, account_id=None, filters=None, status=None, deleted_amount=None, fail_count=None, errors=None, created_by=None, communicated=None, campaign_i_ds=None, local_vars_configuration=None):  # noqa: E501
        """CouponDeletionJob - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._created = None
        self._application_id = None
        self._account_id = None
        self._filters = None
        self._status = None
        self._deleted_amount = None
        self._fail_count = None
        self._errors = None
        self._created_by = None
        self._communicated = None
        self._campaign_i_ds = None
        self.discriminator = None

        self.id = id
        self.created = created
        self.application_id = application_id
        self.account_id = account_id
        self.filters = filters
        self.status = status
        if deleted_amount is not None:
            self.deleted_amount = deleted_amount
        self.fail_count = fail_count
        self.errors = errors
        self.created_by = created_by
        self.communicated = communicated
        if campaign_i_ds is not None:
            self.campaign_i_ds = campaign_i_ds

    @property
    def id(self):
        """Gets the id of this CouponDeletionJob.  # noqa: E501

        Internal ID of this entity.  # noqa: E501

        :return: The id of this CouponDeletionJob.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CouponDeletionJob.

        Internal ID of this entity.  # noqa: E501

        :param id: The id of this CouponDeletionJob.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created(self):
        """Gets the created of this CouponDeletionJob.  # noqa: E501

        The time this entity was created.  # noqa: E501

        :return: The created of this CouponDeletionJob.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CouponDeletionJob.

        The time this entity was created.  # noqa: E501

        :param created: The created of this CouponDeletionJob.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def application_id(self):
        """Gets the application_id of this CouponDeletionJob.  # noqa: E501

        The ID of the application that owns this entity.  # noqa: E501

        :return: The application_id of this CouponDeletionJob.  # noqa: E501
        :rtype: int
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this CouponDeletionJob.

        The ID of the application that owns this entity.  # noqa: E501

        :param application_id: The application_id of this CouponDeletionJob.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and application_id is None:  # noqa: E501
            raise ValueError("Invalid value for `application_id`, must not be `None`")  # noqa: E501

        self._application_id = application_id

    @property
    def account_id(self):
        """Gets the account_id of this CouponDeletionJob.  # noqa: E501

        The ID of the account that owns this entity.  # noqa: E501

        :return: The account_id of this CouponDeletionJob.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CouponDeletionJob.

        The ID of the account that owns this entity.  # noqa: E501

        :param account_id: The account_id of this CouponDeletionJob.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and account_id is None:  # noqa: E501
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def filters(self):
        """Gets the filters of this CouponDeletionJob.  # noqa: E501


        :return: The filters of this CouponDeletionJob.  # noqa: E501
        :rtype: CouponDeletionFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this CouponDeletionJob.


        :param filters: The filters of this CouponDeletionJob.  # noqa: E501
        :type: CouponDeletionFilters
        """
        if self.local_vars_configuration.client_side_validation and filters is None:  # noqa: E501
            raise ValueError("Invalid value for `filters`, must not be `None`")  # noqa: E501

        self._filters = filters

    @property
    def status(self):
        """Gets the status of this CouponDeletionJob.  # noqa: E501

        The current status of this request. Possible values: - `not_ready` - `pending` - `completed` - `failed`   # noqa: E501

        :return: The status of this CouponDeletionJob.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CouponDeletionJob.

        The current status of this request. Possible values: - `not_ready` - `pending` - `completed` - `failed`   # noqa: E501

        :param status: The status of this CouponDeletionJob.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def deleted_amount(self):
        """Gets the deleted_amount of this CouponDeletionJob.  # noqa: E501

        The number of coupon codes that were already deleted for this request.  # noqa: E501

        :return: The deleted_amount of this CouponDeletionJob.  # noqa: E501
        :rtype: int
        """
        return self._deleted_amount

    @deleted_amount.setter
    def deleted_amount(self, deleted_amount):
        """Sets the deleted_amount of this CouponDeletionJob.

        The number of coupon codes that were already deleted for this request.  # noqa: E501

        :param deleted_amount: The deleted_amount of this CouponDeletionJob.  # noqa: E501
        :type: int
        """

        self._deleted_amount = deleted_amount

    @property
    def fail_count(self):
        """Gets the fail_count of this CouponDeletionJob.  # noqa: E501

        The number of times this job failed.  # noqa: E501

        :return: The fail_count of this CouponDeletionJob.  # noqa: E501
        :rtype: int
        """
        return self._fail_count

    @fail_count.setter
    def fail_count(self, fail_count):
        """Sets the fail_count of this CouponDeletionJob.

        The number of times this job failed.  # noqa: E501

        :param fail_count: The fail_count of this CouponDeletionJob.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and fail_count is None:  # noqa: E501
            raise ValueError("Invalid value for `fail_count`, must not be `None`")  # noqa: E501

        self._fail_count = fail_count

    @property
    def errors(self):
        """Gets the errors of this CouponDeletionJob.  # noqa: E501

        An array of individual problems encountered during the request.  # noqa: E501

        :return: The errors of this CouponDeletionJob.  # noqa: E501
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this CouponDeletionJob.

        An array of individual problems encountered during the request.  # noqa: E501

        :param errors: The errors of this CouponDeletionJob.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and errors is None:  # noqa: E501
            raise ValueError("Invalid value for `errors`, must not be `None`")  # noqa: E501

        self._errors = errors

    @property
    def created_by(self):
        """Gets the created_by of this CouponDeletionJob.  # noqa: E501

        ID of the user who created this effect.  # noqa: E501

        :return: The created_by of this CouponDeletionJob.  # noqa: E501
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this CouponDeletionJob.

        ID of the user who created this effect.  # noqa: E501

        :param created_by: The created_by of this CouponDeletionJob.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def communicated(self):
        """Gets the communicated of this CouponDeletionJob.  # noqa: E501

        Indicates whether the user that created this job was notified of its final state.  # noqa: E501

        :return: The communicated of this CouponDeletionJob.  # noqa: E501
        :rtype: bool
        """
        return self._communicated

    @communicated.setter
    def communicated(self, communicated):
        """Sets the communicated of this CouponDeletionJob.

        Indicates whether the user that created this job was notified of its final state.  # noqa: E501

        :param communicated: The communicated of this CouponDeletionJob.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and communicated is None:  # noqa: E501
            raise ValueError("Invalid value for `communicated`, must not be `None`")  # noqa: E501

        self._communicated = communicated

    @property
    def campaign_i_ds(self):
        """Gets the campaign_i_ds of this CouponDeletionJob.  # noqa: E501


        :return: The campaign_i_ds of this CouponDeletionJob.  # noqa: E501
        :rtype: list[int]
        """
        return self._campaign_i_ds

    @campaign_i_ds.setter
    def campaign_i_ds(self, campaign_i_ds):
        """Sets the campaign_i_ds of this CouponDeletionJob.


        :param campaign_i_ds: The campaign_i_ds of this CouponDeletionJob.  # noqa: E501
        :type: list[int]
        """

        self._campaign_i_ds = campaign_i_ds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CouponDeletionJob):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CouponDeletionJob):
            return True

        return self.to_dict() != other.to_dict()
