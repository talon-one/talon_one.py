# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class CampaignVersions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'revision_frontend_state': 'str',
        'active_revision_id': 'int',
        'active_revision_version_id': 'int',
        'version': 'int',
        'current_revision_id': 'int',
        'current_revision_version_id': 'int',
        'stage_revision': 'bool'
    }

    attribute_map = {
        'revision_frontend_state': 'revisionFrontendState',
        'active_revision_id': 'activeRevisionId',
        'active_revision_version_id': 'activeRevisionVersionId',
        'version': 'version',
        'current_revision_id': 'currentRevisionId',
        'current_revision_version_id': 'currentRevisionVersionId',
        'stage_revision': 'stageRevision'
    }

    def __init__(self, revision_frontend_state=None, active_revision_id=None, active_revision_version_id=None, version=None, current_revision_id=None, current_revision_version_id=None, stage_revision=False, local_vars_configuration=None):  # noqa: E501
        """CampaignVersions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._revision_frontend_state = None
        self._active_revision_id = None
        self._active_revision_version_id = None
        self._version = None
        self._current_revision_id = None
        self._current_revision_version_id = None
        self._stage_revision = None
        self.discriminator = None

        if revision_frontend_state is not None:
            self.revision_frontend_state = revision_frontend_state
        if active_revision_id is not None:
            self.active_revision_id = active_revision_id
        if active_revision_version_id is not None:
            self.active_revision_version_id = active_revision_version_id
        if version is not None:
            self.version = version
        if current_revision_id is not None:
            self.current_revision_id = current_revision_id
        if current_revision_version_id is not None:
            self.current_revision_version_id = current_revision_version_id
        if stage_revision is not None:
            self.stage_revision = stage_revision

    @property
    def revision_frontend_state(self):
        """Gets the revision_frontend_state of this CampaignVersions.  # noqa: E501

        The campaign revision state displayed in the Campaign Manager.  # noqa: E501

        :return: The revision_frontend_state of this CampaignVersions.  # noqa: E501
        :rtype: str
        """
        return self._revision_frontend_state

    @revision_frontend_state.setter
    def revision_frontend_state(self, revision_frontend_state):
        """Sets the revision_frontend_state of this CampaignVersions.

        The campaign revision state displayed in the Campaign Manager.  # noqa: E501

        :param revision_frontend_state: The revision_frontend_state of this CampaignVersions.  # noqa: E501
        :type: str
        """
        allowed_values = ["revised", "pending"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and revision_frontend_state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `revision_frontend_state` ({0}), must be one of {1}"  # noqa: E501
                .format(revision_frontend_state, allowed_values)
            )

        self._revision_frontend_state = revision_frontend_state

    @property
    def active_revision_id(self):
        """Gets the active_revision_id of this CampaignVersions.  # noqa: E501

        ID of the revision that was last activated on this campaign.   # noqa: E501

        :return: The active_revision_id of this CampaignVersions.  # noqa: E501
        :rtype: int
        """
        return self._active_revision_id

    @active_revision_id.setter
    def active_revision_id(self, active_revision_id):
        """Sets the active_revision_id of this CampaignVersions.

        ID of the revision that was last activated on this campaign.   # noqa: E501

        :param active_revision_id: The active_revision_id of this CampaignVersions.  # noqa: E501
        :type: int
        """

        self._active_revision_id = active_revision_id

    @property
    def active_revision_version_id(self):
        """Gets the active_revision_version_id of this CampaignVersions.  # noqa: E501

        ID of the revision version that is active on the campaign.   # noqa: E501

        :return: The active_revision_version_id of this CampaignVersions.  # noqa: E501
        :rtype: int
        """
        return self._active_revision_version_id

    @active_revision_version_id.setter
    def active_revision_version_id(self, active_revision_version_id):
        """Sets the active_revision_version_id of this CampaignVersions.

        ID of the revision version that is active on the campaign.   # noqa: E501

        :param active_revision_version_id: The active_revision_version_id of this CampaignVersions.  # noqa: E501
        :type: int
        """

        self._active_revision_version_id = active_revision_version_id

    @property
    def version(self):
        """Gets the version of this CampaignVersions.  # noqa: E501

        Incrementing number representing how many revisions have been activated on this campaign, starts from 0 for a new campaign.   # noqa: E501

        :return: The version of this CampaignVersions.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CampaignVersions.

        Incrementing number representing how many revisions have been activated on this campaign, starts from 0 for a new campaign.   # noqa: E501

        :param version: The version of this CampaignVersions.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def current_revision_id(self):
        """Gets the current_revision_id of this CampaignVersions.  # noqa: E501

        ID of the revision currently being modified for the campaign.   # noqa: E501

        :return: The current_revision_id of this CampaignVersions.  # noqa: E501
        :rtype: int
        """
        return self._current_revision_id

    @current_revision_id.setter
    def current_revision_id(self, current_revision_id):
        """Sets the current_revision_id of this CampaignVersions.

        ID of the revision currently being modified for the campaign.   # noqa: E501

        :param current_revision_id: The current_revision_id of this CampaignVersions.  # noqa: E501
        :type: int
        """

        self._current_revision_id = current_revision_id

    @property
    def current_revision_version_id(self):
        """Gets the current_revision_version_id of this CampaignVersions.  # noqa: E501

        ID of the latest version applied on the current revision.   # noqa: E501

        :return: The current_revision_version_id of this CampaignVersions.  # noqa: E501
        :rtype: int
        """
        return self._current_revision_version_id

    @current_revision_version_id.setter
    def current_revision_version_id(self, current_revision_version_id):
        """Sets the current_revision_version_id of this CampaignVersions.

        ID of the latest version applied on the current revision.   # noqa: E501

        :param current_revision_version_id: The current_revision_version_id of this CampaignVersions.  # noqa: E501
        :type: int
        """

        self._current_revision_version_id = current_revision_version_id

    @property
    def stage_revision(self):
        """Gets the stage_revision of this CampaignVersions.  # noqa: E501

        Flag for determining whether we use current revision when sending requests with staging API key.   # noqa: E501

        :return: The stage_revision of this CampaignVersions.  # noqa: E501
        :rtype: bool
        """
        return self._stage_revision

    @stage_revision.setter
    def stage_revision(self, stage_revision):
        """Sets the stage_revision of this CampaignVersions.

        Flag for determining whether we use current revision when sending requests with staging API key.   # noqa: E501

        :param stage_revision: The stage_revision of this CampaignVersions.  # noqa: E501
        :type: bool
        """

        self._stage_revision = stage_revision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignVersions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CampaignVersions):
            return True

        return self.to_dict() != other.to_dict()
