# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class CatalogItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'created': 'datetime',
        'sku': 'str',
        'price': 'float',
        'catalogid': 'int',
        'version': 'int',
        'attributes': 'list[ItemAttribute]',
        'product': 'Product'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'sku': 'sku',
        'price': 'price',
        'catalogid': 'catalogid',
        'version': 'version',
        'attributes': 'attributes',
        'product': 'product'
    }

    def __init__(self, id=None, created=None, sku=None, price=None, catalogid=None, version=None, attributes=None, product=None, local_vars_configuration=None):  # noqa: E501
        """CatalogItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._created = None
        self._sku = None
        self._price = None
        self._catalogid = None
        self._version = None
        self._attributes = None
        self._product = None
        self.discriminator = None

        self.id = id
        self.created = created
        self.sku = sku
        if price is not None:
            self.price = price
        self.catalogid = catalogid
        self.version = version
        if attributes is not None:
            self.attributes = attributes
        if product is not None:
            self.product = product

    @property
    def id(self):
        """Gets the id of this CatalogItem.  # noqa: E501

        Internal ID of this entity.  # noqa: E501

        :return: The id of this CatalogItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CatalogItem.

        Internal ID of this entity.  # noqa: E501

        :param id: The id of this CatalogItem.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created(self):
        """Gets the created of this CatalogItem.  # noqa: E501

        The time this entity was created.  # noqa: E501

        :return: The created of this CatalogItem.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CatalogItem.

        The time this entity was created.  # noqa: E501

        :param created: The created of this CatalogItem.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def sku(self):
        """Gets the sku of this CatalogItem.  # noqa: E501

        The stock keeping unit of the item.  # noqa: E501

        :return: The sku of this CatalogItem.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this CatalogItem.

        The stock keeping unit of the item.  # noqa: E501

        :param sku: The sku of this CatalogItem.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and sku is None:  # noqa: E501
            raise ValueError("Invalid value for `sku`, must not be `None`")  # noqa: E501

        self._sku = sku

    @property
    def price(self):
        """Gets the price of this CatalogItem.  # noqa: E501

        Price of the item.  # noqa: E501

        :return: The price of this CatalogItem.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CatalogItem.

        Price of the item.  # noqa: E501

        :param price: The price of this CatalogItem.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def catalogid(self):
        """Gets the catalogid of this CatalogItem.  # noqa: E501

        The ID of the catalog the item belongs to.  # noqa: E501

        :return: The catalogid of this CatalogItem.  # noqa: E501
        :rtype: int
        """
        return self._catalogid

    @catalogid.setter
    def catalogid(self, catalogid):
        """Sets the catalogid of this CatalogItem.

        The ID of the catalog the item belongs to.  # noqa: E501

        :param catalogid: The catalogid of this CatalogItem.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and catalogid is None:  # noqa: E501
            raise ValueError("Invalid value for `catalogid`, must not be `None`")  # noqa: E501

        self._catalogid = catalogid

    @property
    def version(self):
        """Gets the version of this CatalogItem.  # noqa: E501

        The version of the catalog item.  # noqa: E501

        :return: The version of this CatalogItem.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CatalogItem.

        The version of the catalog item.  # noqa: E501

        :param version: The version of this CatalogItem.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                version is not None and version < 1):  # noqa: E501
            raise ValueError("Invalid value for `version`, must be a value greater than or equal to `1`")  # noqa: E501

        self._version = version

    @property
    def attributes(self):
        """Gets the attributes of this CatalogItem.  # noqa: E501


        :return: The attributes of this CatalogItem.  # noqa: E501
        :rtype: list[ItemAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this CatalogItem.


        :param attributes: The attributes of this CatalogItem.  # noqa: E501
        :type: list[ItemAttribute]
        """

        self._attributes = attributes

    @property
    def product(self):
        """Gets the product of this CatalogItem.  # noqa: E501


        :return: The product of this CatalogItem.  # noqa: E501
        :rtype: Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this CatalogItem.


        :param product: The product of this CatalogItem.  # noqa: E501
        :type: Product
        """

        self._product = product

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CatalogItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CatalogItem):
            return True

        return self.to_dict() != other.to_dict()
