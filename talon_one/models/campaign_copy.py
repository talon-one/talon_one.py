# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class CampaignCopy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'application_ids': 'list[int]',
        'description': 'str',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'tags': 'list[str]',
        'evaluation_group_id': 'int'
    }

    attribute_map = {
        'name': 'name',
        'application_ids': 'applicationIds',
        'description': 'description',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'tags': 'tags',
        'evaluation_group_id': 'evaluationGroupId'
    }

    def __init__(self, name=None, application_ids=None, description=None, start_time=None, end_time=None, tags=None, evaluation_group_id=None, local_vars_configuration=None):  # noqa: E501
        """CampaignCopy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._application_ids = None
        self._description = None
        self._start_time = None
        self._end_time = None
        self._tags = None
        self._evaluation_group_id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        self.application_ids = application_ids
        if description is not None:
            self.description = description
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if tags is not None:
            self.tags = tags
        if evaluation_group_id is not None:
            self.evaluation_group_id = evaluation_group_id

    @property
    def name(self):
        """Gets the name of this CampaignCopy.  # noqa: E501

        Name of the copied campaign (Defaults to \"Copy of original campaign name\").  # noqa: E501

        :return: The name of this CampaignCopy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CampaignCopy.

        Name of the copied campaign (Defaults to \"Copy of original campaign name\").  # noqa: E501

        :param name: The name of this CampaignCopy.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def application_ids(self):
        """Gets the application_ids of this CampaignCopy.  # noqa: E501

        Application IDs of the applications to which a campaign should be copied to.  # noqa: E501

        :return: The application_ids of this CampaignCopy.  # noqa: E501
        :rtype: list[int]
        """
        return self._application_ids

    @application_ids.setter
    def application_ids(self, application_ids):
        """Sets the application_ids of this CampaignCopy.

        Application IDs of the applications to which a campaign should be copied to.  # noqa: E501

        :param application_ids: The application_ids of this CampaignCopy.  # noqa: E501
        :type: list[int]
        """
        if self.local_vars_configuration.client_side_validation and application_ids is None:  # noqa: E501
            raise ValueError("Invalid value for `application_ids`, must not be `None`")  # noqa: E501

        self._application_ids = application_ids

    @property
    def description(self):
        """Gets the description of this CampaignCopy.  # noqa: E501

        A detailed description of the campaign.  # noqa: E501

        :return: The description of this CampaignCopy.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CampaignCopy.

        A detailed description of the campaign.  # noqa: E501

        :param description: The description of this CampaignCopy.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def start_time(self):
        """Gets the start_time of this CampaignCopy.  # noqa: E501

        Timestamp when the campaign will become active.  # noqa: E501

        :return: The start_time of this CampaignCopy.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this CampaignCopy.

        Timestamp when the campaign will become active.  # noqa: E501

        :param start_time: The start_time of this CampaignCopy.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this CampaignCopy.  # noqa: E501

        Timestamp when the campaign will become inactive.  # noqa: E501

        :return: The end_time of this CampaignCopy.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this CampaignCopy.

        Timestamp when the campaign will become inactive.  # noqa: E501

        :param end_time: The end_time of this CampaignCopy.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def tags(self):
        """Gets the tags of this CampaignCopy.  # noqa: E501

        A list of tags for the campaign.  # noqa: E501

        :return: The tags of this CampaignCopy.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CampaignCopy.

        A list of tags for the campaign.  # noqa: E501

        :param tags: The tags of this CampaignCopy.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def evaluation_group_id(self):
        """Gets the evaluation_group_id of this CampaignCopy.  # noqa: E501

        The ID of the campaign evaluation group the campaign belongs to.  # noqa: E501

        :return: The evaluation_group_id of this CampaignCopy.  # noqa: E501
        :rtype: int
        """
        return self._evaluation_group_id

    @evaluation_group_id.setter
    def evaluation_group_id(self, evaluation_group_id):
        """Sets the evaluation_group_id of this CampaignCopy.

        The ID of the campaign evaluation group the campaign belongs to.  # noqa: E501

        :param evaluation_group_id: The evaluation_group_id of this CampaignCopy.  # noqa: E501
        :type: int
        """

        self._evaluation_group_id = evaluation_group_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignCopy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CampaignCopy):
            return True

        return self.to_dict() != other.to_dict()
