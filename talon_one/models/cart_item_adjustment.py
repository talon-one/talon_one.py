# coding: utf-8

"""
    Talon.One API

    The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class CartItemAdjustment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pay_from_loyalty_program': 'int',
        'point_payment': 'int',
        'remaining_price': 'float'
    }

    attribute_map = {
        'pay_from_loyalty_program': 'payFromLoyaltyProgram',
        'point_payment': 'pointPayment',
        'remaining_price': 'remainingPrice'
    }

    def __init__(self, pay_from_loyalty_program=None, point_payment=None, remaining_price=None, local_vars_configuration=None):  # noqa: E501
        """CartItemAdjustment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pay_from_loyalty_program = None
        self._point_payment = None
        self._remaining_price = None
        self.discriminator = None

        self.pay_from_loyalty_program = pay_from_loyalty_program
        self.point_payment = point_payment
        if remaining_price is not None:
            self.remaining_price = remaining_price

    @property
    def pay_from_loyalty_program(self):
        """Gets the pay_from_loyalty_program of this CartItemAdjustment.  # noqa: E501

        Loyalty Program to be used for payment  # noqa: E501

        :return: The pay_from_loyalty_program of this CartItemAdjustment.  # noqa: E501
        :rtype: int
        """
        return self._pay_from_loyalty_program

    @pay_from_loyalty_program.setter
    def pay_from_loyalty_program(self, pay_from_loyalty_program):
        """Sets the pay_from_loyalty_program of this CartItemAdjustment.

        Loyalty Program to be used for payment  # noqa: E501

        :param pay_from_loyalty_program: The pay_from_loyalty_program of this CartItemAdjustment.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and pay_from_loyalty_program is None:  # noqa: E501
            raise ValueError("Invalid value for `pay_from_loyalty_program`, must not be `None`")  # noqa: E501

        self._pay_from_loyalty_program = pay_from_loyalty_program

    @property
    def point_payment(self):
        """Gets the point_payment of this CartItemAdjustment.  # noqa: E501

        Amount of points to be spend  # noqa: E501

        :return: The point_payment of this CartItemAdjustment.  # noqa: E501
        :rtype: int
        """
        return self._point_payment

    @point_payment.setter
    def point_payment(self, point_payment):
        """Sets the point_payment of this CartItemAdjustment.

        Amount of points to be spend  # noqa: E501

        :param point_payment: The point_payment of this CartItemAdjustment.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and point_payment is None:  # noqa: E501
            raise ValueError("Invalid value for `point_payment`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                point_payment is not None and point_payment < 1):  # noqa: E501
            raise ValueError("Invalid value for `point_payment`, must be a value greater than or equal to `1`")  # noqa: E501

        self._point_payment = point_payment

    @property
    def remaining_price(self):
        """Gets the remaining_price of this CartItemAdjustment.  # noqa: E501

        Remaining price in currency after payment in points has been made  # noqa: E501

        :return: The remaining_price of this CartItemAdjustment.  # noqa: E501
        :rtype: float
        """
        return self._remaining_price

    @remaining_price.setter
    def remaining_price(self, remaining_price):
        """Sets the remaining_price of this CartItemAdjustment.

        Remaining price in currency after payment in points has been made  # noqa: E501

        :param remaining_price: The remaining_price of this CartItemAdjustment.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                remaining_price is not None and remaining_price < 0):  # noqa: E501
            raise ValueError("Invalid value for `remaining_price`, must be a value greater than or equal to `0`")  # noqa: E501

        self._remaining_price = remaining_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CartItemAdjustment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CartItemAdjustment):
            return True

        return self.to_dict() != other.to_dict()
