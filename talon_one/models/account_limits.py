# coding: utf-8

"""
    Talon.One API

    The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccountLimits(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'live_applications': 'int',
        'sandbox_applications': 'int',
        'active_campaigns': 'int',
        'coupons': 'int',
        'referral_codes': 'int',
        'live_loyalty_programs': 'int',
        'sandbox_loyalty_programs': 'int',
        'webhooks': 'int',
        'users': 'int',
        'api_volume': 'int',
        'active_rules': 'int',
        'promotion_types': 'list[str]'
    }

    attribute_map = {
        'live_applications': 'liveApplications',
        'sandbox_applications': 'sandboxApplications',
        'active_campaigns': 'activeCampaigns',
        'coupons': 'coupons',
        'referral_codes': 'referralCodes',
        'live_loyalty_programs': 'liveLoyaltyPrograms',
        'sandbox_loyalty_programs': 'sandboxLoyaltyPrograms',
        'webhooks': 'webhooks',
        'users': 'users',
        'api_volume': 'apiVolume',
        'active_rules': 'activeRules',
        'promotion_types': 'promotionTypes'
    }

    def __init__(self, live_applications=None, sandbox_applications=None, active_campaigns=None, coupons=None, referral_codes=None, live_loyalty_programs=None, sandbox_loyalty_programs=None, webhooks=None, users=None, api_volume=None, active_rules=None, promotion_types=None):  # noqa: E501
        """AccountLimits - a model defined in Swagger"""  # noqa: E501

        self._live_applications = None
        self._sandbox_applications = None
        self._active_campaigns = None
        self._coupons = None
        self._referral_codes = None
        self._live_loyalty_programs = None
        self._sandbox_loyalty_programs = None
        self._webhooks = None
        self._users = None
        self._api_volume = None
        self._active_rules = None
        self._promotion_types = None
        self.discriminator = None

        self.live_applications = live_applications
        self.sandbox_applications = sandbox_applications
        self.active_campaigns = active_campaigns
        self.coupons = coupons
        self.referral_codes = referral_codes
        self.live_loyalty_programs = live_loyalty_programs
        self.sandbox_loyalty_programs = sandbox_loyalty_programs
        self.webhooks = webhooks
        self.users = users
        self.api_volume = api_volume
        if active_rules is not None:
            self.active_rules = active_rules
        self.promotion_types = promotion_types

    @property
    def live_applications(self):
        """Gets the live_applications of this AccountLimits.  # noqa: E501

        Total Number of allowed live applications in the account  # noqa: E501

        :return: The live_applications of this AccountLimits.  # noqa: E501
        :rtype: int
        """
        return self._live_applications

    @live_applications.setter
    def live_applications(self, live_applications):
        """Sets the live_applications of this AccountLimits.

        Total Number of allowed live applications in the account  # noqa: E501

        :param live_applications: The live_applications of this AccountLimits.  # noqa: E501
        :type: int
        """
        if live_applications is None:
            raise ValueError("Invalid value for `live_applications`, must not be `None`")  # noqa: E501

        self._live_applications = live_applications

    @property
    def sandbox_applications(self):
        """Gets the sandbox_applications of this AccountLimits.  # noqa: E501

        Total Number of allowed sandbox applications in the account  # noqa: E501

        :return: The sandbox_applications of this AccountLimits.  # noqa: E501
        :rtype: int
        """
        return self._sandbox_applications

    @sandbox_applications.setter
    def sandbox_applications(self, sandbox_applications):
        """Sets the sandbox_applications of this AccountLimits.

        Total Number of allowed sandbox applications in the account  # noqa: E501

        :param sandbox_applications: The sandbox_applications of this AccountLimits.  # noqa: E501
        :type: int
        """
        if sandbox_applications is None:
            raise ValueError("Invalid value for `sandbox_applications`, must not be `None`")  # noqa: E501

        self._sandbox_applications = sandbox_applications

    @property
    def active_campaigns(self):
        """Gets the active_campaigns of this AccountLimits.  # noqa: E501

        Total Number of allowed active campaigns in the account  # noqa: E501

        :return: The active_campaigns of this AccountLimits.  # noqa: E501
        :rtype: int
        """
        return self._active_campaigns

    @active_campaigns.setter
    def active_campaigns(self, active_campaigns):
        """Sets the active_campaigns of this AccountLimits.

        Total Number of allowed active campaigns in the account  # noqa: E501

        :param active_campaigns: The active_campaigns of this AccountLimits.  # noqa: E501
        :type: int
        """
        if active_campaigns is None:
            raise ValueError("Invalid value for `active_campaigns`, must not be `None`")  # noqa: E501

        self._active_campaigns = active_campaigns

    @property
    def coupons(self):
        """Gets the coupons of this AccountLimits.  # noqa: E501

        Total Number of allowed coupons in the account  # noqa: E501

        :return: The coupons of this AccountLimits.  # noqa: E501
        :rtype: int
        """
        return self._coupons

    @coupons.setter
    def coupons(self, coupons):
        """Sets the coupons of this AccountLimits.

        Total Number of allowed coupons in the account  # noqa: E501

        :param coupons: The coupons of this AccountLimits.  # noqa: E501
        :type: int
        """
        if coupons is None:
            raise ValueError("Invalid value for `coupons`, must not be `None`")  # noqa: E501

        self._coupons = coupons

    @property
    def referral_codes(self):
        """Gets the referral_codes of this AccountLimits.  # noqa: E501

        Total Number of allowed referral codes in the account  # noqa: E501

        :return: The referral_codes of this AccountLimits.  # noqa: E501
        :rtype: int
        """
        return self._referral_codes

    @referral_codes.setter
    def referral_codes(self, referral_codes):
        """Sets the referral_codes of this AccountLimits.

        Total Number of allowed referral codes in the account  # noqa: E501

        :param referral_codes: The referral_codes of this AccountLimits.  # noqa: E501
        :type: int
        """
        if referral_codes is None:
            raise ValueError("Invalid value for `referral_codes`, must not be `None`")  # noqa: E501

        self._referral_codes = referral_codes

    @property
    def live_loyalty_programs(self):
        """Gets the live_loyalty_programs of this AccountLimits.  # noqa: E501

        Total Number of allowed live loyalty programs in the account  # noqa: E501

        :return: The live_loyalty_programs of this AccountLimits.  # noqa: E501
        :rtype: int
        """
        return self._live_loyalty_programs

    @live_loyalty_programs.setter
    def live_loyalty_programs(self, live_loyalty_programs):
        """Sets the live_loyalty_programs of this AccountLimits.

        Total Number of allowed live loyalty programs in the account  # noqa: E501

        :param live_loyalty_programs: The live_loyalty_programs of this AccountLimits.  # noqa: E501
        :type: int
        """
        if live_loyalty_programs is None:
            raise ValueError("Invalid value for `live_loyalty_programs`, must not be `None`")  # noqa: E501

        self._live_loyalty_programs = live_loyalty_programs

    @property
    def sandbox_loyalty_programs(self):
        """Gets the sandbox_loyalty_programs of this AccountLimits.  # noqa: E501

        Total Number of allowed sandbox loyalty programs in the account  # noqa: E501

        :return: The sandbox_loyalty_programs of this AccountLimits.  # noqa: E501
        :rtype: int
        """
        return self._sandbox_loyalty_programs

    @sandbox_loyalty_programs.setter
    def sandbox_loyalty_programs(self, sandbox_loyalty_programs):
        """Sets the sandbox_loyalty_programs of this AccountLimits.

        Total Number of allowed sandbox loyalty programs in the account  # noqa: E501

        :param sandbox_loyalty_programs: The sandbox_loyalty_programs of this AccountLimits.  # noqa: E501
        :type: int
        """
        if sandbox_loyalty_programs is None:
            raise ValueError("Invalid value for `sandbox_loyalty_programs`, must not be `None`")  # noqa: E501

        self._sandbox_loyalty_programs = sandbox_loyalty_programs

    @property
    def webhooks(self):
        """Gets the webhooks of this AccountLimits.  # noqa: E501

        Total Number of allowed webhooks in the account  # noqa: E501

        :return: The webhooks of this AccountLimits.  # noqa: E501
        :rtype: int
        """
        return self._webhooks

    @webhooks.setter
    def webhooks(self, webhooks):
        """Sets the webhooks of this AccountLimits.

        Total Number of allowed webhooks in the account  # noqa: E501

        :param webhooks: The webhooks of this AccountLimits.  # noqa: E501
        :type: int
        """
        if webhooks is None:
            raise ValueError("Invalid value for `webhooks`, must not be `None`")  # noqa: E501

        self._webhooks = webhooks

    @property
    def users(self):
        """Gets the users of this AccountLimits.  # noqa: E501

        Total Number of allowed users in the account  # noqa: E501

        :return: The users of this AccountLimits.  # noqa: E501
        :rtype: int
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this AccountLimits.

        Total Number of allowed users in the account  # noqa: E501

        :param users: The users of this AccountLimits.  # noqa: E501
        :type: int
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")  # noqa: E501

        self._users = users

    @property
    def api_volume(self):
        """Gets the api_volume of this AccountLimits.  # noqa: E501

        Total allowed api volume  # noqa: E501

        :return: The api_volume of this AccountLimits.  # noqa: E501
        :rtype: int
        """
        return self._api_volume

    @api_volume.setter
    def api_volume(self, api_volume):
        """Sets the api_volume of this AccountLimits.

        Total allowed api volume  # noqa: E501

        :param api_volume: The api_volume of this AccountLimits.  # noqa: E501
        :type: int
        """
        if api_volume is None:
            raise ValueError("Invalid value for `api_volume`, must not be `None`")  # noqa: E501

        self._api_volume = api_volume

    @property
    def active_rules(self):
        """Gets the active_rules of this AccountLimits.  # noqa: E501

        Total allowed active rulesets  # noqa: E501

        :return: The active_rules of this AccountLimits.  # noqa: E501
        :rtype: int
        """
        return self._active_rules

    @active_rules.setter
    def active_rules(self, active_rules):
        """Sets the active_rules of this AccountLimits.

        Total allowed active rulesets  # noqa: E501

        :param active_rules: The active_rules of this AccountLimits.  # noqa: E501
        :type: int
        """

        self._active_rules = active_rules

    @property
    def promotion_types(self):
        """Gets the promotion_types of this AccountLimits.  # noqa: E501

        array of rulesets where webhook is used  # noqa: E501

        :return: The promotion_types of this AccountLimits.  # noqa: E501
        :rtype: list[str]
        """
        return self._promotion_types

    @promotion_types.setter
    def promotion_types(self, promotion_types):
        """Sets the promotion_types of this AccountLimits.

        array of rulesets where webhook is used  # noqa: E501

        :param promotion_types: The promotion_types of this AccountLimits.  # noqa: E501
        :type: list[str]
        """
        if promotion_types is None:
            raise ValueError("Invalid value for `promotion_types`, must not be `None`")  # noqa: E501

        self._promotion_types = promotion_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountLimits, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountLimits):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
