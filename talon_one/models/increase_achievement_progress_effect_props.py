# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class IncreaseAchievementProgressEffectProps(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'achievement_id': 'int',
        'achievement_name': 'str',
        'progress_tracker_id': 'int',
        'delta': 'float',
        'value': 'float',
        'target': 'float',
        'is_just_completed': 'bool'
    }

    attribute_map = {
        'achievement_id': 'achievementId',
        'achievement_name': 'achievementName',
        'progress_tracker_id': 'progressTrackerId',
        'delta': 'delta',
        'value': 'value',
        'target': 'target',
        'is_just_completed': 'isJustCompleted'
    }

    def __init__(self, achievement_id=None, achievement_name=None, progress_tracker_id=None, delta=None, value=None, target=None, is_just_completed=None, local_vars_configuration=None):  # noqa: E501
        """IncreaseAchievementProgressEffectProps - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._achievement_id = None
        self._achievement_name = None
        self._progress_tracker_id = None
        self._delta = None
        self._value = None
        self._target = None
        self._is_just_completed = None
        self.discriminator = None

        self.achievement_id = achievement_id
        self.achievement_name = achievement_name
        if progress_tracker_id is not None:
            self.progress_tracker_id = progress_tracker_id
        self.delta = delta
        self.value = value
        self.target = target
        self.is_just_completed = is_just_completed

    @property
    def achievement_id(self):
        """Gets the achievement_id of this IncreaseAchievementProgressEffectProps.  # noqa: E501

        The internal ID of the achievement.  # noqa: E501

        :return: The achievement_id of this IncreaseAchievementProgressEffectProps.  # noqa: E501
        :rtype: int
        """
        return self._achievement_id

    @achievement_id.setter
    def achievement_id(self, achievement_id):
        """Sets the achievement_id of this IncreaseAchievementProgressEffectProps.

        The internal ID of the achievement.  # noqa: E501

        :param achievement_id: The achievement_id of this IncreaseAchievementProgressEffectProps.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and achievement_id is None:  # noqa: E501
            raise ValueError("Invalid value for `achievement_id`, must not be `None`")  # noqa: E501

        self._achievement_id = achievement_id

    @property
    def achievement_name(self):
        """Gets the achievement_name of this IncreaseAchievementProgressEffectProps.  # noqa: E501

        The name of the achievement.  # noqa: E501

        :return: The achievement_name of this IncreaseAchievementProgressEffectProps.  # noqa: E501
        :rtype: str
        """
        return self._achievement_name

    @achievement_name.setter
    def achievement_name(self, achievement_name):
        """Sets the achievement_name of this IncreaseAchievementProgressEffectProps.

        The name of the achievement.  # noqa: E501

        :param achievement_name: The achievement_name of this IncreaseAchievementProgressEffectProps.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and achievement_name is None:  # noqa: E501
            raise ValueError("Invalid value for `achievement_name`, must not be `None`")  # noqa: E501

        self._achievement_name = achievement_name

    @property
    def progress_tracker_id(self):
        """Gets the progress_tracker_id of this IncreaseAchievementProgressEffectProps.  # noqa: E501

        The internal ID of the achievement progress tracker.  # noqa: E501

        :return: The progress_tracker_id of this IncreaseAchievementProgressEffectProps.  # noqa: E501
        :rtype: int
        """
        return self._progress_tracker_id

    @progress_tracker_id.setter
    def progress_tracker_id(self, progress_tracker_id):
        """Sets the progress_tracker_id of this IncreaseAchievementProgressEffectProps.

        The internal ID of the achievement progress tracker.  # noqa: E501

        :param progress_tracker_id: The progress_tracker_id of this IncreaseAchievementProgressEffectProps.  # noqa: E501
        :type: int
        """

        self._progress_tracker_id = progress_tracker_id

    @property
    def delta(self):
        """Gets the delta of this IncreaseAchievementProgressEffectProps.  # noqa: E501

        The value by which the customer's current progress in the achievement is increased.  # noqa: E501

        :return: The delta of this IncreaseAchievementProgressEffectProps.  # noqa: E501
        :rtype: float
        """
        return self._delta

    @delta.setter
    def delta(self, delta):
        """Sets the delta of this IncreaseAchievementProgressEffectProps.

        The value by which the customer's current progress in the achievement is increased.  # noqa: E501

        :param delta: The delta of this IncreaseAchievementProgressEffectProps.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and delta is None:  # noqa: E501
            raise ValueError("Invalid value for `delta`, must not be `None`")  # noqa: E501

        self._delta = delta

    @property
    def value(self):
        """Gets the value of this IncreaseAchievementProgressEffectProps.  # noqa: E501

        The current progress of the customer in the achievement.  # noqa: E501

        :return: The value of this IncreaseAchievementProgressEffectProps.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this IncreaseAchievementProgressEffectProps.

        The current progress of the customer in the achievement.  # noqa: E501

        :param value: The value of this IncreaseAchievementProgressEffectProps.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and value is None:  # noqa: E501
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def target(self):
        """Gets the target of this IncreaseAchievementProgressEffectProps.  # noqa: E501

        The target value to complete the achievement.  # noqa: E501

        :return: The target of this IncreaseAchievementProgressEffectProps.  # noqa: E501
        :rtype: float
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this IncreaseAchievementProgressEffectProps.

        The target value to complete the achievement.  # noqa: E501

        :param target: The target of this IncreaseAchievementProgressEffectProps.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and target is None:  # noqa: E501
            raise ValueError("Invalid value for `target`, must not be `None`")  # noqa: E501

        self._target = target

    @property
    def is_just_completed(self):
        """Gets the is_just_completed of this IncreaseAchievementProgressEffectProps.  # noqa: E501

        Indicates if the customer has completed the achievement in the current session.  # noqa: E501

        :return: The is_just_completed of this IncreaseAchievementProgressEffectProps.  # noqa: E501
        :rtype: bool
        """
        return self._is_just_completed

    @is_just_completed.setter
    def is_just_completed(self, is_just_completed):
        """Sets the is_just_completed of this IncreaseAchievementProgressEffectProps.

        Indicates if the customer has completed the achievement in the current session.  # noqa: E501

        :param is_just_completed: The is_just_completed of this IncreaseAchievementProgressEffectProps.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_just_completed is None:  # noqa: E501
            raise ValueError("Invalid value for `is_just_completed`, must not be `None`")  # noqa: E501

        self._is_just_completed = is_just_completed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncreaseAchievementProgressEffectProps):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IncreaseAchievementProgressEffectProps):
            return True

        return self.to_dict() != other.to_dict()
