# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class RoleV2RolesGroup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'applications': 'dict(str, RoleV2ApplicationDetails)',
        'loyalty_programs': 'dict(str, str)',
        'campaign_access_groups': 'dict(str, str)'
    }

    attribute_map = {
        'applications': 'applications',
        'loyalty_programs': 'loyaltyPrograms',
        'campaign_access_groups': 'campaignAccessGroups'
    }

    def __init__(self, applications=None, loyalty_programs=None, campaign_access_groups=None, local_vars_configuration=None):  # noqa: E501
        """RoleV2RolesGroup - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._applications = None
        self._loyalty_programs = None
        self._campaign_access_groups = None
        self.discriminator = None

        if applications is not None:
            self.applications = applications
        if loyalty_programs is not None:
            self.loyalty_programs = loyalty_programs
        if campaign_access_groups is not None:
            self.campaign_access_groups = campaign_access_groups

    @property
    def applications(self):
        """Gets the applications of this RoleV2RolesGroup.  # noqa: E501

        A map of the link between the Application, campaign, or draft campaign-related permission set and the Application ID the permissions apply to.  # noqa: E501

        :return: The applications of this RoleV2RolesGroup.  # noqa: E501
        :rtype: dict(str, RoleV2ApplicationDetails)
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this RoleV2RolesGroup.

        A map of the link between the Application, campaign, or draft campaign-related permission set and the Application ID the permissions apply to.  # noqa: E501

        :param applications: The applications of this RoleV2RolesGroup.  # noqa: E501
        :type: dict(str, RoleV2ApplicationDetails)
        """

        self._applications = applications

    @property
    def loyalty_programs(self):
        """Gets the loyalty_programs of this RoleV2RolesGroup.  # noqa: E501

        A map of the link between the loyalty program-related permission set and the Application ID the permissions apply to.  # noqa: E501

        :return: The loyalty_programs of this RoleV2RolesGroup.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._loyalty_programs

    @loyalty_programs.setter
    def loyalty_programs(self, loyalty_programs):
        """Sets the loyalty_programs of this RoleV2RolesGroup.

        A map of the link between the loyalty program-related permission set and the Application ID the permissions apply to.  # noqa: E501

        :param loyalty_programs: The loyalty_programs of this RoleV2RolesGroup.  # noqa: E501
        :type: dict(str, str)
        """

        self._loyalty_programs = loyalty_programs

    @property
    def campaign_access_groups(self):
        """Gets the campaign_access_groups of this RoleV2RolesGroup.  # noqa: E501

        A map of the link between the campaign access group-related permission set and the Application ID the permissions apply to.  # noqa: E501

        :return: The campaign_access_groups of this RoleV2RolesGroup.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._campaign_access_groups

    @campaign_access_groups.setter
    def campaign_access_groups(self, campaign_access_groups):
        """Sets the campaign_access_groups of this RoleV2RolesGroup.

        A map of the link between the campaign access group-related permission set and the Application ID the permissions apply to.  # noqa: E501

        :param campaign_access_groups: The campaign_access_groups of this RoleV2RolesGroup.  # noqa: E501
        :type: dict(str, str)
        """

        self._campaign_access_groups = campaign_access_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoleV2RolesGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RoleV2RolesGroup):
            return True

        return self.to_dict() != other.to_dict()
