# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class User(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'created': 'datetime',
        'modified': 'datetime',
        'email': 'str',
        'account_id': 'int',
        'invite_token': 'str',
        'state': 'str',
        'name': 'str',
        'policy': 'object',
        'latest_feed_timestamp': 'datetime',
        'roles': 'list[int]',
        'application_notification_subscriptions': 'object',
        'auth_method': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'modified': 'modified',
        'email': 'email',
        'account_id': 'accountId',
        'invite_token': 'inviteToken',
        'state': 'state',
        'name': 'name',
        'policy': 'policy',
        'latest_feed_timestamp': 'latestFeedTimestamp',
        'roles': 'roles',
        'application_notification_subscriptions': 'applicationNotificationSubscriptions',
        'auth_method': 'authMethod'
    }

    def __init__(self, id=None, created=None, modified=None, email=None, account_id=None, invite_token=None, state=None, name=None, policy=None, latest_feed_timestamp=None, roles=None, application_notification_subscriptions=None, auth_method=None, local_vars_configuration=None):  # noqa: E501
        """User - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._created = None
        self._modified = None
        self._email = None
        self._account_id = None
        self._invite_token = None
        self._state = None
        self._name = None
        self._policy = None
        self._latest_feed_timestamp = None
        self._roles = None
        self._application_notification_subscriptions = None
        self._auth_method = None
        self.discriminator = None

        self.id = id
        self.created = created
        self.modified = modified
        self.email = email
        self.account_id = account_id
        self.invite_token = invite_token
        self.state = state
        self.name = name
        self.policy = policy
        if latest_feed_timestamp is not None:
            self.latest_feed_timestamp = latest_feed_timestamp
        if roles is not None:
            self.roles = roles
        if application_notification_subscriptions is not None:
            self.application_notification_subscriptions = application_notification_subscriptions
        if auth_method is not None:
            self.auth_method = auth_method

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501

        Internal ID of this entity.  # noqa: E501

        :return: The id of this User.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        Internal ID of this entity.  # noqa: E501

        :param id: The id of this User.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created(self):
        """Gets the created of this User.  # noqa: E501

        The time this entity was created.  # noqa: E501

        :return: The created of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this User.

        The time this entity was created.  # noqa: E501

        :param created: The created of this User.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this User.  # noqa: E501

        The time this entity was last modified.  # noqa: E501

        :return: The modified of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this User.

        The time this entity was last modified.  # noqa: E501

        :param modified: The modified of this User.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and modified is None:  # noqa: E501
            raise ValueError("Invalid value for `modified`, must not be `None`")  # noqa: E501

        self._modified = modified

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501

        The email address associated with your account.  # noqa: E501

        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        The email address associated with your account.  # noqa: E501

        :param email: The email of this User.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def account_id(self):
        """Gets the account_id of this User.  # noqa: E501

        The ID of the account that owns this entity.  # noqa: E501

        :return: The account_id of this User.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this User.

        The ID of the account that owns this entity.  # noqa: E501

        :param account_id: The account_id of this User.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and account_id is None:  # noqa: E501
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def invite_token(self):
        """Gets the invite_token of this User.  # noqa: E501

        Invite token, empty if the user as already accepted their invite.  # noqa: E501

        :return: The invite_token of this User.  # noqa: E501
        :rtype: str
        """
        return self._invite_token

    @invite_token.setter
    def invite_token(self, invite_token):
        """Sets the invite_token of this User.

        Invite token, empty if the user as already accepted their invite.  # noqa: E501

        :param invite_token: The invite_token of this User.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and invite_token is None:  # noqa: E501
            raise ValueError("Invalid value for `invite_token`, must not be `None`")  # noqa: E501

        self._invite_token = invite_token

    @property
    def state(self):
        """Gets the state of this User.  # noqa: E501

        Current user state.  # noqa: E501

        :return: The state of this User.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this User.

        Current user state.  # noqa: E501

        :param state: The state of this User.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and state is None:  # noqa: E501
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["invited", "active", "deactivated"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def name(self):
        """Gets the name of this User.  # noqa: E501

        Full name  # noqa: E501

        :return: The name of this User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        Full name  # noqa: E501

        :param name: The name of this User.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def policy(self):
        """Gets the policy of this User.  # noqa: E501

        User ACL Policy  # noqa: E501

        :return: The policy of this User.  # noqa: E501
        :rtype: object
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this User.

        User ACL Policy  # noqa: E501

        :param policy: The policy of this User.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and policy is None:  # noqa: E501
            raise ValueError("Invalid value for `policy`, must not be `None`")  # noqa: E501

        self._policy = policy

    @property
    def latest_feed_timestamp(self):
        """Gets the latest_feed_timestamp of this User.  # noqa: E501

        Latest timestamp the user has been notified for feed.  # noqa: E501

        :return: The latest_feed_timestamp of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._latest_feed_timestamp

    @latest_feed_timestamp.setter
    def latest_feed_timestamp(self, latest_feed_timestamp):
        """Sets the latest_feed_timestamp of this User.

        Latest timestamp the user has been notified for feed.  # noqa: E501

        :param latest_feed_timestamp: The latest_feed_timestamp of this User.  # noqa: E501
        :type: datetime
        """

        self._latest_feed_timestamp = latest_feed_timestamp

    @property
    def roles(self):
        """Gets the roles of this User.  # noqa: E501

        Contains a list of all roles the user is a member of.  # noqa: E501

        :return: The roles of this User.  # noqa: E501
        :rtype: list[int]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this User.

        Contains a list of all roles the user is a member of.  # noqa: E501

        :param roles: The roles of this User.  # noqa: E501
        :type: list[int]
        """

        self._roles = roles

    @property
    def application_notification_subscriptions(self):
        """Gets the application_notification_subscriptions of this User.  # noqa: E501


        :return: The application_notification_subscriptions of this User.  # noqa: E501
        :rtype: object
        """
        return self._application_notification_subscriptions

    @application_notification_subscriptions.setter
    def application_notification_subscriptions(self, application_notification_subscriptions):
        """Sets the application_notification_subscriptions of this User.


        :param application_notification_subscriptions: The application_notification_subscriptions of this User.  # noqa: E501
        :type: object
        """

        self._application_notification_subscriptions = application_notification_subscriptions

    @property
    def auth_method(self):
        """Gets the auth_method of this User.  # noqa: E501

        The Authentication method for this user.  # noqa: E501

        :return: The auth_method of this User.  # noqa: E501
        :rtype: str
        """
        return self._auth_method

    @auth_method.setter
    def auth_method(self, auth_method):
        """Sets the auth_method of this User.

        The Authentication method for this user.  # noqa: E501

        :param auth_method: The auth_method of this User.  # noqa: E501
        :type: str
        """

        self._auth_method = auth_method

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, User):
            return True

        return self.to_dict() != other.to_dict()
