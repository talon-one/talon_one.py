# coding: utf-8

"""
    Talon.One API

    The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from talon_one.models.loyalty_membership import LoyaltyMembership  # noqa: F401,E501


class ApplicationCustomer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created': 'datetime',
        'integration_id': 'str',
        'attributes': 'object',
        'account_id': 'int',
        'closed_sessions': 'int',
        'total_sales': 'float',
        'loyalty_memberships': 'list[LoyaltyMembership]',
        'last_activity': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'integration_id': 'integrationId',
        'attributes': 'attributes',
        'account_id': 'accountId',
        'closed_sessions': 'closedSessions',
        'total_sales': 'totalSales',
        'loyalty_memberships': 'loyaltyMemberships',
        'last_activity': 'lastActivity'
    }

    def __init__(self, id=None, created=None, integration_id=None, attributes=None, account_id=None, closed_sessions=None, total_sales=None, loyalty_memberships=None, last_activity=None):  # noqa: E501
        """ApplicationCustomer - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._created = None
        self._integration_id = None
        self._attributes = None
        self._account_id = None
        self._closed_sessions = None
        self._total_sales = None
        self._loyalty_memberships = None
        self._last_activity = None
        self.discriminator = None

        self.id = id
        self.created = created
        self.integration_id = integration_id
        self.attributes = attributes
        self.account_id = account_id
        self.closed_sessions = closed_sessions
        self.total_sales = total_sales
        if loyalty_memberships is not None:
            self.loyalty_memberships = loyalty_memberships
        self.last_activity = last_activity

    @property
    def id(self):
        """Gets the id of this ApplicationCustomer.  # noqa: E501

        Unique ID for this entity.  # noqa: E501

        :return: The id of this ApplicationCustomer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationCustomer.

        Unique ID for this entity.  # noqa: E501

        :param id: The id of this ApplicationCustomer.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created(self):
        """Gets the created of this ApplicationCustomer.  # noqa: E501

        The exact moment this entity was created. The exact moment this entity was created. The exact moment this entity was created.  # noqa: E501

        :return: The created of this ApplicationCustomer.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ApplicationCustomer.

        The exact moment this entity was created. The exact moment this entity was created. The exact moment this entity was created.  # noqa: E501

        :param created: The created of this ApplicationCustomer.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def integration_id(self):
        """Gets the integration_id of this ApplicationCustomer.  # noqa: E501

        The ID used for this entity in the application system. The ID used for this entity in the application system.  # noqa: E501

        :return: The integration_id of this ApplicationCustomer.  # noqa: E501
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this ApplicationCustomer.

        The ID used for this entity in the application system. The ID used for this entity in the application system.  # noqa: E501

        :param integration_id: The integration_id of this ApplicationCustomer.  # noqa: E501
        :type: str
        """
        if integration_id is None:
            raise ValueError("Invalid value for `integration_id`, must not be `None`")  # noqa: E501

        self._integration_id = integration_id

    @property
    def attributes(self):
        """Gets the attributes of this ApplicationCustomer.  # noqa: E501

        Arbitrary properties associated with this item  # noqa: E501

        :return: The attributes of this ApplicationCustomer.  # noqa: E501
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ApplicationCustomer.

        Arbitrary properties associated with this item  # noqa: E501

        :param attributes: The attributes of this ApplicationCustomer.  # noqa: E501
        :type: object
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")  # noqa: E501

        self._attributes = attributes

    @property
    def account_id(self):
        """Gets the account_id of this ApplicationCustomer.  # noqa: E501

        The ID of the Talon.One account that owns this profile. The ID of the Talon.One account that owns this profile.  # noqa: E501

        :return: The account_id of this ApplicationCustomer.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ApplicationCustomer.

        The ID of the Talon.One account that owns this profile. The ID of the Talon.One account that owns this profile.  # noqa: E501

        :param account_id: The account_id of this ApplicationCustomer.  # noqa: E501
        :type: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def closed_sessions(self):
        """Gets the closed_sessions of this ApplicationCustomer.  # noqa: E501

        The total amount of closed sessions by a customer. A closed session is a successful purchase.  # noqa: E501

        :return: The closed_sessions of this ApplicationCustomer.  # noqa: E501
        :rtype: int
        """
        return self._closed_sessions

    @closed_sessions.setter
    def closed_sessions(self, closed_sessions):
        """Sets the closed_sessions of this ApplicationCustomer.

        The total amount of closed sessions by a customer. A closed session is a successful purchase.  # noqa: E501

        :param closed_sessions: The closed_sessions of this ApplicationCustomer.  # noqa: E501
        :type: int
        """
        if closed_sessions is None:
            raise ValueError("Invalid value for `closed_sessions`, must not be `None`")  # noqa: E501

        self._closed_sessions = closed_sessions

    @property
    def total_sales(self):
        """Gets the total_sales of this ApplicationCustomer.  # noqa: E501

        Sum of all purchases made by this customer  # noqa: E501

        :return: The total_sales of this ApplicationCustomer.  # noqa: E501
        :rtype: float
        """
        return self._total_sales

    @total_sales.setter
    def total_sales(self, total_sales):
        """Sets the total_sales of this ApplicationCustomer.

        Sum of all purchases made by this customer  # noqa: E501

        :param total_sales: The total_sales of this ApplicationCustomer.  # noqa: E501
        :type: float
        """
        if total_sales is None:
            raise ValueError("Invalid value for `total_sales`, must not be `None`")  # noqa: E501

        self._total_sales = total_sales

    @property
    def loyalty_memberships(self):
        """Gets the loyalty_memberships of this ApplicationCustomer.  # noqa: E501

        A list of loyalty programs joined by the customer  # noqa: E501

        :return: The loyalty_memberships of this ApplicationCustomer.  # noqa: E501
        :rtype: list[LoyaltyMembership]
        """
        return self._loyalty_memberships

    @loyalty_memberships.setter
    def loyalty_memberships(self, loyalty_memberships):
        """Sets the loyalty_memberships of this ApplicationCustomer.

        A list of loyalty programs joined by the customer  # noqa: E501

        :param loyalty_memberships: The loyalty_memberships of this ApplicationCustomer.  # noqa: E501
        :type: list[LoyaltyMembership]
        """

        self._loyalty_memberships = loyalty_memberships

    @property
    def last_activity(self):
        """Gets the last_activity of this ApplicationCustomer.  # noqa: E501

        Timestamp of the most recent event received from this customer  # noqa: E501

        :return: The last_activity of this ApplicationCustomer.  # noqa: E501
        :rtype: datetime
        """
        return self._last_activity

    @last_activity.setter
    def last_activity(self, last_activity):
        """Sets the last_activity of this ApplicationCustomer.

        Timestamp of the most recent event received from this customer  # noqa: E501

        :param last_activity: The last_activity of this ApplicationCustomer.  # noqa: E501
        :type: datetime
        """
        if last_activity is None:
            raise ValueError("Invalid value for `last_activity`, must not be `None`")  # noqa: E501

        self._last_activity = last_activity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationCustomer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationCustomer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
