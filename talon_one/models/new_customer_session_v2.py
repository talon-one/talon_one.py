# coding: utf-8

"""
    Talon.One API

    The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class NewCustomerSessionV2(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'profile_id': 'str',
        'coupon_codes': 'list[str]',
        'referral_code': 'str',
        'state': 'str',
        'cart_items': 'list[CartItem]',
        'additional_costs': 'dict(str, AdditionalCost)',
        'identifiers': 'list[str]',
        'attributes': 'object'
    }

    attribute_map = {
        'profile_id': 'profileId',
        'coupon_codes': 'couponCodes',
        'referral_code': 'referralCode',
        'state': 'state',
        'cart_items': 'cartItems',
        'additional_costs': 'additionalCosts',
        'identifiers': 'identifiers',
        'attributes': 'attributes'
    }

    def __init__(self, profile_id=None, coupon_codes=None, referral_code=None, state='open', cart_items=None, additional_costs=None, identifiers=None, attributes=None, local_vars_configuration=None):  # noqa: E501
        """NewCustomerSessionV2 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._profile_id = None
        self._coupon_codes = None
        self._referral_code = None
        self._state = None
        self._cart_items = None
        self._additional_costs = None
        self._identifiers = None
        self._attributes = None
        self.discriminator = None

        if profile_id is not None:
            self.profile_id = profile_id
        if coupon_codes is not None:
            self.coupon_codes = coupon_codes
        if referral_code is not None:
            self.referral_code = referral_code
        if state is not None:
            self.state = state
        if cart_items is not None:
            self.cart_items = cart_items
        if additional_costs is not None:
            self.additional_costs = additional_costs
        if identifiers is not None:
            self.identifiers = identifiers
        if attributes is not None:
            self.attributes = attributes

    @property
    def profile_id(self):
        """Gets the profile_id of this NewCustomerSessionV2.  # noqa: E501

        ID of the customers profile as used within this Talon.One account. May be omitted or set to the empty string if the customer does not yet have a known profile ID.  # noqa: E501

        :return: The profile_id of this NewCustomerSessionV2.  # noqa: E501
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this NewCustomerSessionV2.

        ID of the customers profile as used within this Talon.One account. May be omitted or set to the empty string if the customer does not yet have a known profile ID.  # noqa: E501

        :param profile_id: The profile_id of this NewCustomerSessionV2.  # noqa: E501
        :type: str
        """

        self._profile_id = profile_id

    @property
    def coupon_codes(self):
        """Gets the coupon_codes of this NewCustomerSessionV2.  # noqa: E501

        Any coupon codes entered.  # noqa: E501

        :return: The coupon_codes of this NewCustomerSessionV2.  # noqa: E501
        :rtype: list[str]
        """
        return self._coupon_codes

    @coupon_codes.setter
    def coupon_codes(self, coupon_codes):
        """Sets the coupon_codes of this NewCustomerSessionV2.

        Any coupon codes entered.  # noqa: E501

        :param coupon_codes: The coupon_codes of this NewCustomerSessionV2.  # noqa: E501
        :type: list[str]
        """

        self._coupon_codes = coupon_codes

    @property
    def referral_code(self):
        """Gets the referral_code of this NewCustomerSessionV2.  # noqa: E501

        Any referral code entered.  # noqa: E501

        :return: The referral_code of this NewCustomerSessionV2.  # noqa: E501
        :rtype: str
        """
        return self._referral_code

    @referral_code.setter
    def referral_code(self, referral_code):
        """Sets the referral_code of this NewCustomerSessionV2.

        Any referral code entered.  # noqa: E501

        :param referral_code: The referral_code of this NewCustomerSessionV2.  # noqa: E501
        :type: str
        """

        self._referral_code = referral_code

    @property
    def state(self):
        """Gets the state of this NewCustomerSessionV2.  # noqa: E501

        Indicates the current state of the session. All sessions must start in the \"open\" state, after which valid transitions are...  1. open -> closed 2. open -> cancelled 3. closed -> cancelled   # noqa: E501

        :return: The state of this NewCustomerSessionV2.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NewCustomerSessionV2.

        Indicates the current state of the session. All sessions must start in the \"open\" state, after which valid transitions are...  1. open -> closed 2. open -> cancelled 3. closed -> cancelled   # noqa: E501

        :param state: The state of this NewCustomerSessionV2.  # noqa: E501
        :type: str
        """
        allowed_values = ["open", "closed", "cancelled"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def cart_items(self):
        """Gets the cart_items of this NewCustomerSessionV2.  # noqa: E501

        All items the customer will be purchasing in this session  # noqa: E501

        :return: The cart_items of this NewCustomerSessionV2.  # noqa: E501
        :rtype: list[CartItem]
        """
        return self._cart_items

    @cart_items.setter
    def cart_items(self, cart_items):
        """Sets the cart_items of this NewCustomerSessionV2.

        All items the customer will be purchasing in this session  # noqa: E501

        :param cart_items: The cart_items of this NewCustomerSessionV2.  # noqa: E501
        :type: list[CartItem]
        """

        self._cart_items = cart_items

    @property
    def additional_costs(self):
        """Gets the additional_costs of this NewCustomerSessionV2.  # noqa: E501

        Any costs associated with the session that can not be explicitly attributed to cart items. Examples include shipping costs and service fees.  # noqa: E501

        :return: The additional_costs of this NewCustomerSessionV2.  # noqa: E501
        :rtype: dict(str, AdditionalCost)
        """
        return self._additional_costs

    @additional_costs.setter
    def additional_costs(self, additional_costs):
        """Sets the additional_costs of this NewCustomerSessionV2.

        Any costs associated with the session that can not be explicitly attributed to cart items. Examples include shipping costs and service fees.  # noqa: E501

        :param additional_costs: The additional_costs of this NewCustomerSessionV2.  # noqa: E501
        :type: dict(str, AdditionalCost)
        """

        self._additional_costs = additional_costs

    @property
    def identifiers(self):
        """Gets the identifiers of this NewCustomerSessionV2.  # noqa: E501

        Identifiers for the customer, this can be used for limits on values such as device ID.  # noqa: E501

        :return: The identifiers of this NewCustomerSessionV2.  # noqa: E501
        :rtype: list[str]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this NewCustomerSessionV2.

        Identifiers for the customer, this can be used for limits on values such as device ID.  # noqa: E501

        :param identifiers: The identifiers of this NewCustomerSessionV2.  # noqa: E501
        :type: list[str]
        """

        self._identifiers = identifiers

    @property
    def attributes(self):
        """Gets the attributes of this NewCustomerSessionV2.  # noqa: E501

        A key-value map of the sessions attributes. The potentially valid attributes are configured in your accounts developer settings.   # noqa: E501

        :return: The attributes of this NewCustomerSessionV2.  # noqa: E501
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this NewCustomerSessionV2.

        A key-value map of the sessions attributes. The potentially valid attributes are configured in your accounts developer settings.   # noqa: E501

        :param attributes: The attributes of this NewCustomerSessionV2.  # noqa: E501
        :type: object
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewCustomerSessionV2):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewCustomerSessionV2):
            return True

        return self.to_dict() != other.to_dict()
