# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class Revision(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'activate_at': 'datetime',
        'account_id': 'int',
        'application_id': 'int',
        'campaign_id': 'int',
        'created': 'datetime',
        'created_by': 'int',
        'activated_at': 'datetime',
        'activated_by': 'int',
        'current_version': 'RevisionVersion'
    }

    attribute_map = {
        'id': 'id',
        'activate_at': 'activateAt',
        'account_id': 'accountId',
        'application_id': 'applicationId',
        'campaign_id': 'campaignId',
        'created': 'created',
        'created_by': 'createdBy',
        'activated_at': 'activatedAt',
        'activated_by': 'activatedBy',
        'current_version': 'currentVersion'
    }

    def __init__(self, id=None, activate_at=None, account_id=None, application_id=None, campaign_id=None, created=None, created_by=None, activated_at=None, activated_by=None, current_version=None, local_vars_configuration=None):  # noqa: E501
        """Revision - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._activate_at = None
        self._account_id = None
        self._application_id = None
        self._campaign_id = None
        self._created = None
        self._created_by = None
        self._activated_at = None
        self._activated_by = None
        self._current_version = None
        self.discriminator = None

        self.id = id
        if activate_at is not None:
            self.activate_at = activate_at
        self.account_id = account_id
        self.application_id = application_id
        self.campaign_id = campaign_id
        self.created = created
        self.created_by = created_by
        if activated_at is not None:
            self.activated_at = activated_at
        if activated_by is not None:
            self.activated_by = activated_by
        if current_version is not None:
            self.current_version = current_version

    @property
    def id(self):
        """Gets the id of this Revision.  # noqa: E501

        Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.  # noqa: E501

        :return: The id of this Revision.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Revision.

        Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.  # noqa: E501

        :param id: The id of this Revision.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def activate_at(self):
        """Gets the activate_at of this Revision.  # noqa: E501


        :return: The activate_at of this Revision.  # noqa: E501
        :rtype: datetime
        """
        return self._activate_at

    @activate_at.setter
    def activate_at(self, activate_at):
        """Sets the activate_at of this Revision.


        :param activate_at: The activate_at of this Revision.  # noqa: E501
        :type: datetime
        """

        self._activate_at = activate_at

    @property
    def account_id(self):
        """Gets the account_id of this Revision.  # noqa: E501


        :return: The account_id of this Revision.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Revision.


        :param account_id: The account_id of this Revision.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and account_id is None:  # noqa: E501
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def application_id(self):
        """Gets the application_id of this Revision.  # noqa: E501


        :return: The application_id of this Revision.  # noqa: E501
        :rtype: int
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this Revision.


        :param application_id: The application_id of this Revision.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and application_id is None:  # noqa: E501
            raise ValueError("Invalid value for `application_id`, must not be `None`")  # noqa: E501

        self._application_id = application_id

    @property
    def campaign_id(self):
        """Gets the campaign_id of this Revision.  # noqa: E501


        :return: The campaign_id of this Revision.  # noqa: E501
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this Revision.


        :param campaign_id: The campaign_id of this Revision.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and campaign_id is None:  # noqa: E501
            raise ValueError("Invalid value for `campaign_id`, must not be `None`")  # noqa: E501

        self._campaign_id = campaign_id

    @property
    def created(self):
        """Gets the created of this Revision.  # noqa: E501


        :return: The created of this Revision.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Revision.


        :param created: The created of this Revision.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this Revision.  # noqa: E501


        :return: The created_by of this Revision.  # noqa: E501
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Revision.


        :param created_by: The created_by of this Revision.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def activated_at(self):
        """Gets the activated_at of this Revision.  # noqa: E501


        :return: The activated_at of this Revision.  # noqa: E501
        :rtype: datetime
        """
        return self._activated_at

    @activated_at.setter
    def activated_at(self, activated_at):
        """Sets the activated_at of this Revision.


        :param activated_at: The activated_at of this Revision.  # noqa: E501
        :type: datetime
        """

        self._activated_at = activated_at

    @property
    def activated_by(self):
        """Gets the activated_by of this Revision.  # noqa: E501


        :return: The activated_by of this Revision.  # noqa: E501
        :rtype: int
        """
        return self._activated_by

    @activated_by.setter
    def activated_by(self, activated_by):
        """Sets the activated_by of this Revision.


        :param activated_by: The activated_by of this Revision.  # noqa: E501
        :type: int
        """

        self._activated_by = activated_by

    @property
    def current_version(self):
        """Gets the current_version of this Revision.  # noqa: E501


        :return: The current_version of this Revision.  # noqa: E501
        :rtype: RevisionVersion
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version):
        """Sets the current_version of this Revision.


        :param current_version: The current_version of this Revision.  # noqa: E501
        :type: RevisionVersion
        """

        self._current_version = current_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Revision):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Revision):
            return True

        return self.to_dict() != other.to_dict()
