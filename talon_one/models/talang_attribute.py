# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class TalangAttribute(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'entity': 'str',
        'name': 'str',
        'title': 'str',
        'type': 'str',
        'description': 'str',
        'visible': 'bool',
        'kind': 'str',
        'campaigns_count': 'int',
        'example_value': 'list[str]'
    }

    attribute_map = {
        'entity': 'entity',
        'name': 'name',
        'title': 'title',
        'type': 'type',
        'description': 'description',
        'visible': 'visible',
        'kind': 'kind',
        'campaigns_count': 'campaignsCount',
        'example_value': 'exampleValue'
    }

    def __init__(self, entity=None, name=None, title=None, type=None, description=None, visible=True, kind=None, campaigns_count=None, example_value=None, local_vars_configuration=None):  # noqa: E501
        """TalangAttribute - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._entity = None
        self._name = None
        self._title = None
        self._type = None
        self._description = None
        self._visible = None
        self._kind = None
        self._campaigns_count = None
        self._example_value = None
        self.discriminator = None

        if entity is not None:
            self.entity = entity
        self.name = name
        if title is not None:
            self.title = title
        self.type = type
        if description is not None:
            self.description = description
        self.visible = visible
        self.kind = kind
        self.campaigns_count = campaigns_count
        if example_value is not None:
            self.example_value = example_value

    @property
    def entity(self):
        """Gets the entity of this TalangAttribute.  # noqa: E501

        The name of the entity of the attribute.  # noqa: E501

        :return: The entity of this TalangAttribute.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this TalangAttribute.

        The name of the entity of the attribute.  # noqa: E501

        :param entity: The entity of this TalangAttribute.  # noqa: E501
        :type: str
        """
        allowed_values = ["AdvocateProfile", "Account", "Application", "AwardedGiveaway", "Bundle", "Campaign", "CartItem", "Coupon", "CustomerProfile", "CustomerSession", "Event", "Item", "Loyalty", "Profile", "Giveaway", "Referral", "Session", "Store", "Achievements"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and entity not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `entity` ({0}), must be one of {1}"  # noqa: E501
                .format(entity, allowed_values)
            )

        self._entity = entity

    @property
    def name(self):
        """Gets the name of this TalangAttribute.  # noqa: E501

        The attribute name that will be used in API requests and Talang. E.g. if `name == \"region\"` then you would set the region attribute by including an `attributes.region` property in your request payload.   # noqa: E501

        :return: The name of this TalangAttribute.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TalangAttribute.

        The attribute name that will be used in API requests and Talang. E.g. if `name == \"region\"` then you would set the region attribute by including an `attributes.region` property in your request payload.   # noqa: E501

        :param name: The name of this TalangAttribute.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def title(self):
        """Gets the title of this TalangAttribute.  # noqa: E501

        The name of the attribute that is displayed to the user in the Campaign Manager.  # noqa: E501

        :return: The title of this TalangAttribute.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TalangAttribute.

        The name of the attribute that is displayed to the user in the Campaign Manager.  # noqa: E501

        :param title: The title of this TalangAttribute.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this TalangAttribute.  # noqa: E501

        The talang type of the attribute.  # noqa: E501

        :return: The type of this TalangAttribute.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TalangAttribute.

        The talang type of the attribute.  # noqa: E501

        :param type: The type of this TalangAttribute.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def description(self):
        """Gets the description of this TalangAttribute.  # noqa: E501

        A description of the attribute.  # noqa: E501

        :return: The description of this TalangAttribute.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TalangAttribute.

        A description of the attribute.  # noqa: E501

        :param description: The description of this TalangAttribute.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def visible(self):
        """Gets the visible of this TalangAttribute.  # noqa: E501

        Indicates whether the attribute is visible in the UI or not.  # noqa: E501

        :return: The visible of this TalangAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this TalangAttribute.

        Indicates whether the attribute is visible in the UI or not.  # noqa: E501

        :param visible: The visible of this TalangAttribute.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and visible is None:  # noqa: E501
            raise ValueError("Invalid value for `visible`, must not be `None`")  # noqa: E501

        self._visible = visible

    @property
    def kind(self):
        """Gets the kind of this TalangAttribute.  # noqa: E501

        Indicate the kind of the attribute.  # noqa: E501

        :return: The kind of this TalangAttribute.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this TalangAttribute.

        Indicate the kind of the attribute.  # noqa: E501

        :param kind: The kind of this TalangAttribute.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and kind is None:  # noqa: E501
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501
        allowed_values = ["built-in", "custom"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and kind not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def campaigns_count(self):
        """Gets the campaigns_count of this TalangAttribute.  # noqa: E501

        The number of campaigns that refer to the attribute.  # noqa: E501

        :return: The campaigns_count of this TalangAttribute.  # noqa: E501
        :rtype: int
        """
        return self._campaigns_count

    @campaigns_count.setter
    def campaigns_count(self, campaigns_count):
        """Sets the campaigns_count of this TalangAttribute.

        The number of campaigns that refer to the attribute.  # noqa: E501

        :param campaigns_count: The campaigns_count of this TalangAttribute.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and campaigns_count is None:  # noqa: E501
            raise ValueError("Invalid value for `campaigns_count`, must not be `None`")  # noqa: E501

        self._campaigns_count = campaigns_count

    @property
    def example_value(self):
        """Gets the example_value of this TalangAttribute.  # noqa: E501

        Examples of values that can be assigned to the attribute.  # noqa: E501

        :return: The example_value of this TalangAttribute.  # noqa: E501
        :rtype: list[str]
        """
        return self._example_value

    @example_value.setter
    def example_value(self, example_value):
        """Sets the example_value of this TalangAttribute.

        Examples of values that can be assigned to the attribute.  # noqa: E501

        :param example_value: The example_value of this TalangAttribute.  # noqa: E501
        :type: list[str]
        """

        self._example_value = example_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TalangAttribute):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TalangAttribute):
            return True

        return self.to_dict() != other.to_dict()
