# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class Environment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'created': 'datetime',
        'application_id': 'int',
        'slots': 'list[SlotDef]',
        'functions': 'list[FunctionDef]',
        'templates': 'list[TemplateDef]',
        'variables': 'str',
        'giveaways_pools': 'list[GiveawaysPool]',
        'loyalty_programs': 'list[LoyaltyProgram]',
        'achievements': 'list[Achievement]',
        'attributes': 'list[Attribute]',
        'additional_costs': 'list[AccountAdditionalCost]',
        'audiences': 'list[Audience]',
        'collections': 'list[Collection]'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'application_id': 'applicationId',
        'slots': 'slots',
        'functions': 'functions',
        'templates': 'templates',
        'variables': 'variables',
        'giveaways_pools': 'giveawaysPools',
        'loyalty_programs': 'loyaltyPrograms',
        'achievements': 'achievements',
        'attributes': 'attributes',
        'additional_costs': 'additionalCosts',
        'audiences': 'audiences',
        'collections': 'collections'
    }

    def __init__(self, id=None, created=None, application_id=None, slots=None, functions=None, templates=None, variables=None, giveaways_pools=None, loyalty_programs=None, achievements=None, attributes=None, additional_costs=None, audiences=None, collections=None, local_vars_configuration=None):  # noqa: E501
        """Environment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._created = None
        self._application_id = None
        self._slots = None
        self._functions = None
        self._templates = None
        self._variables = None
        self._giveaways_pools = None
        self._loyalty_programs = None
        self._achievements = None
        self._attributes = None
        self._additional_costs = None
        self._audiences = None
        self._collections = None
        self.discriminator = None

        self.id = id
        self.created = created
        self.application_id = application_id
        self.slots = slots
        self.functions = functions
        self.templates = templates
        self.variables = variables
        if giveaways_pools is not None:
            self.giveaways_pools = giveaways_pools
        if loyalty_programs is not None:
            self.loyalty_programs = loyalty_programs
        if achievements is not None:
            self.achievements = achievements
        if attributes is not None:
            self.attributes = attributes
        if additional_costs is not None:
            self.additional_costs = additional_costs
        if audiences is not None:
            self.audiences = audiences
        if collections is not None:
            self.collections = collections

    @property
    def id(self):
        """Gets the id of this Environment.  # noqa: E501

        Internal ID of this entity.  # noqa: E501

        :return: The id of this Environment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Environment.

        Internal ID of this entity.  # noqa: E501

        :param id: The id of this Environment.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created(self):
        """Gets the created of this Environment.  # noqa: E501

        The time this entity was created.  # noqa: E501

        :return: The created of this Environment.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Environment.

        The time this entity was created.  # noqa: E501

        :param created: The created of this Environment.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def application_id(self):
        """Gets the application_id of this Environment.  # noqa: E501

        The ID of the application that owns this entity.  # noqa: E501

        :return: The application_id of this Environment.  # noqa: E501
        :rtype: int
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this Environment.

        The ID of the application that owns this entity.  # noqa: E501

        :param application_id: The application_id of this Environment.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and application_id is None:  # noqa: E501
            raise ValueError("Invalid value for `application_id`, must not be `None`")  # noqa: E501

        self._application_id = application_id

    @property
    def slots(self):
        """Gets the slots of this Environment.  # noqa: E501

        The slots defined for this application.  # noqa: E501

        :return: The slots of this Environment.  # noqa: E501
        :rtype: list[SlotDef]
        """
        return self._slots

    @slots.setter
    def slots(self, slots):
        """Sets the slots of this Environment.

        The slots defined for this application.  # noqa: E501

        :param slots: The slots of this Environment.  # noqa: E501
        :type: list[SlotDef]
        """
        if self.local_vars_configuration.client_side_validation and slots is None:  # noqa: E501
            raise ValueError("Invalid value for `slots`, must not be `None`")  # noqa: E501

        self._slots = slots

    @property
    def functions(self):
        """Gets the functions of this Environment.  # noqa: E501

        The functions defined for this application.  # noqa: E501

        :return: The functions of this Environment.  # noqa: E501
        :rtype: list[FunctionDef]
        """
        return self._functions

    @functions.setter
    def functions(self, functions):
        """Sets the functions of this Environment.

        The functions defined for this application.  # noqa: E501

        :param functions: The functions of this Environment.  # noqa: E501
        :type: list[FunctionDef]
        """
        if self.local_vars_configuration.client_side_validation and functions is None:  # noqa: E501
            raise ValueError("Invalid value for `functions`, must not be `None`")  # noqa: E501

        self._functions = functions

    @property
    def templates(self):
        """Gets the templates of this Environment.  # noqa: E501

        The templates defined for this application.  # noqa: E501

        :return: The templates of this Environment.  # noqa: E501
        :rtype: list[TemplateDef]
        """
        return self._templates

    @templates.setter
    def templates(self, templates):
        """Sets the templates of this Environment.

        The templates defined for this application.  # noqa: E501

        :param templates: The templates of this Environment.  # noqa: E501
        :type: list[TemplateDef]
        """
        if self.local_vars_configuration.client_side_validation and templates is None:  # noqa: E501
            raise ValueError("Invalid value for `templates`, must not be `None`")  # noqa: E501

        self._templates = templates

    @property
    def variables(self):
        """Gets the variables of this Environment.  # noqa: E501

        A stringified version of the environment's Talang variables scope.  # noqa: E501

        :return: The variables of this Environment.  # noqa: E501
        :rtype: str
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this Environment.

        A stringified version of the environment's Talang variables scope.  # noqa: E501

        :param variables: The variables of this Environment.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and variables is None:  # noqa: E501
            raise ValueError("Invalid value for `variables`, must not be `None`")  # noqa: E501

        self._variables = variables

    @property
    def giveaways_pools(self):
        """Gets the giveaways_pools of this Environment.  # noqa: E501

        The giveaways pools that the application is subscribed to.  # noqa: E501

        :return: The giveaways_pools of this Environment.  # noqa: E501
        :rtype: list[GiveawaysPool]
        """
        return self._giveaways_pools

    @giveaways_pools.setter
    def giveaways_pools(self, giveaways_pools):
        """Sets the giveaways_pools of this Environment.

        The giveaways pools that the application is subscribed to.  # noqa: E501

        :param giveaways_pools: The giveaways_pools of this Environment.  # noqa: E501
        :type: list[GiveawaysPool]
        """

        self._giveaways_pools = giveaways_pools

    @property
    def loyalty_programs(self):
        """Gets the loyalty_programs of this Environment.  # noqa: E501

        The loyalty programs that the application is subscribed to.  # noqa: E501

        :return: The loyalty_programs of this Environment.  # noqa: E501
        :rtype: list[LoyaltyProgram]
        """
        return self._loyalty_programs

    @loyalty_programs.setter
    def loyalty_programs(self, loyalty_programs):
        """Sets the loyalty_programs of this Environment.

        The loyalty programs that the application is subscribed to.  # noqa: E501

        :param loyalty_programs: The loyalty_programs of this Environment.  # noqa: E501
        :type: list[LoyaltyProgram]
        """

        self._loyalty_programs = loyalty_programs

    @property
    def achievements(self):
        """Gets the achievements of this Environment.  # noqa: E501

        The achievements, linked to the campaigns, belonging to the application.  # noqa: E501

        :return: The achievements of this Environment.  # noqa: E501
        :rtype: list[Achievement]
        """
        return self._achievements

    @achievements.setter
    def achievements(self, achievements):
        """Sets the achievements of this Environment.

        The achievements, linked to the campaigns, belonging to the application.  # noqa: E501

        :param achievements: The achievements of this Environment.  # noqa: E501
        :type: list[Achievement]
        """

        self._achievements = achievements

    @property
    def attributes(self):
        """Gets the attributes of this Environment.  # noqa: E501

        The attributes that the application is subscribed to.  # noqa: E501

        :return: The attributes of this Environment.  # noqa: E501
        :rtype: list[Attribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Environment.

        The attributes that the application is subscribed to.  # noqa: E501

        :param attributes: The attributes of this Environment.  # noqa: E501
        :type: list[Attribute]
        """

        self._attributes = attributes

    @property
    def additional_costs(self):
        """Gets the additional_costs of this Environment.  # noqa: E501

        The additional costs that the application is subscribed to.  # noqa: E501

        :return: The additional_costs of this Environment.  # noqa: E501
        :rtype: list[AccountAdditionalCost]
        """
        return self._additional_costs

    @additional_costs.setter
    def additional_costs(self, additional_costs):
        """Sets the additional_costs of this Environment.

        The additional costs that the application is subscribed to.  # noqa: E501

        :param additional_costs: The additional_costs of this Environment.  # noqa: E501
        :type: list[AccountAdditionalCost]
        """

        self._additional_costs = additional_costs

    @property
    def audiences(self):
        """Gets the audiences of this Environment.  # noqa: E501

        The audiences contained in the account which the application belongs to.  # noqa: E501

        :return: The audiences of this Environment.  # noqa: E501
        :rtype: list[Audience]
        """
        return self._audiences

    @audiences.setter
    def audiences(self, audiences):
        """Sets the audiences of this Environment.

        The audiences contained in the account which the application belongs to.  # noqa: E501

        :param audiences: The audiences of this Environment.  # noqa: E501
        :type: list[Audience]
        """

        self._audiences = audiences

    @property
    def collections(self):
        """Gets the collections of this Environment.  # noqa: E501

        The account-level collections that the application is subscribed to.  # noqa: E501

        :return: The collections of this Environment.  # noqa: E501
        :rtype: list[Collection]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this Environment.

        The account-level collections that the application is subscribed to.  # noqa: E501

        :param collections: The collections of this Environment.  # noqa: E501
        :type: list[Collection]
        """

        self._collections = collections

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Environment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Environment):
            return True

        return self.to_dict() != other.to_dict()
