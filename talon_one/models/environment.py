# coding: utf-8

"""
    Talon.One API

    The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class Environment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'created': 'datetime',
        'application_id': 'int',
        'slots': 'list[SlotDef]',
        'functions': 'list[FunctionDef]',
        'templates': 'list[TemplateDef]',
        'variables': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'application_id': 'applicationId',
        'slots': 'slots',
        'functions': 'functions',
        'templates': 'templates',
        'variables': 'variables'
    }

    def __init__(self, id=None, created=None, application_id=None, slots=None, functions=None, templates=None, variables=None, local_vars_configuration=None):  # noqa: E501
        """Environment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._created = None
        self._application_id = None
        self._slots = None
        self._functions = None
        self._templates = None
        self._variables = None
        self.discriminator = None

        self.id = id
        self.created = created
        self.application_id = application_id
        self.slots = slots
        self.functions = functions
        self.templates = templates
        self.variables = variables

    @property
    def id(self):
        """Gets the id of this Environment.  # noqa: E501

        Unique ID for this entity.  # noqa: E501

        :return: The id of this Environment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Environment.

        Unique ID for this entity.  # noqa: E501

        :param id: The id of this Environment.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created(self):
        """Gets the created of this Environment.  # noqa: E501

        The exact moment this entity was created.  # noqa: E501

        :return: The created of this Environment.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Environment.

        The exact moment this entity was created.  # noqa: E501

        :param created: The created of this Environment.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def application_id(self):
        """Gets the application_id of this Environment.  # noqa: E501

        The ID of the application that owns this entity.  # noqa: E501

        :return: The application_id of this Environment.  # noqa: E501
        :rtype: int
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this Environment.

        The ID of the application that owns this entity.  # noqa: E501

        :param application_id: The application_id of this Environment.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and application_id is None:  # noqa: E501
            raise ValueError("Invalid value for `application_id`, must not be `None`")  # noqa: E501

        self._application_id = application_id

    @property
    def slots(self):
        """Gets the slots of this Environment.  # noqa: E501

        The slots defined for this application.  # noqa: E501

        :return: The slots of this Environment.  # noqa: E501
        :rtype: list[SlotDef]
        """
        return self._slots

    @slots.setter
    def slots(self, slots):
        """Sets the slots of this Environment.

        The slots defined for this application.  # noqa: E501

        :param slots: The slots of this Environment.  # noqa: E501
        :type: list[SlotDef]
        """
        if self.local_vars_configuration.client_side_validation and slots is None:  # noqa: E501
            raise ValueError("Invalid value for `slots`, must not be `None`")  # noqa: E501

        self._slots = slots

    @property
    def functions(self):
        """Gets the functions of this Environment.  # noqa: E501

        The functions defined for this application.  # noqa: E501

        :return: The functions of this Environment.  # noqa: E501
        :rtype: list[FunctionDef]
        """
        return self._functions

    @functions.setter
    def functions(self, functions):
        """Sets the functions of this Environment.

        The functions defined for this application.  # noqa: E501

        :param functions: The functions of this Environment.  # noqa: E501
        :type: list[FunctionDef]
        """
        if self.local_vars_configuration.client_side_validation and functions is None:  # noqa: E501
            raise ValueError("Invalid value for `functions`, must not be `None`")  # noqa: E501

        self._functions = functions

    @property
    def templates(self):
        """Gets the templates of this Environment.  # noqa: E501

        The templates defined for this application.  # noqa: E501

        :return: The templates of this Environment.  # noqa: E501
        :rtype: list[TemplateDef]
        """
        return self._templates

    @templates.setter
    def templates(self, templates):
        """Sets the templates of this Environment.

        The templates defined for this application.  # noqa: E501

        :param templates: The templates of this Environment.  # noqa: E501
        :type: list[TemplateDef]
        """
        if self.local_vars_configuration.client_side_validation and templates is None:  # noqa: E501
            raise ValueError("Invalid value for `templates`, must not be `None`")  # noqa: E501

        self._templates = templates

    @property
    def variables(self):
        """Gets the variables of this Environment.  # noqa: E501


        :return: The variables of this Environment.  # noqa: E501
        :rtype: str
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this Environment.


        :param variables: The variables of this Environment.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and variables is None:  # noqa: E501
            raise ValueError("Invalid value for `variables`, must not be `None`")  # noqa: E501

        self._variables = variables

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Environment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Environment):
            return True

        return self.to_dict() != other.to_dict()
