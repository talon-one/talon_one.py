# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class CampaignEvaluationPosition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'group_id': 'int',
        'group_name': 'str',
        'position': 'int'
    }

    attribute_map = {
        'group_id': 'groupId',
        'group_name': 'groupName',
        'position': 'position'
    }

    def __init__(self, group_id=None, group_name=None, position=None, local_vars_configuration=None):  # noqa: E501
        """CampaignEvaluationPosition - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._group_id = None
        self._group_name = None
        self._position = None
        self.discriminator = None

        self.group_id = group_id
        self.group_name = group_name
        self.position = position

    @property
    def group_id(self):
        """Gets the group_id of this CampaignEvaluationPosition.  # noqa: E501

        The ID of the campaign evaluation group the campaign belongs to.  # noqa: E501

        :return: The group_id of this CampaignEvaluationPosition.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this CampaignEvaluationPosition.

        The ID of the campaign evaluation group the campaign belongs to.  # noqa: E501

        :param group_id: The group_id of this CampaignEvaluationPosition.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and group_id is None:  # noqa: E501
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501

        self._group_id = group_id

    @property
    def group_name(self):
        """Gets the group_name of this CampaignEvaluationPosition.  # noqa: E501

        The name of the campaign evaluation group the campaign belongs to.  # noqa: E501

        :return: The group_name of this CampaignEvaluationPosition.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this CampaignEvaluationPosition.

        The name of the campaign evaluation group the campaign belongs to.  # noqa: E501

        :param group_name: The group_name of this CampaignEvaluationPosition.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and group_name is None:  # noqa: E501
            raise ValueError("Invalid value for `group_name`, must not be `None`")  # noqa: E501

        self._group_name = group_name

    @property
    def position(self):
        """Gets the position of this CampaignEvaluationPosition.  # noqa: E501

        The position of the campaign node in its parent group.  # noqa: E501

        :return: The position of this CampaignEvaluationPosition.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this CampaignEvaluationPosition.

        The position of the campaign node in its parent group.  # noqa: E501

        :param position: The position of this CampaignEvaluationPosition.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and position is None:  # noqa: E501
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501

        self._position = position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignEvaluationPosition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CampaignEvaluationPosition):
            return True

        return self.to_dict() != other.to_dict()
