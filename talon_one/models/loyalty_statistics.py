# coding: utf-8

"""
    Talon.One API

    The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class LoyaltyStatistics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'total_active_points': 'float',
        'total_pending_points': 'float',
        'total_spent_points': 'float',
        'total_expired_points': 'float'
    }

    attribute_map = {
        'total_active_points': 'totalActivePoints',
        'total_pending_points': 'totalPendingPoints',
        'total_spent_points': 'totalSpentPoints',
        'total_expired_points': 'totalExpiredPoints'
    }

    def __init__(self, total_active_points=None, total_pending_points=None, total_spent_points=None, total_expired_points=None, local_vars_configuration=None):  # noqa: E501
        """LoyaltyStatistics - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._total_active_points = None
        self._total_pending_points = None
        self._total_spent_points = None
        self._total_expired_points = None
        self.discriminator = None

        self.total_active_points = total_active_points
        self.total_pending_points = total_pending_points
        self.total_spent_points = total_spent_points
        self.total_expired_points = total_expired_points

    @property
    def total_active_points(self):
        """Gets the total_active_points of this LoyaltyStatistics.  # noqa: E501

        Total of active points for this loyalty program  # noqa: E501

        :return: The total_active_points of this LoyaltyStatistics.  # noqa: E501
        :rtype: float
        """
        return self._total_active_points

    @total_active_points.setter
    def total_active_points(self, total_active_points):
        """Sets the total_active_points of this LoyaltyStatistics.

        Total of active points for this loyalty program  # noqa: E501

        :param total_active_points: The total_active_points of this LoyaltyStatistics.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and total_active_points is None:  # noqa: E501
            raise ValueError("Invalid value for `total_active_points`, must not be `None`")  # noqa: E501

        self._total_active_points = total_active_points

    @property
    def total_pending_points(self):
        """Gets the total_pending_points of this LoyaltyStatistics.  # noqa: E501

        Total of pending points for this loyalty program  # noqa: E501

        :return: The total_pending_points of this LoyaltyStatistics.  # noqa: E501
        :rtype: float
        """
        return self._total_pending_points

    @total_pending_points.setter
    def total_pending_points(self, total_pending_points):
        """Sets the total_pending_points of this LoyaltyStatistics.

        Total of pending points for this loyalty program  # noqa: E501

        :param total_pending_points: The total_pending_points of this LoyaltyStatistics.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and total_pending_points is None:  # noqa: E501
            raise ValueError("Invalid value for `total_pending_points`, must not be `None`")  # noqa: E501

        self._total_pending_points = total_pending_points

    @property
    def total_spent_points(self):
        """Gets the total_spent_points of this LoyaltyStatistics.  # noqa: E501

        Total of spent points for this loyalty program  # noqa: E501

        :return: The total_spent_points of this LoyaltyStatistics.  # noqa: E501
        :rtype: float
        """
        return self._total_spent_points

    @total_spent_points.setter
    def total_spent_points(self, total_spent_points):
        """Sets the total_spent_points of this LoyaltyStatistics.

        Total of spent points for this loyalty program  # noqa: E501

        :param total_spent_points: The total_spent_points of this LoyaltyStatistics.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and total_spent_points is None:  # noqa: E501
            raise ValueError("Invalid value for `total_spent_points`, must not be `None`")  # noqa: E501

        self._total_spent_points = total_spent_points

    @property
    def total_expired_points(self):
        """Gets the total_expired_points of this LoyaltyStatistics.  # noqa: E501

        Total of expired points for this loyalty program  # noqa: E501

        :return: The total_expired_points of this LoyaltyStatistics.  # noqa: E501
        :rtype: float
        """
        return self._total_expired_points

    @total_expired_points.setter
    def total_expired_points(self, total_expired_points):
        """Sets the total_expired_points of this LoyaltyStatistics.

        Total of expired points for this loyalty program  # noqa: E501

        :param total_expired_points: The total_expired_points of this LoyaltyStatistics.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and total_expired_points is None:  # noqa: E501
            raise ValueError("Invalid value for `total_expired_points`, must not be `None`")  # noqa: E501

        self._total_expired_points = total_expired_points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoyaltyStatistics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LoyaltyStatistics):
            return True

        return self.to_dict() != other.to_dict()
