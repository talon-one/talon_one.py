# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class TimePoint(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'month': 'int',
        'day_of_month': 'int',
        'day_of_week': 'int',
        'hour': 'int',
        'minute': 'int',
        'second': 'int'
    }

    attribute_map = {
        'month': 'month',
        'day_of_month': 'dayOfMonth',
        'day_of_week': 'dayOfWeek',
        'hour': 'hour',
        'minute': 'minute',
        'second': 'second'
    }

    def __init__(self, month=None, day_of_month=None, day_of_week=None, hour=None, minute=None, second=None, local_vars_configuration=None):  # noqa: E501
        """TimePoint - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._month = None
        self._day_of_month = None
        self._day_of_week = None
        self._hour = None
        self._minute = None
        self._second = None
        self.discriminator = None

        if month is not None:
            self.month = month
        if day_of_month is not None:
            self.day_of_month = day_of_month
        if day_of_week is not None:
            self.day_of_week = day_of_week
        self.hour = hour
        self.minute = minute
        self.second = second

    @property
    def month(self):
        """Gets the month of this TimePoint.  # noqa: E501

        The achievement ends and resets in this month.  **Note**: Only applicable if the period is set to `Y`.   # noqa: E501

        :return: The month of this TimePoint.  # noqa: E501
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this TimePoint.

        The achievement ends and resets in this month.  **Note**: Only applicable if the period is set to `Y`.   # noqa: E501

        :param month: The month of this TimePoint.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                month is not None and month > 12):  # noqa: E501
            raise ValueError("Invalid value for `month`, must be a value less than or equal to `12`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                month is not None and month < 1):  # noqa: E501
            raise ValueError("Invalid value for `month`, must be a value greater than or equal to `1`")  # noqa: E501

        self._month = month

    @property
    def day_of_month(self):
        """Gets the day_of_month of this TimePoint.  # noqa: E501

        The achievement ends and resets on this day of the month.  **Note**: Only applicable if the period is set to `Y` or `M`.   # noqa: E501

        :return: The day_of_month of this TimePoint.  # noqa: E501
        :rtype: int
        """
        return self._day_of_month

    @day_of_month.setter
    def day_of_month(self, day_of_month):
        """Sets the day_of_month of this TimePoint.

        The achievement ends and resets on this day of the month.  **Note**: Only applicable if the period is set to `Y` or `M`.   # noqa: E501

        :param day_of_month: The day_of_month of this TimePoint.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                day_of_month is not None and day_of_month > 31):  # noqa: E501
            raise ValueError("Invalid value for `day_of_month`, must be a value less than or equal to `31`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                day_of_month is not None and day_of_month < 1):  # noqa: E501
            raise ValueError("Invalid value for `day_of_month`, must be a value greater than or equal to `1`")  # noqa: E501

        self._day_of_month = day_of_month

    @property
    def day_of_week(self):
        """Gets the day_of_week of this TimePoint.  # noqa: E501

        The achievement ends and resets on this day of the week. `1` represents `Monday` and `7` represents `Sunday`.  **Note**: Only applicable if the period is set to `W`.   # noqa: E501

        :return: The day_of_week of this TimePoint.  # noqa: E501
        :rtype: int
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this TimePoint.

        The achievement ends and resets on this day of the week. `1` represents `Monday` and `7` represents `Sunday`.  **Note**: Only applicable if the period is set to `W`.   # noqa: E501

        :param day_of_week: The day_of_week of this TimePoint.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                day_of_week is not None and day_of_week > 7):  # noqa: E501
            raise ValueError("Invalid value for `day_of_week`, must be a value less than or equal to `7`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                day_of_week is not None and day_of_week < 1):  # noqa: E501
            raise ValueError("Invalid value for `day_of_week`, must be a value greater than or equal to `1`")  # noqa: E501

        self._day_of_week = day_of_week

    @property
    def hour(self):
        """Gets the hour of this TimePoint.  # noqa: E501

        The achievement ends and resets at this hour.  # noqa: E501

        :return: The hour of this TimePoint.  # noqa: E501
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this TimePoint.

        The achievement ends and resets at this hour.  # noqa: E501

        :param hour: The hour of this TimePoint.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and hour is None:  # noqa: E501
            raise ValueError("Invalid value for `hour`, must not be `None`")  # noqa: E501

        self._hour = hour

    @property
    def minute(self):
        """Gets the minute of this TimePoint.  # noqa: E501

        The achievement ends and resets at this minute.  # noqa: E501

        :return: The minute of this TimePoint.  # noqa: E501
        :rtype: int
        """
        return self._minute

    @minute.setter
    def minute(self, minute):
        """Sets the minute of this TimePoint.

        The achievement ends and resets at this minute.  # noqa: E501

        :param minute: The minute of this TimePoint.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and minute is None:  # noqa: E501
            raise ValueError("Invalid value for `minute`, must not be `None`")  # noqa: E501

        self._minute = minute

    @property
    def second(self):
        """Gets the second of this TimePoint.  # noqa: E501

        The achievement ends and resets at this second.  # noqa: E501

        :return: The second of this TimePoint.  # noqa: E501
        :rtype: int
        """
        return self._second

    @second.setter
    def second(self, second):
        """Sets the second of this TimePoint.

        The achievement ends and resets at this second.  # noqa: E501

        :param second: The second of this TimePoint.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and second is None:  # noqa: E501
            raise ValueError("Invalid value for `second`, must not be `None`")  # noqa: E501

        self._second = second

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimePoint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimePoint):
            return True

        return self.to_dict() != other.to_dict()
