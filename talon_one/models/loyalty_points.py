# coding: utf-8

"""
    Talon.One API

    The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class LoyaltyPoints(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'points': 'float',
        'name': 'str',
        'validity_duration': 'str',
        'pending_duration': 'str',
        'sub_ledger_id': 'str'
    }

    attribute_map = {
        'points': 'points',
        'name': 'name',
        'validity_duration': 'validityDuration',
        'pending_duration': 'pendingDuration',
        'sub_ledger_id': 'subLedgerID'
    }

    def __init__(self, points=None, name=None, validity_duration=None, pending_duration=None, sub_ledger_id=None, local_vars_configuration=None):  # noqa: E501
        """LoyaltyPoints - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._points = None
        self._name = None
        self._validity_duration = None
        self._pending_duration = None
        self._sub_ledger_id = None
        self.discriminator = None

        self.points = points
        if name is not None:
            self.name = name
        if validity_duration is not None:
            self.validity_duration = validity_duration
        if pending_duration is not None:
            self.pending_duration = pending_duration
        if sub_ledger_id is not None:
            self.sub_ledger_id = sub_ledger_id

    @property
    def points(self):
        """Gets the points of this LoyaltyPoints.  # noqa: E501

        Amount of loyalty points  # noqa: E501

        :return: The points of this LoyaltyPoints.  # noqa: E501
        :rtype: float
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this LoyaltyPoints.

        Amount of loyalty points  # noqa: E501

        :param points: The points of this LoyaltyPoints.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and points is None:  # noqa: E501
            raise ValueError("Invalid value for `points`, must not be `None`")  # noqa: E501

        self._points = points

    @property
    def name(self):
        """Gets the name of this LoyaltyPoints.  # noqa: E501

        Allows to specify a name for the addition or deduction  # noqa: E501

        :return: The name of this LoyaltyPoints.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LoyaltyPoints.

        Allows to specify a name for the addition or deduction  # noqa: E501

        :param name: The name of this LoyaltyPoints.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def validity_duration(self):
        """Gets the validity_duration of this LoyaltyPoints.  # noqa: E501

        Indicates the duration after which the added loyalty points should expire. The format is a number followed by one letter indicating the time unit, like '1h' or '40m' (defined by Go time package).  # noqa: E501

        :return: The validity_duration of this LoyaltyPoints.  # noqa: E501
        :rtype: str
        """
        return self._validity_duration

    @validity_duration.setter
    def validity_duration(self, validity_duration):
        """Sets the validity_duration of this LoyaltyPoints.

        Indicates the duration after which the added loyalty points should expire. The format is a number followed by one letter indicating the time unit, like '1h' or '40m' (defined by Go time package).  # noqa: E501

        :param validity_duration: The validity_duration of this LoyaltyPoints.  # noqa: E501
        :type: str
        """

        self._validity_duration = validity_duration

    @property
    def pending_duration(self):
        """Gets the pending_duration of this LoyaltyPoints.  # noqa: E501

        Indicates the amount of time before the points are considered valid. The format is a number followed by one letter indicating the time unit, like '1h' or '40m' (defined by Go time package).  # noqa: E501

        :return: The pending_duration of this LoyaltyPoints.  # noqa: E501
        :rtype: str
        """
        return self._pending_duration

    @pending_duration.setter
    def pending_duration(self, pending_duration):
        """Sets the pending_duration of this LoyaltyPoints.

        Indicates the amount of time before the points are considered valid. The format is a number followed by one letter indicating the time unit, like '1h' or '40m' (defined by Go time package).  # noqa: E501

        :param pending_duration: The pending_duration of this LoyaltyPoints.  # noqa: E501
        :type: str
        """

        self._pending_duration = pending_duration

    @property
    def sub_ledger_id(self):
        """Gets the sub_ledger_id of this LoyaltyPoints.  # noqa: E501

        This specifies if we are adding loyalty points to the main ledger or a subledger  # noqa: E501

        :return: The sub_ledger_id of this LoyaltyPoints.  # noqa: E501
        :rtype: str
        """
        return self._sub_ledger_id

    @sub_ledger_id.setter
    def sub_ledger_id(self, sub_ledger_id):
        """Sets the sub_ledger_id of this LoyaltyPoints.

        This specifies if we are adding loyalty points to the main ledger or a subledger  # noqa: E501

        :param sub_ledger_id: The sub_ledger_id of this LoyaltyPoints.  # noqa: E501
        :type: str
        """

        self._sub_ledger_id = sub_ledger_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoyaltyPoints):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LoyaltyPoints):
            return True

        return self.to_dict() != other.to_dict()
