# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class ApplicationReferee(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'application_id': 'int',
        'session_id': 'str',
        'advocate_integration_id': 'str',
        'friend_integration_id': 'str',
        'code': 'str',
        'created': 'datetime'
    }

    attribute_map = {
        'application_id': 'applicationId',
        'session_id': 'sessionId',
        'advocate_integration_id': 'advocateIntegrationId',
        'friend_integration_id': 'friendIntegrationId',
        'code': 'code',
        'created': 'created'
    }

    def __init__(self, application_id=None, session_id=None, advocate_integration_id=None, friend_integration_id=None, code=None, created=None, local_vars_configuration=None):  # noqa: E501
        """ApplicationReferee - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._application_id = None
        self._session_id = None
        self._advocate_integration_id = None
        self._friend_integration_id = None
        self._code = None
        self._created = None
        self.discriminator = None

        self.application_id = application_id
        self.session_id = session_id
        self.advocate_integration_id = advocate_integration_id
        self.friend_integration_id = friend_integration_id
        self.code = code
        self.created = created

    @property
    def application_id(self):
        """Gets the application_id of this ApplicationReferee.  # noqa: E501

        The ID of the application that owns this entity.  # noqa: E501

        :return: The application_id of this ApplicationReferee.  # noqa: E501
        :rtype: int
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ApplicationReferee.

        The ID of the application that owns this entity.  # noqa: E501

        :param application_id: The application_id of this ApplicationReferee.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and application_id is None:  # noqa: E501
            raise ValueError("Invalid value for `application_id`, must not be `None`")  # noqa: E501

        self._application_id = application_id

    @property
    def session_id(self):
        """Gets the session_id of this ApplicationReferee.  # noqa: E501

        Integration ID of the session in which the customer redeemed the referral.  # noqa: E501

        :return: The session_id of this ApplicationReferee.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this ApplicationReferee.

        Integration ID of the session in which the customer redeemed the referral.  # noqa: E501

        :param session_id: The session_id of this ApplicationReferee.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and session_id is None:  # noqa: E501
            raise ValueError("Invalid value for `session_id`, must not be `None`")  # noqa: E501

        self._session_id = session_id

    @property
    def advocate_integration_id(self):
        """Gets the advocate_integration_id of this ApplicationReferee.  # noqa: E501

        Integration ID of the Advocate's Profile.  # noqa: E501

        :return: The advocate_integration_id of this ApplicationReferee.  # noqa: E501
        :rtype: str
        """
        return self._advocate_integration_id

    @advocate_integration_id.setter
    def advocate_integration_id(self, advocate_integration_id):
        """Sets the advocate_integration_id of this ApplicationReferee.

        Integration ID of the Advocate's Profile.  # noqa: E501

        :param advocate_integration_id: The advocate_integration_id of this ApplicationReferee.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and advocate_integration_id is None:  # noqa: E501
            raise ValueError("Invalid value for `advocate_integration_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                advocate_integration_id is not None and len(advocate_integration_id) > 1000):
            raise ValueError("Invalid value for `advocate_integration_id`, length must be less than or equal to `1000`")  # noqa: E501

        self._advocate_integration_id = advocate_integration_id

    @property
    def friend_integration_id(self):
        """Gets the friend_integration_id of this ApplicationReferee.  # noqa: E501

        Integration ID of the Friend's Profile.  # noqa: E501

        :return: The friend_integration_id of this ApplicationReferee.  # noqa: E501
        :rtype: str
        """
        return self._friend_integration_id

    @friend_integration_id.setter
    def friend_integration_id(self, friend_integration_id):
        """Sets the friend_integration_id of this ApplicationReferee.

        Integration ID of the Friend's Profile.  # noqa: E501

        :param friend_integration_id: The friend_integration_id of this ApplicationReferee.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and friend_integration_id is None:  # noqa: E501
            raise ValueError("Invalid value for `friend_integration_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                friend_integration_id is not None and len(friend_integration_id) > 1000):
            raise ValueError("Invalid value for `friend_integration_id`, length must be less than or equal to `1000`")  # noqa: E501

        self._friend_integration_id = friend_integration_id

    @property
    def code(self):
        """Gets the code of this ApplicationReferee.  # noqa: E501

        Advocate's referral code.  # noqa: E501

        :return: The code of this ApplicationReferee.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ApplicationReferee.

        Advocate's referral code.  # noqa: E501

        :param code: The code of this ApplicationReferee.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and code is None:  # noqa: E501
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def created(self):
        """Gets the created of this ApplicationReferee.  # noqa: E501

        Timestamp of the moment the customer redeemed the referral.  # noqa: E501

        :return: The created of this ApplicationReferee.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ApplicationReferee.

        Timestamp of the moment the customer redeemed the referral.  # noqa: E501

        :param created: The created of this ApplicationReferee.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationReferee):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationReferee):
            return True

        return self.to_dict() != other.to_dict()
