# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class AchievementAdditionalProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'campaign_id': 'int',
        'user_id': 'int',
        'created_by': 'str',
        'has_progress': 'bool'
    }

    attribute_map = {
        'campaign_id': 'campaignId',
        'user_id': 'userId',
        'created_by': 'createdBy',
        'has_progress': 'hasProgress'
    }

    def __init__(self, campaign_id=None, user_id=None, created_by=None, has_progress=None, local_vars_configuration=None):  # noqa: E501
        """AchievementAdditionalProperties - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._campaign_id = None
        self._user_id = None
        self._created_by = None
        self._has_progress = None
        self.discriminator = None

        self.campaign_id = campaign_id
        self.user_id = user_id
        self.created_by = created_by
        if has_progress is not None:
            self.has_progress = has_progress

    @property
    def campaign_id(self):
        """Gets the campaign_id of this AchievementAdditionalProperties.  # noqa: E501

        ID of the campaign, to which the achievement belongs to  # noqa: E501

        :return: The campaign_id of this AchievementAdditionalProperties.  # noqa: E501
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this AchievementAdditionalProperties.

        ID of the campaign, to which the achievement belongs to  # noqa: E501

        :param campaign_id: The campaign_id of this AchievementAdditionalProperties.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and campaign_id is None:  # noqa: E501
            raise ValueError("Invalid value for `campaign_id`, must not be `None`")  # noqa: E501

        self._campaign_id = campaign_id

    @property
    def user_id(self):
        """Gets the user_id of this AchievementAdditionalProperties.  # noqa: E501

        ID of the user that created this achievement.  # noqa: E501

        :return: The user_id of this AchievementAdditionalProperties.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AchievementAdditionalProperties.

        ID of the user that created this achievement.  # noqa: E501

        :param user_id: The user_id of this AchievementAdditionalProperties.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def created_by(self):
        """Gets the created_by of this AchievementAdditionalProperties.  # noqa: E501

        Name of the user that created the achievement.  **Note**: This is not available if the user has been deleted.   # noqa: E501

        :return: The created_by of this AchievementAdditionalProperties.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AchievementAdditionalProperties.

        Name of the user that created the achievement.  **Note**: This is not available if the user has been deleted.   # noqa: E501

        :param created_by: The created_by of this AchievementAdditionalProperties.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def has_progress(self):
        """Gets the has_progress of this AchievementAdditionalProperties.  # noqa: E501

        Indicates if a customer has made progress in the achievement.  # noqa: E501

        :return: The has_progress of this AchievementAdditionalProperties.  # noqa: E501
        :rtype: bool
        """
        return self._has_progress

    @has_progress.setter
    def has_progress(self, has_progress):
        """Sets the has_progress of this AchievementAdditionalProperties.

        Indicates if a customer has made progress in the achievement.  # noqa: E501

        :param has_progress: The has_progress of this AchievementAdditionalProperties.  # noqa: E501
        :type: bool
        """

        self._has_progress = has_progress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AchievementAdditionalProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AchievementAdditionalProperties):
            return True

        return self.to_dict() != other.to_dict()
