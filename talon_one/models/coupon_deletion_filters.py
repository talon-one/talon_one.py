# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class CouponDeletionFilters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_before': 'datetime',
        'created_after': 'datetime',
        'starts_after': 'datetime',
        'starts_before': 'datetime',
        'valid': 'str',
        'usable': 'bool',
        'redeemed': 'bool',
        'recipient_integration_id': 'str',
        'exact_match': 'bool',
        'value': 'str',
        'batch_id': 'str',
        'referral_id': 'int',
        'expires_after': 'datetime',
        'expires_before': 'datetime'
    }

    attribute_map = {
        'created_before': 'createdBefore',
        'created_after': 'createdAfter',
        'starts_after': 'startsAfter',
        'starts_before': 'startsBefore',
        'valid': 'valid',
        'usable': 'usable',
        'redeemed': 'redeemed',
        'recipient_integration_id': 'recipientIntegrationId',
        'exact_match': 'exactMatch',
        'value': 'value',
        'batch_id': 'batchId',
        'referral_id': 'referralId',
        'expires_after': 'expiresAfter',
        'expires_before': 'expiresBefore'
    }

    def __init__(self, created_before=None, created_after=None, starts_after=None, starts_before=None, valid=None, usable=None, redeemed=None, recipient_integration_id=None, exact_match=False, value='false', batch_id=None, referral_id=None, expires_after=None, expires_before=None, local_vars_configuration=None):  # noqa: E501
        """CouponDeletionFilters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created_before = None
        self._created_after = None
        self._starts_after = None
        self._starts_before = None
        self._valid = None
        self._usable = None
        self._redeemed = None
        self._recipient_integration_id = None
        self._exact_match = None
        self._value = None
        self._batch_id = None
        self._referral_id = None
        self._expires_after = None
        self._expires_before = None
        self.discriminator = None

        if created_before is not None:
            self.created_before = created_before
        if created_after is not None:
            self.created_after = created_after
        if starts_after is not None:
            self.starts_after = starts_after
        if starts_before is not None:
            self.starts_before = starts_before
        if valid is not None:
            self.valid = valid
        if usable is not None:
            self.usable = usable
        if redeemed is not None:
            self.redeemed = redeemed
        if recipient_integration_id is not None:
            self.recipient_integration_id = recipient_integration_id
        if exact_match is not None:
            self.exact_match = exact_match
        if value is not None:
            self.value = value
        if batch_id is not None:
            self.batch_id = batch_id
        if referral_id is not None:
            self.referral_id = referral_id
        if expires_after is not None:
            self.expires_after = expires_after
        if expires_before is not None:
            self.expires_before = expires_before

    @property
    def created_before(self):
        """Gets the created_before of this CouponDeletionFilters.  # noqa: E501

        Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.  # noqa: E501

        :return: The created_before of this CouponDeletionFilters.  # noqa: E501
        :rtype: datetime
        """
        return self._created_before

    @created_before.setter
    def created_before(self, created_before):
        """Sets the created_before of this CouponDeletionFilters.

        Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.  # noqa: E501

        :param created_before: The created_before of this CouponDeletionFilters.  # noqa: E501
        :type: datetime
        """

        self._created_before = created_before

    @property
    def created_after(self):
        """Gets the created_after of this CouponDeletionFilters.  # noqa: E501

        Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.  # noqa: E501

        :return: The created_after of this CouponDeletionFilters.  # noqa: E501
        :rtype: datetime
        """
        return self._created_after

    @created_after.setter
    def created_after(self, created_after):
        """Sets the created_after of this CouponDeletionFilters.

        Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.  # noqa: E501

        :param created_after: The created_after of this CouponDeletionFilters.  # noqa: E501
        :type: datetime
        """

        self._created_after = created_after

    @property
    def starts_after(self):
        """Gets the starts_after of this CouponDeletionFilters.  # noqa: E501

        Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.  # noqa: E501

        :return: The starts_after of this CouponDeletionFilters.  # noqa: E501
        :rtype: datetime
        """
        return self._starts_after

    @starts_after.setter
    def starts_after(self, starts_after):
        """Sets the starts_after of this CouponDeletionFilters.

        Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.  # noqa: E501

        :param starts_after: The starts_after of this CouponDeletionFilters.  # noqa: E501
        :type: datetime
        """

        self._starts_after = starts_after

    @property
    def starts_before(self):
        """Gets the starts_before of this CouponDeletionFilters.  # noqa: E501

        Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.  # noqa: E501

        :return: The starts_before of this CouponDeletionFilters.  # noqa: E501
        :rtype: datetime
        """
        return self._starts_before

    @starts_before.setter
    def starts_before(self, starts_before):
        """Sets the starts_before of this CouponDeletionFilters.

        Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.  # noqa: E501

        :param starts_before: The starts_before of this CouponDeletionFilters.  # noqa: E501
        :type: datetime
        """

        self._starts_before = starts_before

    @property
    def valid(self):
        """Gets the valid of this CouponDeletionFilters.  # noqa: E501

        - `expired`: Matches coupons in which the expiration date is set and in the past. - `validNow`: Matches coupons in which the start date is null or in the past and the expiration date is null or in the future. - `validFuture`: Matches coupons in which the start date is set and in the future.   # noqa: E501

        :return: The valid of this CouponDeletionFilters.  # noqa: E501
        :rtype: str
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this CouponDeletionFilters.

        - `expired`: Matches coupons in which the expiration date is set and in the past. - `validNow`: Matches coupons in which the start date is null or in the past and the expiration date is null or in the future. - `validFuture`: Matches coupons in which the start date is set and in the future.   # noqa: E501

        :param valid: The valid of this CouponDeletionFilters.  # noqa: E501
        :type: str
        """
        allowed_values = ["expired", "validNow", "validFuture"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and valid not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `valid` ({0}), must be one of {1}"  # noqa: E501
                .format(valid, allowed_values)
            )

        self._valid = valid

    @property
    def usable(self):
        """Gets the usable of this CouponDeletionFilters.  # noqa: E501

        - `true`: only coupons where `usageCounter < usageLimit` will be returned. - `false`: only coupons where `usageCounter >= usageLimit` will be returned. - This field cannot be used in conjunction with the `usable` query parameter.   # noqa: E501

        :return: The usable of this CouponDeletionFilters.  # noqa: E501
        :rtype: bool
        """
        return self._usable

    @usable.setter
    def usable(self, usable):
        """Sets the usable of this CouponDeletionFilters.

        - `true`: only coupons where `usageCounter < usageLimit` will be returned. - `false`: only coupons where `usageCounter >= usageLimit` will be returned. - This field cannot be used in conjunction with the `usable` query parameter.   # noqa: E501

        :param usable: The usable of this CouponDeletionFilters.  # noqa: E501
        :type: bool
        """

        self._usable = usable

    @property
    def redeemed(self):
        """Gets the redeemed of this CouponDeletionFilters.  # noqa: E501

        - `true`: only coupons where `usageCounter > 0` will be returned. - `false`: only coupons where `usageCounter = 0` will be returned.  **Note:** This field cannot be used in conjunction with the `usable` query parameter.   # noqa: E501

        :return: The redeemed of this CouponDeletionFilters.  # noqa: E501
        :rtype: bool
        """
        return self._redeemed

    @redeemed.setter
    def redeemed(self, redeemed):
        """Sets the redeemed of this CouponDeletionFilters.

        - `true`: only coupons where `usageCounter > 0` will be returned. - `false`: only coupons where `usageCounter = 0` will be returned.  **Note:** This field cannot be used in conjunction with the `usable` query parameter.   # noqa: E501

        :param redeemed: The redeemed of this CouponDeletionFilters.  # noqa: E501
        :type: bool
        """

        self._redeemed = redeemed

    @property
    def recipient_integration_id(self):
        """Gets the recipient_integration_id of this CouponDeletionFilters.  # noqa: E501

        Filter results by match with a profile id specified in the coupon's `RecipientIntegrationId` field.   # noqa: E501

        :return: The recipient_integration_id of this CouponDeletionFilters.  # noqa: E501
        :rtype: str
        """
        return self._recipient_integration_id

    @recipient_integration_id.setter
    def recipient_integration_id(self, recipient_integration_id):
        """Sets the recipient_integration_id of this CouponDeletionFilters.

        Filter results by match with a profile id specified in the coupon's `RecipientIntegrationId` field.   # noqa: E501

        :param recipient_integration_id: The recipient_integration_id of this CouponDeletionFilters.  # noqa: E501
        :type: str
        """

        self._recipient_integration_id = recipient_integration_id

    @property
    def exact_match(self):
        """Gets the exact_match of this CouponDeletionFilters.  # noqa: E501

        Filter results to an exact case-insensitive matching against the coupon code  # noqa: E501

        :return: The exact_match of this CouponDeletionFilters.  # noqa: E501
        :rtype: bool
        """
        return self._exact_match

    @exact_match.setter
    def exact_match(self, exact_match):
        """Sets the exact_match of this CouponDeletionFilters.

        Filter results to an exact case-insensitive matching against the coupon code  # noqa: E501

        :param exact_match: The exact_match of this CouponDeletionFilters.  # noqa: E501
        :type: bool
        """

        self._exact_match = exact_match

    @property
    def value(self):
        """Gets the value of this CouponDeletionFilters.  # noqa: E501

        Filter results by the coupon code  # noqa: E501

        :return: The value of this CouponDeletionFilters.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CouponDeletionFilters.

        Filter results by the coupon code  # noqa: E501

        :param value: The value of this CouponDeletionFilters.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def batch_id(self):
        """Gets the batch_id of this CouponDeletionFilters.  # noqa: E501

        Filter results by batches of coupons  # noqa: E501

        :return: The batch_id of this CouponDeletionFilters.  # noqa: E501
        :rtype: str
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this CouponDeletionFilters.

        Filter results by batches of coupons  # noqa: E501

        :param batch_id: The batch_id of this CouponDeletionFilters.  # noqa: E501
        :type: str
        """

        self._batch_id = batch_id

    @property
    def referral_id(self):
        """Gets the referral_id of this CouponDeletionFilters.  # noqa: E501

        Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code.  # noqa: E501

        :return: The referral_id of this CouponDeletionFilters.  # noqa: E501
        :rtype: int
        """
        return self._referral_id

    @referral_id.setter
    def referral_id(self, referral_id):
        """Sets the referral_id of this CouponDeletionFilters.

        Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code.  # noqa: E501

        :param referral_id: The referral_id of this CouponDeletionFilters.  # noqa: E501
        :type: int
        """

        self._referral_id = referral_id

    @property
    def expires_after(self):
        """Gets the expires_after of this CouponDeletionFilters.  # noqa: E501

        Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.  # noqa: E501

        :return: The expires_after of this CouponDeletionFilters.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_after

    @expires_after.setter
    def expires_after(self, expires_after):
        """Sets the expires_after of this CouponDeletionFilters.

        Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.  # noqa: E501

        :param expires_after: The expires_after of this CouponDeletionFilters.  # noqa: E501
        :type: datetime
        """

        self._expires_after = expires_after

    @property
    def expires_before(self):
        """Gets the expires_before of this CouponDeletionFilters.  # noqa: E501

        Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.  # noqa: E501

        :return: The expires_before of this CouponDeletionFilters.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_before

    @expires_before.setter
    def expires_before(self, expires_before):
        """Sets the expires_before of this CouponDeletionFilters.

        Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.  # noqa: E501

        :param expires_before: The expires_before of this CouponDeletionFilters.  # noqa: E501
        :type: datetime
        """

        self._expires_before = expires_before

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CouponDeletionFilters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CouponDeletionFilters):
            return True

        return self.to_dict() != other.to_dict()
