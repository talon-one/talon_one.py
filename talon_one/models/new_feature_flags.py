# coding: utf-8

"""
    Talon.One API

    The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NewFeatureFlags(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'loyalty': 'bool',
        'coupons_without_count': 'bool',
        'beta_effects': 'bool'
    }

    attribute_map = {
        'loyalty': 'loyalty',
        'coupons_without_count': 'coupons_without_count',
        'beta_effects': 'betaEffects'
    }

    def __init__(self, loyalty=None, coupons_without_count=None, beta_effects=None):  # noqa: E501
        """NewFeatureFlags - a model defined in Swagger"""  # noqa: E501

        self._loyalty = None
        self._coupons_without_count = None
        self._beta_effects = None
        self.discriminator = None

        if loyalty is not None:
            self.loyalty = loyalty
        if coupons_without_count is not None:
            self.coupons_without_count = coupons_without_count
        if beta_effects is not None:
            self.beta_effects = beta_effects

    @property
    def loyalty(self):
        """Gets the loyalty of this NewFeatureFlags.  # noqa: E501

        Whether the account has access to the loyalty features or not  # noqa: E501

        :return: The loyalty of this NewFeatureFlags.  # noqa: E501
        :rtype: bool
        """
        return self._loyalty

    @loyalty.setter
    def loyalty(self, loyalty):
        """Sets the loyalty of this NewFeatureFlags.

        Whether the account has access to the loyalty features or not  # noqa: E501

        :param loyalty: The loyalty of this NewFeatureFlags.  # noqa: E501
        :type: bool
        """

        self._loyalty = loyalty

    @property
    def coupons_without_count(self):
        """Gets the coupons_without_count of this NewFeatureFlags.  # noqa: E501

        Whether the account queries coupons with or without total result size  # noqa: E501

        :return: The coupons_without_count of this NewFeatureFlags.  # noqa: E501
        :rtype: bool
        """
        return self._coupons_without_count

    @coupons_without_count.setter
    def coupons_without_count(self, coupons_without_count):
        """Sets the coupons_without_count of this NewFeatureFlags.

        Whether the account queries coupons with or without total result size  # noqa: E501

        :param coupons_without_count: The coupons_without_count of this NewFeatureFlags.  # noqa: E501
        :type: bool
        """

        self._coupons_without_count = coupons_without_count

    @property
    def beta_effects(self):
        """Gets the beta_effects of this NewFeatureFlags.  # noqa: E501

        Whether the account can test beta effects or not  # noqa: E501

        :return: The beta_effects of this NewFeatureFlags.  # noqa: E501
        :rtype: bool
        """
        return self._beta_effects

    @beta_effects.setter
    def beta_effects(self, beta_effects):
        """Sets the beta_effects of this NewFeatureFlags.

        Whether the account can test beta effects or not  # noqa: E501

        :param beta_effects: The beta_effects of this NewFeatureFlags.  # noqa: E501
        :type: bool
        """

        self._beta_effects = beta_effects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewFeatureFlags, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewFeatureFlags):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
