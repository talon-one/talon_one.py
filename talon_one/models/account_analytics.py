# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class AccountAnalytics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'applications': 'int',
        'live_applications': 'int',
        'sandbox_applications': 'int',
        'campaigns': 'int',
        'active_campaigns': 'int',
        'live_active_campaigns': 'int',
        'coupons': 'int',
        'active_coupons': 'int',
        'expired_coupons': 'int',
        'referral_codes': 'int',
        'active_referral_codes': 'int',
        'expired_referral_codes': 'int',
        'active_rules': 'int',
        'users': 'int',
        'roles': 'int',
        'custom_attributes': 'int',
        'webhooks': 'int',
        'loyalty_programs': 'int',
        'live_loyalty_programs': 'int',
        'last_updated_at': 'datetime'
    }

    attribute_map = {
        'applications': 'applications',
        'live_applications': 'liveApplications',
        'sandbox_applications': 'sandboxApplications',
        'campaigns': 'campaigns',
        'active_campaigns': 'activeCampaigns',
        'live_active_campaigns': 'liveActiveCampaigns',
        'coupons': 'coupons',
        'active_coupons': 'activeCoupons',
        'expired_coupons': 'expiredCoupons',
        'referral_codes': 'referralCodes',
        'active_referral_codes': 'activeReferralCodes',
        'expired_referral_codes': 'expiredReferralCodes',
        'active_rules': 'activeRules',
        'users': 'users',
        'roles': 'roles',
        'custom_attributes': 'customAttributes',
        'webhooks': 'webhooks',
        'loyalty_programs': 'loyaltyPrograms',
        'live_loyalty_programs': 'liveLoyaltyPrograms',
        'last_updated_at': 'lastUpdatedAt'
    }

    def __init__(self, applications=None, live_applications=None, sandbox_applications=None, campaigns=None, active_campaigns=None, live_active_campaigns=None, coupons=None, active_coupons=None, expired_coupons=None, referral_codes=None, active_referral_codes=None, expired_referral_codes=None, active_rules=None, users=None, roles=None, custom_attributes=None, webhooks=None, loyalty_programs=None, live_loyalty_programs=None, last_updated_at=None, local_vars_configuration=None):  # noqa: E501
        """AccountAnalytics - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._applications = None
        self._live_applications = None
        self._sandbox_applications = None
        self._campaigns = None
        self._active_campaigns = None
        self._live_active_campaigns = None
        self._coupons = None
        self._active_coupons = None
        self._expired_coupons = None
        self._referral_codes = None
        self._active_referral_codes = None
        self._expired_referral_codes = None
        self._active_rules = None
        self._users = None
        self._roles = None
        self._custom_attributes = None
        self._webhooks = None
        self._loyalty_programs = None
        self._live_loyalty_programs = None
        self._last_updated_at = None
        self.discriminator = None

        self.applications = applications
        self.live_applications = live_applications
        self.sandbox_applications = sandbox_applications
        self.campaigns = campaigns
        self.active_campaigns = active_campaigns
        self.live_active_campaigns = live_active_campaigns
        self.coupons = coupons
        self.active_coupons = active_coupons
        self.expired_coupons = expired_coupons
        self.referral_codes = referral_codes
        self.active_referral_codes = active_referral_codes
        self.expired_referral_codes = expired_referral_codes
        self.active_rules = active_rules
        self.users = users
        self.roles = roles
        self.custom_attributes = custom_attributes
        self.webhooks = webhooks
        self.loyalty_programs = loyalty_programs
        self.live_loyalty_programs = live_loyalty_programs
        self.last_updated_at = last_updated_at

    @property
    def applications(self):
        """Gets the applications of this AccountAnalytics.  # noqa: E501

        Total number of applications in the account.  # noqa: E501

        :return: The applications of this AccountAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this AccountAnalytics.

        Total number of applications in the account.  # noqa: E501

        :param applications: The applications of this AccountAnalytics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and applications is None:  # noqa: E501
            raise ValueError("Invalid value for `applications`, must not be `None`")  # noqa: E501

        self._applications = applications

    @property
    def live_applications(self):
        """Gets the live_applications of this AccountAnalytics.  # noqa: E501

        Total number of live applications in the account.  # noqa: E501

        :return: The live_applications of this AccountAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._live_applications

    @live_applications.setter
    def live_applications(self, live_applications):
        """Sets the live_applications of this AccountAnalytics.

        Total number of live applications in the account.  # noqa: E501

        :param live_applications: The live_applications of this AccountAnalytics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and live_applications is None:  # noqa: E501
            raise ValueError("Invalid value for `live_applications`, must not be `None`")  # noqa: E501

        self._live_applications = live_applications

    @property
    def sandbox_applications(self):
        """Gets the sandbox_applications of this AccountAnalytics.  # noqa: E501

        Total number of sandbox applications in the account.  # noqa: E501

        :return: The sandbox_applications of this AccountAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._sandbox_applications

    @sandbox_applications.setter
    def sandbox_applications(self, sandbox_applications):
        """Sets the sandbox_applications of this AccountAnalytics.

        Total number of sandbox applications in the account.  # noqa: E501

        :param sandbox_applications: The sandbox_applications of this AccountAnalytics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and sandbox_applications is None:  # noqa: E501
            raise ValueError("Invalid value for `sandbox_applications`, must not be `None`")  # noqa: E501

        self._sandbox_applications = sandbox_applications

    @property
    def campaigns(self):
        """Gets the campaigns of this AccountAnalytics.  # noqa: E501

        Total number of campaigns in the account.  # noqa: E501

        :return: The campaigns of this AccountAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._campaigns

    @campaigns.setter
    def campaigns(self, campaigns):
        """Sets the campaigns of this AccountAnalytics.

        Total number of campaigns in the account.  # noqa: E501

        :param campaigns: The campaigns of this AccountAnalytics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and campaigns is None:  # noqa: E501
            raise ValueError("Invalid value for `campaigns`, must not be `None`")  # noqa: E501

        self._campaigns = campaigns

    @property
    def active_campaigns(self):
        """Gets the active_campaigns of this AccountAnalytics.  # noqa: E501

        Total number of active campaigns in the account.  # noqa: E501

        :return: The active_campaigns of this AccountAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._active_campaigns

    @active_campaigns.setter
    def active_campaigns(self, active_campaigns):
        """Sets the active_campaigns of this AccountAnalytics.

        Total number of active campaigns in the account.  # noqa: E501

        :param active_campaigns: The active_campaigns of this AccountAnalytics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and active_campaigns is None:  # noqa: E501
            raise ValueError("Invalid value for `active_campaigns`, must not be `None`")  # noqa: E501

        self._active_campaigns = active_campaigns

    @property
    def live_active_campaigns(self):
        """Gets the live_active_campaigns of this AccountAnalytics.  # noqa: E501

        Total number of active campaigns in live applications in the account.  # noqa: E501

        :return: The live_active_campaigns of this AccountAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._live_active_campaigns

    @live_active_campaigns.setter
    def live_active_campaigns(self, live_active_campaigns):
        """Sets the live_active_campaigns of this AccountAnalytics.

        Total number of active campaigns in live applications in the account.  # noqa: E501

        :param live_active_campaigns: The live_active_campaigns of this AccountAnalytics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and live_active_campaigns is None:  # noqa: E501
            raise ValueError("Invalid value for `live_active_campaigns`, must not be `None`")  # noqa: E501

        self._live_active_campaigns = live_active_campaigns

    @property
    def coupons(self):
        """Gets the coupons of this AccountAnalytics.  # noqa: E501

        Total number of coupons in the account.  # noqa: E501

        :return: The coupons of this AccountAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._coupons

    @coupons.setter
    def coupons(self, coupons):
        """Sets the coupons of this AccountAnalytics.

        Total number of coupons in the account.  # noqa: E501

        :param coupons: The coupons of this AccountAnalytics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and coupons is None:  # noqa: E501
            raise ValueError("Invalid value for `coupons`, must not be `None`")  # noqa: E501

        self._coupons = coupons

    @property
    def active_coupons(self):
        """Gets the active_coupons of this AccountAnalytics.  # noqa: E501

        Total number of active coupons in the account.  # noqa: E501

        :return: The active_coupons of this AccountAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._active_coupons

    @active_coupons.setter
    def active_coupons(self, active_coupons):
        """Sets the active_coupons of this AccountAnalytics.

        Total number of active coupons in the account.  # noqa: E501

        :param active_coupons: The active_coupons of this AccountAnalytics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and active_coupons is None:  # noqa: E501
            raise ValueError("Invalid value for `active_coupons`, must not be `None`")  # noqa: E501

        self._active_coupons = active_coupons

    @property
    def expired_coupons(self):
        """Gets the expired_coupons of this AccountAnalytics.  # noqa: E501

        Total number of expired coupons in the account.  # noqa: E501

        :return: The expired_coupons of this AccountAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._expired_coupons

    @expired_coupons.setter
    def expired_coupons(self, expired_coupons):
        """Sets the expired_coupons of this AccountAnalytics.

        Total number of expired coupons in the account.  # noqa: E501

        :param expired_coupons: The expired_coupons of this AccountAnalytics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and expired_coupons is None:  # noqa: E501
            raise ValueError("Invalid value for `expired_coupons`, must not be `None`")  # noqa: E501

        self._expired_coupons = expired_coupons

    @property
    def referral_codes(self):
        """Gets the referral_codes of this AccountAnalytics.  # noqa: E501

        Total number of referral codes in the account.  # noqa: E501

        :return: The referral_codes of this AccountAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._referral_codes

    @referral_codes.setter
    def referral_codes(self, referral_codes):
        """Sets the referral_codes of this AccountAnalytics.

        Total number of referral codes in the account.  # noqa: E501

        :param referral_codes: The referral_codes of this AccountAnalytics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and referral_codes is None:  # noqa: E501
            raise ValueError("Invalid value for `referral_codes`, must not be `None`")  # noqa: E501

        self._referral_codes = referral_codes

    @property
    def active_referral_codes(self):
        """Gets the active_referral_codes of this AccountAnalytics.  # noqa: E501

        Total number of active referral codes in the account.  # noqa: E501

        :return: The active_referral_codes of this AccountAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._active_referral_codes

    @active_referral_codes.setter
    def active_referral_codes(self, active_referral_codes):
        """Sets the active_referral_codes of this AccountAnalytics.

        Total number of active referral codes in the account.  # noqa: E501

        :param active_referral_codes: The active_referral_codes of this AccountAnalytics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and active_referral_codes is None:  # noqa: E501
            raise ValueError("Invalid value for `active_referral_codes`, must not be `None`")  # noqa: E501

        self._active_referral_codes = active_referral_codes

    @property
    def expired_referral_codes(self):
        """Gets the expired_referral_codes of this AccountAnalytics.  # noqa: E501

        Total number of expired referral codes in the account.  # noqa: E501

        :return: The expired_referral_codes of this AccountAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._expired_referral_codes

    @expired_referral_codes.setter
    def expired_referral_codes(self, expired_referral_codes):
        """Sets the expired_referral_codes of this AccountAnalytics.

        Total number of expired referral codes in the account.  # noqa: E501

        :param expired_referral_codes: The expired_referral_codes of this AccountAnalytics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and expired_referral_codes is None:  # noqa: E501
            raise ValueError("Invalid value for `expired_referral_codes`, must not be `None`")  # noqa: E501

        self._expired_referral_codes = expired_referral_codes

    @property
    def active_rules(self):
        """Gets the active_rules of this AccountAnalytics.  # noqa: E501

        Total number of active rules in the account.  # noqa: E501

        :return: The active_rules of this AccountAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._active_rules

    @active_rules.setter
    def active_rules(self, active_rules):
        """Sets the active_rules of this AccountAnalytics.

        Total number of active rules in the account.  # noqa: E501

        :param active_rules: The active_rules of this AccountAnalytics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and active_rules is None:  # noqa: E501
            raise ValueError("Invalid value for `active_rules`, must not be `None`")  # noqa: E501

        self._active_rules = active_rules

    @property
    def users(self):
        """Gets the users of this AccountAnalytics.  # noqa: E501

        Total number of users in the account.  # noqa: E501

        :return: The users of this AccountAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this AccountAnalytics.

        Total number of users in the account.  # noqa: E501

        :param users: The users of this AccountAnalytics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and users is None:  # noqa: E501
            raise ValueError("Invalid value for `users`, must not be `None`")  # noqa: E501

        self._users = users

    @property
    def roles(self):
        """Gets the roles of this AccountAnalytics.  # noqa: E501

        Total number of roles in the account.  # noqa: E501

        :return: The roles of this AccountAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this AccountAnalytics.

        Total number of roles in the account.  # noqa: E501

        :param roles: The roles of this AccountAnalytics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and roles is None:  # noqa: E501
            raise ValueError("Invalid value for `roles`, must not be `None`")  # noqa: E501

        self._roles = roles

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this AccountAnalytics.  # noqa: E501

        Total number of custom attributes in the account.  # noqa: E501

        :return: The custom_attributes of this AccountAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this AccountAnalytics.

        Total number of custom attributes in the account.  # noqa: E501

        :param custom_attributes: The custom_attributes of this AccountAnalytics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and custom_attributes is None:  # noqa: E501
            raise ValueError("Invalid value for `custom_attributes`, must not be `None`")  # noqa: E501

        self._custom_attributes = custom_attributes

    @property
    def webhooks(self):
        """Gets the webhooks of this AccountAnalytics.  # noqa: E501

        Total number of webhooks in the account.  # noqa: E501

        :return: The webhooks of this AccountAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._webhooks

    @webhooks.setter
    def webhooks(self, webhooks):
        """Sets the webhooks of this AccountAnalytics.

        Total number of webhooks in the account.  # noqa: E501

        :param webhooks: The webhooks of this AccountAnalytics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and webhooks is None:  # noqa: E501
            raise ValueError("Invalid value for `webhooks`, must not be `None`")  # noqa: E501

        self._webhooks = webhooks

    @property
    def loyalty_programs(self):
        """Gets the loyalty_programs of this AccountAnalytics.  # noqa: E501

        Total number of all loyalty programs in the account.  # noqa: E501

        :return: The loyalty_programs of this AccountAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._loyalty_programs

    @loyalty_programs.setter
    def loyalty_programs(self, loyalty_programs):
        """Sets the loyalty_programs of this AccountAnalytics.

        Total number of all loyalty programs in the account.  # noqa: E501

        :param loyalty_programs: The loyalty_programs of this AccountAnalytics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and loyalty_programs is None:  # noqa: E501
            raise ValueError("Invalid value for `loyalty_programs`, must not be `None`")  # noqa: E501

        self._loyalty_programs = loyalty_programs

    @property
    def live_loyalty_programs(self):
        """Gets the live_loyalty_programs of this AccountAnalytics.  # noqa: E501

        Total number of live loyalty programs in the account.  # noqa: E501

        :return: The live_loyalty_programs of this AccountAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._live_loyalty_programs

    @live_loyalty_programs.setter
    def live_loyalty_programs(self, live_loyalty_programs):
        """Sets the live_loyalty_programs of this AccountAnalytics.

        Total number of live loyalty programs in the account.  # noqa: E501

        :param live_loyalty_programs: The live_loyalty_programs of this AccountAnalytics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and live_loyalty_programs is None:  # noqa: E501
            raise ValueError("Invalid value for `live_loyalty_programs`, must not be `None`")  # noqa: E501

        self._live_loyalty_programs = live_loyalty_programs

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this AccountAnalytics.  # noqa: E501

        The point in time when the analytics numbers were updated last.  # noqa: E501

        :return: The last_updated_at of this AccountAnalytics.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this AccountAnalytics.

        The point in time when the analytics numbers were updated last.  # noqa: E501

        :param last_updated_at: The last_updated_at of this AccountAnalytics.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and last_updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `last_updated_at`, must not be `None`")  # noqa: E501

        self._last_updated_at = last_updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountAnalytics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountAnalytics):
            return True

        return self.to_dict() != other.to_dict()
