# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class AccountAdditionalCost(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'created': 'datetime',
        'account_id': 'int',
        'name': 'str',
        'title': 'str',
        'description': 'str',
        'subscribed_applications_ids': 'list[int]',
        'type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'account_id': 'accountId',
        'name': 'name',
        'title': 'title',
        'description': 'description',
        'subscribed_applications_ids': 'subscribedApplicationsIds',
        'type': 'type'
    }

    def __init__(self, id=None, created=None, account_id=None, name=None, title=None, description=None, subscribed_applications_ids=None, type='session', local_vars_configuration=None):  # noqa: E501
        """AccountAdditionalCost - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._created = None
        self._account_id = None
        self._name = None
        self._title = None
        self._description = None
        self._subscribed_applications_ids = None
        self._type = None
        self.discriminator = None

        self.id = id
        self.created = created
        self.account_id = account_id
        self.name = name
        self.title = title
        self.description = description
        if subscribed_applications_ids is not None:
            self.subscribed_applications_ids = subscribed_applications_ids
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this AccountAdditionalCost.  # noqa: E501

        Internal ID of this entity.  # noqa: E501

        :return: The id of this AccountAdditionalCost.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountAdditionalCost.

        Internal ID of this entity.  # noqa: E501

        :param id: The id of this AccountAdditionalCost.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created(self):
        """Gets the created of this AccountAdditionalCost.  # noqa: E501

        The time this entity was created.  # noqa: E501

        :return: The created of this AccountAdditionalCost.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AccountAdditionalCost.

        The time this entity was created.  # noqa: E501

        :param created: The created of this AccountAdditionalCost.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def account_id(self):
        """Gets the account_id of this AccountAdditionalCost.  # noqa: E501

        The ID of the account that owns this entity.  # noqa: E501

        :return: The account_id of this AccountAdditionalCost.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountAdditionalCost.

        The ID of the account that owns this entity.  # noqa: E501

        :param account_id: The account_id of this AccountAdditionalCost.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and account_id is None:  # noqa: E501
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def name(self):
        """Gets the name of this AccountAdditionalCost.  # noqa: E501

        The internal name used in API requests.  # noqa: E501

        :return: The name of this AccountAdditionalCost.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountAdditionalCost.

        The internal name used in API requests.  # noqa: E501

        :param name: The name of this AccountAdditionalCost.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and not re.search(r'^[A-Za-z]\w*$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z]\w*$/`")  # noqa: E501

        self._name = name

    @property
    def title(self):
        """Gets the title of this AccountAdditionalCost.  # noqa: E501

        The human-readable name for the additional cost that will be shown in the Campaign Manager. Like `name`, the combination of entity and title must also be unique.  # noqa: E501

        :return: The title of this AccountAdditionalCost.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AccountAdditionalCost.

        The human-readable name for the additional cost that will be shown in the Campaign Manager. Like `name`, the combination of entity and title must also be unique.  # noqa: E501

        :param title: The title of this AccountAdditionalCost.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                title is not None and not re.search(r'^[A-Za-z][A-Za-z0-9_.!~*\'() -]*$', title)):  # noqa: E501
            raise ValueError(r"Invalid value for `title`, must be a follow pattern or equal to `/^[A-Za-z][A-Za-z0-9_.!~*'() -]*$/`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this AccountAdditionalCost.  # noqa: E501

        A description of this additional cost.  # noqa: E501

        :return: The description of this AccountAdditionalCost.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccountAdditionalCost.

        A description of this additional cost.  # noqa: E501

        :param description: The description of this AccountAdditionalCost.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def subscribed_applications_ids(self):
        """Gets the subscribed_applications_ids of this AccountAdditionalCost.  # noqa: E501

        A list of the IDs of the applications that are subscribed to this additional cost.  # noqa: E501

        :return: The subscribed_applications_ids of this AccountAdditionalCost.  # noqa: E501
        :rtype: list[int]
        """
        return self._subscribed_applications_ids

    @subscribed_applications_ids.setter
    def subscribed_applications_ids(self, subscribed_applications_ids):
        """Sets the subscribed_applications_ids of this AccountAdditionalCost.

        A list of the IDs of the applications that are subscribed to this additional cost.  # noqa: E501

        :param subscribed_applications_ids: The subscribed_applications_ids of this AccountAdditionalCost.  # noqa: E501
        :type: list[int]
        """

        self._subscribed_applications_ids = subscribed_applications_ids

    @property
    def type(self):
        """Gets the type of this AccountAdditionalCost.  # noqa: E501

        The type of additional cost. Possible value: - `session`: Additional cost will be added per session. - `item`: Additional cost will be added per item. - `both`: Additional cost will be added per item and session.   # noqa: E501

        :return: The type of this AccountAdditionalCost.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccountAdditionalCost.

        The type of additional cost. Possible value: - `session`: Additional cost will be added per session. - `item`: Additional cost will be added per item. - `both`: Additional cost will be added per item and session.   # noqa: E501

        :param type: The type of this AccountAdditionalCost.  # noqa: E501
        :type: str
        """
        allowed_values = ["session", "item", "both"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountAdditionalCost):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountAdditionalCost):
            return True

        return self.to_dict() != other.to_dict()
