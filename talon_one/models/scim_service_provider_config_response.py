# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class ScimServiceProviderConfigResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bulk': 'ScimServiceProviderConfigResponseBulk',
        'change_password': 'ScimServiceProviderConfigResponseChangePassword',
        'documentation_uri': 'str',
        'filter': 'ScimServiceProviderConfigResponseFilter',
        'patch': 'ScimServiceProviderConfigResponsePatch',
        'schemas': 'list[str]',
        'sort': 'ScimServiceProviderConfigResponseSort'
    }

    attribute_map = {
        'bulk': 'bulk',
        'change_password': 'changePassword',
        'documentation_uri': 'documentationUri',
        'filter': 'filter',
        'patch': 'patch',
        'schemas': 'schemas',
        'sort': 'sort'
    }

    def __init__(self, bulk=None, change_password=None, documentation_uri=None, filter=None, patch=None, schemas=None, sort=None, local_vars_configuration=None):  # noqa: E501
        """ScimServiceProviderConfigResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bulk = None
        self._change_password = None
        self._documentation_uri = None
        self._filter = None
        self._patch = None
        self._schemas = None
        self._sort = None
        self.discriminator = None

        if bulk is not None:
            self.bulk = bulk
        if change_password is not None:
            self.change_password = change_password
        if documentation_uri is not None:
            self.documentation_uri = documentation_uri
        if filter is not None:
            self.filter = filter
        if patch is not None:
            self.patch = patch
        if schemas is not None:
            self.schemas = schemas
        if sort is not None:
            self.sort = sort

    @property
    def bulk(self):
        """Gets the bulk of this ScimServiceProviderConfigResponse.  # noqa: E501


        :return: The bulk of this ScimServiceProviderConfigResponse.  # noqa: E501
        :rtype: ScimServiceProviderConfigResponseBulk
        """
        return self._bulk

    @bulk.setter
    def bulk(self, bulk):
        """Sets the bulk of this ScimServiceProviderConfigResponse.


        :param bulk: The bulk of this ScimServiceProviderConfigResponse.  # noqa: E501
        :type: ScimServiceProviderConfigResponseBulk
        """

        self._bulk = bulk

    @property
    def change_password(self):
        """Gets the change_password of this ScimServiceProviderConfigResponse.  # noqa: E501


        :return: The change_password of this ScimServiceProviderConfigResponse.  # noqa: E501
        :rtype: ScimServiceProviderConfigResponseChangePassword
        """
        return self._change_password

    @change_password.setter
    def change_password(self, change_password):
        """Sets the change_password of this ScimServiceProviderConfigResponse.


        :param change_password: The change_password of this ScimServiceProviderConfigResponse.  # noqa: E501
        :type: ScimServiceProviderConfigResponseChangePassword
        """

        self._change_password = change_password

    @property
    def documentation_uri(self):
        """Gets the documentation_uri of this ScimServiceProviderConfigResponse.  # noqa: E501

        The URI that points to the SCIM service provider's documentation, providing further details about the service's capabilities and usage.  # noqa: E501

        :return: The documentation_uri of this ScimServiceProviderConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._documentation_uri

    @documentation_uri.setter
    def documentation_uri(self, documentation_uri):
        """Sets the documentation_uri of this ScimServiceProviderConfigResponse.

        The URI that points to the SCIM service provider's documentation, providing further details about the service's capabilities and usage.  # noqa: E501

        :param documentation_uri: The documentation_uri of this ScimServiceProviderConfigResponse.  # noqa: E501
        :type: str
        """

        self._documentation_uri = documentation_uri

    @property
    def filter(self):
        """Gets the filter of this ScimServiceProviderConfigResponse.  # noqa: E501


        :return: The filter of this ScimServiceProviderConfigResponse.  # noqa: E501
        :rtype: ScimServiceProviderConfigResponseFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ScimServiceProviderConfigResponse.


        :param filter: The filter of this ScimServiceProviderConfigResponse.  # noqa: E501
        :type: ScimServiceProviderConfigResponseFilter
        """

        self._filter = filter

    @property
    def patch(self):
        """Gets the patch of this ScimServiceProviderConfigResponse.  # noqa: E501


        :return: The patch of this ScimServiceProviderConfigResponse.  # noqa: E501
        :rtype: ScimServiceProviderConfigResponsePatch
        """
        return self._patch

    @patch.setter
    def patch(self, patch):
        """Sets the patch of this ScimServiceProviderConfigResponse.


        :param patch: The patch of this ScimServiceProviderConfigResponse.  # noqa: E501
        :type: ScimServiceProviderConfigResponsePatch
        """

        self._patch = patch

    @property
    def schemas(self):
        """Gets the schemas of this ScimServiceProviderConfigResponse.  # noqa: E501

        A list of SCIM schemas that define the structure and data types supported by the service provider.  # noqa: E501

        :return: The schemas of this ScimServiceProviderConfigResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._schemas

    @schemas.setter
    def schemas(self, schemas):
        """Sets the schemas of this ScimServiceProviderConfigResponse.

        A list of SCIM schemas that define the structure and data types supported by the service provider.  # noqa: E501

        :param schemas: The schemas of this ScimServiceProviderConfigResponse.  # noqa: E501
        :type: list[str]
        """

        self._schemas = schemas

    @property
    def sort(self):
        """Gets the sort of this ScimServiceProviderConfigResponse.  # noqa: E501


        :return: The sort of this ScimServiceProviderConfigResponse.  # noqa: E501
        :rtype: ScimServiceProviderConfigResponseSort
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this ScimServiceProviderConfigResponse.


        :param sort: The sort of this ScimServiceProviderConfigResponse.  # noqa: E501
        :type: ScimServiceProviderConfigResponseSort
        """

        self._sort = sort

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScimServiceProviderConfigResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScimServiceProviderConfigResponse):
            return True

        return self.to_dict() != other.to_dict()
