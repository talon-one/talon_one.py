# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class ApplicationCampaignAnalytics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'start_time': 'datetime',
        'end_time': 'datetime',
        'campaign_id': 'int',
        'campaign_name': 'str',
        'campaign_tags': 'list[str]',
        'campaign_state': 'str',
        'campaign_active_ruleset_id': 'int',
        'campaign_start_time': 'datetime',
        'campaign_end_time': 'datetime',
        'total_revenue': 'ApplicationCampaignAnalyticsTotalRevenue',
        'sessions_count': 'ApplicationCampaignAnalyticsSessionsCount',
        'avg_items_per_session': 'ApplicationCampaignAnalyticsAvgItemsPerSession',
        'avg_session_value': 'ApplicationCampaignAnalyticsAvgSessionValue',
        'total_discounts': 'ApplicationCampaignAnalyticsTotalDiscounts',
        'coupons_count': 'ApplicationCampaignAnalyticsCouponsCount'
    }

    attribute_map = {
        'start_time': 'startTime',
        'end_time': 'endTime',
        'campaign_id': 'campaignId',
        'campaign_name': 'campaignName',
        'campaign_tags': 'campaignTags',
        'campaign_state': 'campaignState',
        'campaign_active_ruleset_id': 'campaignActiveRulesetId',
        'campaign_start_time': 'campaignStartTime',
        'campaign_end_time': 'campaignEndTime',
        'total_revenue': 'totalRevenue',
        'sessions_count': 'sessionsCount',
        'avg_items_per_session': 'avgItemsPerSession',
        'avg_session_value': 'avgSessionValue',
        'total_discounts': 'totalDiscounts',
        'coupons_count': 'couponsCount'
    }

    def __init__(self, start_time=None, end_time=None, campaign_id=None, campaign_name=None, campaign_tags=None, campaign_state='enabled', campaign_active_ruleset_id=None, campaign_start_time=None, campaign_end_time=None, total_revenue=None, sessions_count=None, avg_items_per_session=None, avg_session_value=None, total_discounts=None, coupons_count=None, local_vars_configuration=None):  # noqa: E501
        """ApplicationCampaignAnalytics - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._start_time = None
        self._end_time = None
        self._campaign_id = None
        self._campaign_name = None
        self._campaign_tags = None
        self._campaign_state = None
        self._campaign_active_ruleset_id = None
        self._campaign_start_time = None
        self._campaign_end_time = None
        self._total_revenue = None
        self._sessions_count = None
        self._avg_items_per_session = None
        self._avg_session_value = None
        self._total_discounts = None
        self._coupons_count = None
        self.discriminator = None

        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if campaign_id is not None:
            self.campaign_id = campaign_id
        if campaign_name is not None:
            self.campaign_name = campaign_name
        if campaign_tags is not None:
            self.campaign_tags = campaign_tags
        if campaign_state is not None:
            self.campaign_state = campaign_state
        if campaign_active_ruleset_id is not None:
            self.campaign_active_ruleset_id = campaign_active_ruleset_id
        if campaign_start_time is not None:
            self.campaign_start_time = campaign_start_time
        if campaign_end_time is not None:
            self.campaign_end_time = campaign_end_time
        if total_revenue is not None:
            self.total_revenue = total_revenue
        if sessions_count is not None:
            self.sessions_count = sessions_count
        if avg_items_per_session is not None:
            self.avg_items_per_session = avg_items_per_session
        if avg_session_value is not None:
            self.avg_session_value = avg_session_value
        if total_discounts is not None:
            self.total_discounts = total_discounts
        if coupons_count is not None:
            self.coupons_count = coupons_count

    @property
    def start_time(self):
        """Gets the start_time of this ApplicationCampaignAnalytics.  # noqa: E501

        The start of the aggregation time frame in UTC.  # noqa: E501

        :return: The start_time of this ApplicationCampaignAnalytics.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ApplicationCampaignAnalytics.

        The start of the aggregation time frame in UTC.  # noqa: E501

        :param start_time: The start_time of this ApplicationCampaignAnalytics.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this ApplicationCampaignAnalytics.  # noqa: E501

        The end of the aggregation time frame in UTC.  # noqa: E501

        :return: The end_time of this ApplicationCampaignAnalytics.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ApplicationCampaignAnalytics.

        The end of the aggregation time frame in UTC.  # noqa: E501

        :param end_time: The end_time of this ApplicationCampaignAnalytics.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def campaign_id(self):
        """Gets the campaign_id of this ApplicationCampaignAnalytics.  # noqa: E501

        The ID of the campaign.  # noqa: E501

        :return: The campaign_id of this ApplicationCampaignAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this ApplicationCampaignAnalytics.

        The ID of the campaign.  # noqa: E501

        :param campaign_id: The campaign_id of this ApplicationCampaignAnalytics.  # noqa: E501
        :type: int
        """

        self._campaign_id = campaign_id

    @property
    def campaign_name(self):
        """Gets the campaign_name of this ApplicationCampaignAnalytics.  # noqa: E501

        The name of the campaign.  # noqa: E501

        :return: The campaign_name of this ApplicationCampaignAnalytics.  # noqa: E501
        :rtype: str
        """
        return self._campaign_name

    @campaign_name.setter
    def campaign_name(self, campaign_name):
        """Sets the campaign_name of this ApplicationCampaignAnalytics.

        The name of the campaign.  # noqa: E501

        :param campaign_name: The campaign_name of this ApplicationCampaignAnalytics.  # noqa: E501
        :type: str
        """

        self._campaign_name = campaign_name

    @property
    def campaign_tags(self):
        """Gets the campaign_tags of this ApplicationCampaignAnalytics.  # noqa: E501

        A list of tags for the campaign.  # noqa: E501

        :return: The campaign_tags of this ApplicationCampaignAnalytics.  # noqa: E501
        :rtype: list[str]
        """
        return self._campaign_tags

    @campaign_tags.setter
    def campaign_tags(self, campaign_tags):
        """Sets the campaign_tags of this ApplicationCampaignAnalytics.

        A list of tags for the campaign.  # noqa: E501

        :param campaign_tags: The campaign_tags of this ApplicationCampaignAnalytics.  # noqa: E501
        :type: list[str]
        """

        self._campaign_tags = campaign_tags

    @property
    def campaign_state(self):
        """Gets the campaign_state of this ApplicationCampaignAnalytics.  # noqa: E501

        The state of the campaign.  **Note:** A disabled or archived campaign is not evaluated for rules or coupons.   # noqa: E501

        :return: The campaign_state of this ApplicationCampaignAnalytics.  # noqa: E501
        :rtype: str
        """
        return self._campaign_state

    @campaign_state.setter
    def campaign_state(self, campaign_state):
        """Sets the campaign_state of this ApplicationCampaignAnalytics.

        The state of the campaign.  **Note:** A disabled or archived campaign is not evaluated for rules or coupons.   # noqa: E501

        :param campaign_state: The campaign_state of this ApplicationCampaignAnalytics.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled", "archived"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and campaign_state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `campaign_state` ({0}), must be one of {1}"  # noqa: E501
                .format(campaign_state, allowed_values)
            )

        self._campaign_state = campaign_state

    @property
    def campaign_active_ruleset_id(self):
        """Gets the campaign_active_ruleset_id of this ApplicationCampaignAnalytics.  # noqa: E501

        The [ID of the ruleset](https://docs.talon.one/management-api#operation/getRulesets) this campaign applies on customer session evaluation.   # noqa: E501

        :return: The campaign_active_ruleset_id of this ApplicationCampaignAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._campaign_active_ruleset_id

    @campaign_active_ruleset_id.setter
    def campaign_active_ruleset_id(self, campaign_active_ruleset_id):
        """Sets the campaign_active_ruleset_id of this ApplicationCampaignAnalytics.

        The [ID of the ruleset](https://docs.talon.one/management-api#operation/getRulesets) this campaign applies on customer session evaluation.   # noqa: E501

        :param campaign_active_ruleset_id: The campaign_active_ruleset_id of this ApplicationCampaignAnalytics.  # noqa: E501
        :type: int
        """

        self._campaign_active_ruleset_id = campaign_active_ruleset_id

    @property
    def campaign_start_time(self):
        """Gets the campaign_start_time of this ApplicationCampaignAnalytics.  # noqa: E501

        Date and time when the campaign becomes active.  # noqa: E501

        :return: The campaign_start_time of this ApplicationCampaignAnalytics.  # noqa: E501
        :rtype: datetime
        """
        return self._campaign_start_time

    @campaign_start_time.setter
    def campaign_start_time(self, campaign_start_time):
        """Sets the campaign_start_time of this ApplicationCampaignAnalytics.

        Date and time when the campaign becomes active.  # noqa: E501

        :param campaign_start_time: The campaign_start_time of this ApplicationCampaignAnalytics.  # noqa: E501
        :type: datetime
        """

        self._campaign_start_time = campaign_start_time

    @property
    def campaign_end_time(self):
        """Gets the campaign_end_time of this ApplicationCampaignAnalytics.  # noqa: E501

        Date and time when the campaign becomes inactive.  # noqa: E501

        :return: The campaign_end_time of this ApplicationCampaignAnalytics.  # noqa: E501
        :rtype: datetime
        """
        return self._campaign_end_time

    @campaign_end_time.setter
    def campaign_end_time(self, campaign_end_time):
        """Sets the campaign_end_time of this ApplicationCampaignAnalytics.

        Date and time when the campaign becomes inactive.  # noqa: E501

        :param campaign_end_time: The campaign_end_time of this ApplicationCampaignAnalytics.  # noqa: E501
        :type: datetime
        """

        self._campaign_end_time = campaign_end_time

    @property
    def total_revenue(self):
        """Gets the total_revenue of this ApplicationCampaignAnalytics.  # noqa: E501


        :return: The total_revenue of this ApplicationCampaignAnalytics.  # noqa: E501
        :rtype: ApplicationCampaignAnalyticsTotalRevenue
        """
        return self._total_revenue

    @total_revenue.setter
    def total_revenue(self, total_revenue):
        """Sets the total_revenue of this ApplicationCampaignAnalytics.


        :param total_revenue: The total_revenue of this ApplicationCampaignAnalytics.  # noqa: E501
        :type: ApplicationCampaignAnalyticsTotalRevenue
        """

        self._total_revenue = total_revenue

    @property
    def sessions_count(self):
        """Gets the sessions_count of this ApplicationCampaignAnalytics.  # noqa: E501


        :return: The sessions_count of this ApplicationCampaignAnalytics.  # noqa: E501
        :rtype: ApplicationCampaignAnalyticsSessionsCount
        """
        return self._sessions_count

    @sessions_count.setter
    def sessions_count(self, sessions_count):
        """Sets the sessions_count of this ApplicationCampaignAnalytics.


        :param sessions_count: The sessions_count of this ApplicationCampaignAnalytics.  # noqa: E501
        :type: ApplicationCampaignAnalyticsSessionsCount
        """

        self._sessions_count = sessions_count

    @property
    def avg_items_per_session(self):
        """Gets the avg_items_per_session of this ApplicationCampaignAnalytics.  # noqa: E501


        :return: The avg_items_per_session of this ApplicationCampaignAnalytics.  # noqa: E501
        :rtype: ApplicationCampaignAnalyticsAvgItemsPerSession
        """
        return self._avg_items_per_session

    @avg_items_per_session.setter
    def avg_items_per_session(self, avg_items_per_session):
        """Sets the avg_items_per_session of this ApplicationCampaignAnalytics.


        :param avg_items_per_session: The avg_items_per_session of this ApplicationCampaignAnalytics.  # noqa: E501
        :type: ApplicationCampaignAnalyticsAvgItemsPerSession
        """

        self._avg_items_per_session = avg_items_per_session

    @property
    def avg_session_value(self):
        """Gets the avg_session_value of this ApplicationCampaignAnalytics.  # noqa: E501


        :return: The avg_session_value of this ApplicationCampaignAnalytics.  # noqa: E501
        :rtype: ApplicationCampaignAnalyticsAvgSessionValue
        """
        return self._avg_session_value

    @avg_session_value.setter
    def avg_session_value(self, avg_session_value):
        """Sets the avg_session_value of this ApplicationCampaignAnalytics.


        :param avg_session_value: The avg_session_value of this ApplicationCampaignAnalytics.  # noqa: E501
        :type: ApplicationCampaignAnalyticsAvgSessionValue
        """

        self._avg_session_value = avg_session_value

    @property
    def total_discounts(self):
        """Gets the total_discounts of this ApplicationCampaignAnalytics.  # noqa: E501


        :return: The total_discounts of this ApplicationCampaignAnalytics.  # noqa: E501
        :rtype: ApplicationCampaignAnalyticsTotalDiscounts
        """
        return self._total_discounts

    @total_discounts.setter
    def total_discounts(self, total_discounts):
        """Sets the total_discounts of this ApplicationCampaignAnalytics.


        :param total_discounts: The total_discounts of this ApplicationCampaignAnalytics.  # noqa: E501
        :type: ApplicationCampaignAnalyticsTotalDiscounts
        """

        self._total_discounts = total_discounts

    @property
    def coupons_count(self):
        """Gets the coupons_count of this ApplicationCampaignAnalytics.  # noqa: E501


        :return: The coupons_count of this ApplicationCampaignAnalytics.  # noqa: E501
        :rtype: ApplicationCampaignAnalyticsCouponsCount
        """
        return self._coupons_count

    @coupons_count.setter
    def coupons_count(self, coupons_count):
        """Sets the coupons_count of this ApplicationCampaignAnalytics.


        :param coupons_count: The coupons_count of this ApplicationCampaignAnalytics.  # noqa: E501
        :type: ApplicationCampaignAnalyticsCouponsCount
        """

        self._coupons_count = coupons_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationCampaignAnalytics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationCampaignAnalytics):
            return True

        return self.to_dict() != other.to_dict()
