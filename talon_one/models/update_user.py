# coding: utf-8

"""
    Talon.One API

    The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdateUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'name': 'str',
        'password': 'str',
        'new_password': 'str',
        'policy': 'str',
        'state': 'str',
        'release_update': 'bool',
        'latest_feature': 'str',
        'roles': 'list[int]',
        'application_notification_subscriptions': 'object'
    }

    attribute_map = {
        'email': 'email',
        'name': 'name',
        'password': 'password',
        'new_password': 'newPassword',
        'policy': 'policy',
        'state': 'state',
        'release_update': 'releaseUpdate',
        'latest_feature': 'latestFeature',
        'roles': 'roles',
        'application_notification_subscriptions': 'applicationNotificationSubscriptions'
    }

    def __init__(self, email=None, name=None, password=None, new_password=None, policy=None, state=None, release_update=None, latest_feature=None, roles=None, application_notification_subscriptions=None):  # noqa: E501
        """UpdateUser - a model defined in Swagger"""  # noqa: E501

        self._email = None
        self._name = None
        self._password = None
        self._new_password = None
        self._policy = None
        self._state = None
        self._release_update = None
        self._latest_feature = None
        self._roles = None
        self._application_notification_subscriptions = None
        self.discriminator = None

        self.email = email
        if name is not None:
            self.name = name
        if password is not None:
            self.password = password
        if new_password is not None:
            self.new_password = new_password
        if policy is not None:
            self.policy = policy
        if state is not None:
            self.state = state
        if release_update is not None:
            self.release_update = release_update
        if latest_feature is not None:
            self.latest_feature = latest_feature
        if roles is not None:
            self.roles = roles
        if application_notification_subscriptions is not None:
            self.application_notification_subscriptions = application_notification_subscriptions

    @property
    def email(self):
        """Gets the email of this UpdateUser.  # noqa: E501

        The email address associated with your account.  # noqa: E501

        :return: The email of this UpdateUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UpdateUser.

        The email address associated with your account.  # noqa: E501

        :param email: The email of this UpdateUser.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def name(self):
        """Gets the name of this UpdateUser.  # noqa: E501

        Your name.  # noqa: E501

        :return: The name of this UpdateUser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateUser.

        Your name.  # noqa: E501

        :param name: The name of this UpdateUser.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this UpdateUser.  # noqa: E501

        Your old password.  # noqa: E501

        :return: The password of this UpdateUser.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UpdateUser.

        Your old password.  # noqa: E501

        :param password: The password of this UpdateUser.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def new_password(self):
        """Gets the new_password of this UpdateUser.  # noqa: E501

        Your new password.  # noqa: E501

        :return: The new_password of this UpdateUser.  # noqa: E501
        :rtype: str
        """
        return self._new_password

    @new_password.setter
    def new_password(self, new_password):
        """Sets the new_password of this UpdateUser.

        Your new password.  # noqa: E501

        :param new_password: The new_password of this UpdateUser.  # noqa: E501
        :type: str
        """

        self._new_password = new_password

    @property
    def policy(self):
        """Gets the policy of this UpdateUser.  # noqa: E501

        a blob of acl json  # noqa: E501

        :return: The policy of this UpdateUser.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this UpdateUser.

        a blob of acl json  # noqa: E501

        :param policy: The policy of this UpdateUser.  # noqa: E501
        :type: str
        """

        self._policy = policy

    @property
    def state(self):
        """Gets the state of this UpdateUser.  # noqa: E501

        New state (\"deactivated\" or \"active\") for the user. Only usable by admins for the user.  # noqa: E501

        :return: The state of this UpdateUser.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this UpdateUser.

        New state (\"deactivated\" or \"active\") for the user. Only usable by admins for the user.  # noqa: E501

        :param state: The state of this UpdateUser.  # noqa: E501
        :type: str
        """
        allowed_values = ["deactivated", "active"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def release_update(self):
        """Gets the release_update of this UpdateUser.  # noqa: E501

        Update the user via email  # noqa: E501

        :return: The release_update of this UpdateUser.  # noqa: E501
        :rtype: bool
        """
        return self._release_update

    @release_update.setter
    def release_update(self, release_update):
        """Sets the release_update of this UpdateUser.

        Update the user via email  # noqa: E501

        :param release_update: The release_update of this UpdateUser.  # noqa: E501
        :type: bool
        """

        self._release_update = release_update

    @property
    def latest_feature(self):
        """Gets the latest_feature of this UpdateUser.  # noqa: E501

        The latest feature you've been notified.  # noqa: E501

        :return: The latest_feature of this UpdateUser.  # noqa: E501
        :rtype: str
        """
        return self._latest_feature

    @latest_feature.setter
    def latest_feature(self, latest_feature):
        """Sets the latest_feature of this UpdateUser.

        The latest feature you've been notified.  # noqa: E501

        :param latest_feature: The latest_feature of this UpdateUser.  # noqa: E501
        :type: str
        """

        self._latest_feature = latest_feature

    @property
    def roles(self):
        """Gets the roles of this UpdateUser.  # noqa: E501

        Update  # noqa: E501

        :return: The roles of this UpdateUser.  # noqa: E501
        :rtype: list[int]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this UpdateUser.

        Update  # noqa: E501

        :param roles: The roles of this UpdateUser.  # noqa: E501
        :type: list[int]
        """

        self._roles = roles

    @property
    def application_notification_subscriptions(self):
        """Gets the application_notification_subscriptions of this UpdateUser.  # noqa: E501


        :return: The application_notification_subscriptions of this UpdateUser.  # noqa: E501
        :rtype: object
        """
        return self._application_notification_subscriptions

    @application_notification_subscriptions.setter
    def application_notification_subscriptions(self, application_notification_subscriptions):
        """Sets the application_notification_subscriptions of this UpdateUser.


        :param application_notification_subscriptions: The application_notification_subscriptions of this UpdateUser.  # noqa: E501
        :type: object
        """

        self._application_notification_subscriptions = application_notification_subscriptions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
