# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class StrikethroughTrigger(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'type': 'str',
        'triggered_at': 'datetime',
        'total_affected_items': 'int',
        'payload': 'object'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'triggered_at': 'triggeredAt',
        'total_affected_items': 'totalAffectedItems',
        'payload': 'payload'
    }

    def __init__(self, id=None, type=None, triggered_at=None, total_affected_items=None, payload=None, local_vars_configuration=None):  # noqa: E501
        """StrikethroughTrigger - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._type = None
        self._triggered_at = None
        self._total_affected_items = None
        self._payload = None
        self.discriminator = None

        self.id = id
        self.type = type
        self.triggered_at = triggered_at
        self.total_affected_items = total_affected_items
        self.payload = payload

    @property
    def id(self):
        """Gets the id of this StrikethroughTrigger.  # noqa: E501

        The ID of the event that triggered the strikethrough labeling.  # noqa: E501

        :return: The id of this StrikethroughTrigger.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StrikethroughTrigger.

        The ID of the event that triggered the strikethrough labeling.  # noqa: E501

        :param id: The id of this StrikethroughTrigger.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this StrikethroughTrigger.  # noqa: E501

        The type of event that triggered the strikethrough labeling.  # noqa: E501

        :return: The type of this StrikethroughTrigger.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StrikethroughTrigger.

        The type of event that triggered the strikethrough labeling.  # noqa: E501

        :param type: The type of this StrikethroughTrigger.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def triggered_at(self):
        """Gets the triggered_at of this StrikethroughTrigger.  # noqa: E501

        The creation time of the event that triggered the strikethrough labeling.  # noqa: E501

        :return: The triggered_at of this StrikethroughTrigger.  # noqa: E501
        :rtype: datetime
        """
        return self._triggered_at

    @triggered_at.setter
    def triggered_at(self, triggered_at):
        """Sets the triggered_at of this StrikethroughTrigger.

        The creation time of the event that triggered the strikethrough labeling.  # noqa: E501

        :param triggered_at: The triggered_at of this StrikethroughTrigger.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and triggered_at is None:  # noqa: E501
            raise ValueError("Invalid value for `triggered_at`, must not be `None`")  # noqa: E501

        self._triggered_at = triggered_at

    @property
    def total_affected_items(self):
        """Gets the total_affected_items of this StrikethroughTrigger.  # noqa: E501

        The total number of items affected by the event that triggered the strikethrough labeling.  # noqa: E501

        :return: The total_affected_items of this StrikethroughTrigger.  # noqa: E501
        :rtype: int
        """
        return self._total_affected_items

    @total_affected_items.setter
    def total_affected_items(self, total_affected_items):
        """Sets the total_affected_items of this StrikethroughTrigger.

        The total number of items affected by the event that triggered the strikethrough labeling.  # noqa: E501

        :param total_affected_items: The total_affected_items of this StrikethroughTrigger.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and total_affected_items is None:  # noqa: E501
            raise ValueError("Invalid value for `total_affected_items`, must not be `None`")  # noqa: E501

        self._total_affected_items = total_affected_items

    @property
    def payload(self):
        """Gets the payload of this StrikethroughTrigger.  # noqa: E501

        The arbitrary properties associated with this trigger type.  # noqa: E501

        :return: The payload of this StrikethroughTrigger.  # noqa: E501
        :rtype: object
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this StrikethroughTrigger.

        The arbitrary properties associated with this trigger type.  # noqa: E501

        :param payload: The payload of this StrikethroughTrigger.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and payload is None:  # noqa: E501
            raise ValueError("Invalid value for `payload`, must not be `None`")  # noqa: E501

        self._payload = payload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StrikethroughTrigger):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StrikethroughTrigger):
            return True

        return self.to_dict() != other.to_dict()
