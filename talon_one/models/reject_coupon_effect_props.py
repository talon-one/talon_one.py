# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class RejectCouponEffectProps(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'value': 'str',
        'rejection_reason': 'str',
        'condition_index': 'int',
        'effect_index': 'int',
        'details': 'str',
        'campaign_exclusion_reason': 'str'
    }

    attribute_map = {
        'value': 'value',
        'rejection_reason': 'rejectionReason',
        'condition_index': 'conditionIndex',
        'effect_index': 'effectIndex',
        'details': 'details',
        'campaign_exclusion_reason': 'campaignExclusionReason'
    }

    def __init__(self, value=None, rejection_reason=None, condition_index=None, effect_index=None, details=None, campaign_exclusion_reason=None, local_vars_configuration=None):  # noqa: E501
        """RejectCouponEffectProps - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._value = None
        self._rejection_reason = None
        self._condition_index = None
        self._effect_index = None
        self._details = None
        self._campaign_exclusion_reason = None
        self.discriminator = None

        self.value = value
        self.rejection_reason = rejection_reason
        if condition_index is not None:
            self.condition_index = condition_index
        if effect_index is not None:
            self.effect_index = effect_index
        if details is not None:
            self.details = details
        if campaign_exclusion_reason is not None:
            self.campaign_exclusion_reason = campaign_exclusion_reason

    @property
    def value(self):
        """Gets the value of this RejectCouponEffectProps.  # noqa: E501

        The coupon code that was rejected.  # noqa: E501

        :return: The value of this RejectCouponEffectProps.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RejectCouponEffectProps.

        The coupon code that was rejected.  # noqa: E501

        :param value: The value of this RejectCouponEffectProps.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and value is None:  # noqa: E501
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def rejection_reason(self):
        """Gets the rejection_reason of this RejectCouponEffectProps.  # noqa: E501

        The reason why this coupon was rejected.  # noqa: E501

        :return: The rejection_reason of this RejectCouponEffectProps.  # noqa: E501
        :rtype: str
        """
        return self._rejection_reason

    @rejection_reason.setter
    def rejection_reason(self, rejection_reason):
        """Sets the rejection_reason of this RejectCouponEffectProps.

        The reason why this coupon was rejected.  # noqa: E501

        :param rejection_reason: The rejection_reason of this RejectCouponEffectProps.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and rejection_reason is None:  # noqa: E501
            raise ValueError("Invalid value for `rejection_reason`, must not be `None`")  # noqa: E501

        self._rejection_reason = rejection_reason

    @property
    def condition_index(self):
        """Gets the condition_index of this RejectCouponEffectProps.  # noqa: E501

        The index of the condition that caused the rejection of the coupon.  # noqa: E501

        :return: The condition_index of this RejectCouponEffectProps.  # noqa: E501
        :rtype: int
        """
        return self._condition_index

    @condition_index.setter
    def condition_index(self, condition_index):
        """Sets the condition_index of this RejectCouponEffectProps.

        The index of the condition that caused the rejection of the coupon.  # noqa: E501

        :param condition_index: The condition_index of this RejectCouponEffectProps.  # noqa: E501
        :type: int
        """

        self._condition_index = condition_index

    @property
    def effect_index(self):
        """Gets the effect_index of this RejectCouponEffectProps.  # noqa: E501

        The index of the effect that caused the rejection of the coupon.  # noqa: E501

        :return: The effect_index of this RejectCouponEffectProps.  # noqa: E501
        :rtype: int
        """
        return self._effect_index

    @effect_index.setter
    def effect_index(self, effect_index):
        """Sets the effect_index of this RejectCouponEffectProps.

        The index of the effect that caused the rejection of the coupon.  # noqa: E501

        :param effect_index: The effect_index of this RejectCouponEffectProps.  # noqa: E501
        :type: int
        """

        self._effect_index = effect_index

    @property
    def details(self):
        """Gets the details of this RejectCouponEffectProps.  # noqa: E501

        More details about the failure.  # noqa: E501

        :return: The details of this RejectCouponEffectProps.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this RejectCouponEffectProps.

        More details about the failure.  # noqa: E501

        :param details: The details of this RejectCouponEffectProps.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def campaign_exclusion_reason(self):
        """Gets the campaign_exclusion_reason of this RejectCouponEffectProps.  # noqa: E501

        The reason why the campaign was not applied.  # noqa: E501

        :return: The campaign_exclusion_reason of this RejectCouponEffectProps.  # noqa: E501
        :rtype: str
        """
        return self._campaign_exclusion_reason

    @campaign_exclusion_reason.setter
    def campaign_exclusion_reason(self, campaign_exclusion_reason):
        """Sets the campaign_exclusion_reason of this RejectCouponEffectProps.

        The reason why the campaign was not applied.  # noqa: E501

        :param campaign_exclusion_reason: The campaign_exclusion_reason of this RejectCouponEffectProps.  # noqa: E501
        :type: str
        """

        self._campaign_exclusion_reason = campaign_exclusion_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RejectCouponEffectProps):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RejectCouponEffectProps):
            return True

        return self.to_dict() != other.to_dict()
