# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class Store(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'created': 'datetime',
        'name': 'str',
        'description': 'str',
        'attributes': 'object',
        'integration_id': 'str',
        'application_id': 'int',
        'updated': 'datetime',
        'linked_campaign_ids': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'name': 'name',
        'description': 'description',
        'attributes': 'attributes',
        'integration_id': 'integrationId',
        'application_id': 'applicationId',
        'updated': 'updated',
        'linked_campaign_ids': 'linkedCampaignIds'
    }

    def __init__(self, id=None, created=None, name=None, description=None, attributes=None, integration_id=None, application_id=None, updated=None, linked_campaign_ids=None, local_vars_configuration=None):  # noqa: E501
        """Store - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._created = None
        self._name = None
        self._description = None
        self._attributes = None
        self._integration_id = None
        self._application_id = None
        self._updated = None
        self._linked_campaign_ids = None
        self.discriminator = None

        self.id = id
        self.created = created
        self.name = name
        self.description = description
        if attributes is not None:
            self.attributes = attributes
        self.integration_id = integration_id
        self.application_id = application_id
        self.updated = updated
        if linked_campaign_ids is not None:
            self.linked_campaign_ids = linked_campaign_ids

    @property
    def id(self):
        """Gets the id of this Store.  # noqa: E501

        Internal ID of this entity.  # noqa: E501

        :return: The id of this Store.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Store.

        Internal ID of this entity.  # noqa: E501

        :param id: The id of this Store.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created(self):
        """Gets the created of this Store.  # noqa: E501

        The time this entity was created. The time this entity was created.  # noqa: E501

        :return: The created of this Store.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Store.

        The time this entity was created. The time this entity was created.  # noqa: E501

        :param created: The created of this Store.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def name(self):
        """Gets the name of this Store.  # noqa: E501

        The name of the store.  # noqa: E501

        :return: The name of this Store.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Store.

        The name of the store.  # noqa: E501

        :param name: The name of this Store.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Store.  # noqa: E501

        The description of the store.  # noqa: E501

        :return: The description of this Store.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Store.

        The description of the store.  # noqa: E501

        :param description: The description of this Store.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def attributes(self):
        """Gets the attributes of this Store.  # noqa: E501

        The attributes of the store.  # noqa: E501

        :return: The attributes of this Store.  # noqa: E501
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Store.

        The attributes of the store.  # noqa: E501

        :param attributes: The attributes of this Store.  # noqa: E501
        :type: object
        """

        self._attributes = attributes

    @property
    def integration_id(self):
        """Gets the integration_id of this Store.  # noqa: E501

        The integration ID of the store. You choose this ID when you create a store.  **Note**: You cannot edit the `integrationId` after the store has been created.   # noqa: E501

        :return: The integration_id of this Store.  # noqa: E501
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this Store.

        The integration ID of the store. You choose this ID when you create a store.  **Note**: You cannot edit the `integrationId` after the store has been created.   # noqa: E501

        :param integration_id: The integration_id of this Store.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and integration_id is None:  # noqa: E501
            raise ValueError("Invalid value for `integration_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                integration_id is not None and len(integration_id) > 1000):
            raise ValueError("Invalid value for `integration_id`, length must be less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                integration_id is not None and len(integration_id) < 1):
            raise ValueError("Invalid value for `integration_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._integration_id = integration_id

    @property
    def application_id(self):
        """Gets the application_id of this Store.  # noqa: E501

        The ID of the application that owns this entity.  # noqa: E501

        :return: The application_id of this Store.  # noqa: E501
        :rtype: int
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this Store.

        The ID of the application that owns this entity.  # noqa: E501

        :param application_id: The application_id of this Store.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and application_id is None:  # noqa: E501
            raise ValueError("Invalid value for `application_id`, must not be `None`")  # noqa: E501

        self._application_id = application_id

    @property
    def updated(self):
        """Gets the updated of this Store.  # noqa: E501

        Timestamp of the most recent update on this entity.  # noqa: E501

        :return: The updated of this Store.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Store.

        Timestamp of the most recent update on this entity.  # noqa: E501

        :param updated: The updated of this Store.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated is None:  # noqa: E501
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    @property
    def linked_campaign_ids(self):
        """Gets the linked_campaign_ids of this Store.  # noqa: E501

        A list of IDs of the campaigns that are linked with current store.  # noqa: E501

        :return: The linked_campaign_ids of this Store.  # noqa: E501
        :rtype: list[int]
        """
        return self._linked_campaign_ids

    @linked_campaign_ids.setter
    def linked_campaign_ids(self, linked_campaign_ids):
        """Sets the linked_campaign_ids of this Store.

        A list of IDs of the campaigns that are linked with current store.  # noqa: E501

        :param linked_campaign_ids: The linked_campaign_ids of this Store.  # noqa: E501
        :type: list[int]
        """

        self._linked_campaign_ids = linked_campaign_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Store):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Store):
            return True

        return self.to_dict() != other.to_dict()
