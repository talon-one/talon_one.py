# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class NewExternalInvitation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'user_groups': 'list[str]',
        'email': 'str'
    }

    attribute_map = {
        'name': 'name',
        'user_groups': 'userGroups',
        'email': 'email'
    }

    def __init__(self, name=None, user_groups=None, email=None, local_vars_configuration=None):  # noqa: E501
        """NewExternalInvitation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._user_groups = None
        self._email = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if user_groups is not None:
            self.user_groups = user_groups
        self.email = email

    @property
    def name(self):
        """Gets the name of this NewExternalInvitation.  # noqa: E501

        Name of the user.  # noqa: E501

        :return: The name of this NewExternalInvitation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewExternalInvitation.

        Name of the user.  # noqa: E501

        :param name: The name of this NewExternalInvitation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def user_groups(self):
        """Gets the user_groups of this NewExternalInvitation.  # noqa: E501

        List of user groups in the external identity provider.  If there are roles in Talon.One whose names match these user groups, those roles will be automatically assigned to the user upon invitation.   # noqa: E501

        :return: The user_groups of this NewExternalInvitation.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_groups

    @user_groups.setter
    def user_groups(self, user_groups):
        """Sets the user_groups of this NewExternalInvitation.

        List of user groups in the external identity provider.  If there are roles in Talon.One whose names match these user groups, those roles will be automatically assigned to the user upon invitation.   # noqa: E501

        :param user_groups: The user_groups of this NewExternalInvitation.  # noqa: E501
        :type: list[str]
        """

        self._user_groups = user_groups

    @property
    def email(self):
        """Gets the email of this NewExternalInvitation.  # noqa: E501

        Email address of the user.  # noqa: E501

        :return: The email of this NewExternalInvitation.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this NewExternalInvitation.

        Email address of the user.  # noqa: E501

        :param email: The email of this NewExternalInvitation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewExternalInvitation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewExternalInvitation):
            return True

        return self.to_dict() != other.to_dict()
