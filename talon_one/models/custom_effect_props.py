# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class CustomEffectProps(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'effect_id': 'int',
        'name': 'str',
        'cart_item_position': 'float',
        'cart_item_sub_position': 'float',
        'bundle_index': 'int',
        'bundle_name': 'str',
        'payload': 'object'
    }

    attribute_map = {
        'effect_id': 'effectId',
        'name': 'name',
        'cart_item_position': 'cartItemPosition',
        'cart_item_sub_position': 'cartItemSubPosition',
        'bundle_index': 'bundleIndex',
        'bundle_name': 'bundleName',
        'payload': 'payload'
    }

    def __init__(self, effect_id=None, name=None, cart_item_position=None, cart_item_sub_position=None, bundle_index=None, bundle_name=None, payload=None, local_vars_configuration=None):  # noqa: E501
        """CustomEffectProps - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._effect_id = None
        self._name = None
        self._cart_item_position = None
        self._cart_item_sub_position = None
        self._bundle_index = None
        self._bundle_name = None
        self._payload = None
        self.discriminator = None

        self.effect_id = effect_id
        self.name = name
        if cart_item_position is not None:
            self.cart_item_position = cart_item_position
        if cart_item_sub_position is not None:
            self.cart_item_sub_position = cart_item_sub_position
        if bundle_index is not None:
            self.bundle_index = bundle_index
        if bundle_name is not None:
            self.bundle_name = bundle_name
        self.payload = payload

    @property
    def effect_id(self):
        """Gets the effect_id of this CustomEffectProps.  # noqa: E501

        The ID of the custom effect that was triggered.  # noqa: E501

        :return: The effect_id of this CustomEffectProps.  # noqa: E501
        :rtype: int
        """
        return self._effect_id

    @effect_id.setter
    def effect_id(self, effect_id):
        """Sets the effect_id of this CustomEffectProps.

        The ID of the custom effect that was triggered.  # noqa: E501

        :param effect_id: The effect_id of this CustomEffectProps.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and effect_id is None:  # noqa: E501
            raise ValueError("Invalid value for `effect_id`, must not be `None`")  # noqa: E501

        self._effect_id = effect_id

    @property
    def name(self):
        """Gets the name of this CustomEffectProps.  # noqa: E501

        The type of the custom effect.  # noqa: E501

        :return: The name of this CustomEffectProps.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomEffectProps.

        The type of the custom effect.  # noqa: E501

        :param name: The name of this CustomEffectProps.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def cart_item_position(self):
        """Gets the cart_item_position of this CustomEffectProps.  # noqa: E501

        The index of the item in the cart item list to which the custom effect is applied.  # noqa: E501

        :return: The cart_item_position of this CustomEffectProps.  # noqa: E501
        :rtype: float
        """
        return self._cart_item_position

    @cart_item_position.setter
    def cart_item_position(self, cart_item_position):
        """Sets the cart_item_position of this CustomEffectProps.

        The index of the item in the cart item list to which the custom effect is applied.  # noqa: E501

        :param cart_item_position: The cart_item_position of this CustomEffectProps.  # noqa: E501
        :type: float
        """

        self._cart_item_position = cart_item_position

    @property
    def cart_item_sub_position(self):
        """Gets the cart_item_sub_position of this CustomEffectProps.  # noqa: E501

        For cart items with quantity > 1, the sub position indicates to which item unit the custom effect is applied.   # noqa: E501

        :return: The cart_item_sub_position of this CustomEffectProps.  # noqa: E501
        :rtype: float
        """
        return self._cart_item_sub_position

    @cart_item_sub_position.setter
    def cart_item_sub_position(self, cart_item_sub_position):
        """Sets the cart_item_sub_position of this CustomEffectProps.

        For cart items with quantity > 1, the sub position indicates to which item unit the custom effect is applied.   # noqa: E501

        :param cart_item_sub_position: The cart_item_sub_position of this CustomEffectProps.  # noqa: E501
        :type: float
        """

        self._cart_item_sub_position = cart_item_sub_position

    @property
    def bundle_index(self):
        """Gets the bundle_index of this CustomEffectProps.  # noqa: E501

        The position of the bundle in a list of item bundles created from the same bundle definition.  # noqa: E501

        :return: The bundle_index of this CustomEffectProps.  # noqa: E501
        :rtype: int
        """
        return self._bundle_index

    @bundle_index.setter
    def bundle_index(self, bundle_index):
        """Sets the bundle_index of this CustomEffectProps.

        The position of the bundle in a list of item bundles created from the same bundle definition.  # noqa: E501

        :param bundle_index: The bundle_index of this CustomEffectProps.  # noqa: E501
        :type: int
        """

        self._bundle_index = bundle_index

    @property
    def bundle_name(self):
        """Gets the bundle_name of this CustomEffectProps.  # noqa: E501

        The name of the bundle definition.  # noqa: E501

        :return: The bundle_name of this CustomEffectProps.  # noqa: E501
        :rtype: str
        """
        return self._bundle_name

    @bundle_name.setter
    def bundle_name(self, bundle_name):
        """Sets the bundle_name of this CustomEffectProps.

        The name of the bundle definition.  # noqa: E501

        :param bundle_name: The bundle_name of this CustomEffectProps.  # noqa: E501
        :type: str
        """

        self._bundle_name = bundle_name

    @property
    def payload(self):
        """Gets the payload of this CustomEffectProps.  # noqa: E501

        The JSON payload of the custom effect.  # noqa: E501

        :return: The payload of this CustomEffectProps.  # noqa: E501
        :rtype: object
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this CustomEffectProps.

        The JSON payload of the custom effect.  # noqa: E501

        :param payload: The payload of this CustomEffectProps.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and payload is None:  # noqa: E501
            raise ValueError("Invalid value for `payload`, must not be `None`")  # noqa: E501

        self._payload = payload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomEffectProps):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomEffectProps):
            return True

        return self.to_dict() != other.to_dict()
