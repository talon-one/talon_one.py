# coding: utf-8

"""
    Talon.One API

    The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApplicationApiHealth(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'summary': 'str',
        'last_used': 'datetime'
    }

    attribute_map = {
        'summary': 'summary',
        'last_used': 'lastUsed'
    }

    def __init__(self, summary=None, last_used=None):  # noqa: E501
        """ApplicationApiHealth - a model defined in Swagger"""  # noqa: E501

        self._summary = None
        self._last_used = None
        self.discriminator = None

        self.summary = summary
        self.last_used = last_used

    @property
    def summary(self):
        """Gets the summary of this ApplicationApiHealth.  # noqa: E501

        One-word summary of the health of the API connection of an application  # noqa: E501

        :return: The summary of this ApplicationApiHealth.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this ApplicationApiHealth.

        One-word summary of the health of the API connection of an application  # noqa: E501

        :param summary: The summary of this ApplicationApiHealth.  # noqa: E501
        :type: str
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")  # noqa: E501
        allowed_values = ["OK", "WARNING", "ERROR", "CRITICAL", "NONE"]  # noqa: E501
        if summary not in allowed_values:
            raise ValueError(
                "Invalid value for `summary` ({0}), must be one of {1}"  # noqa: E501
                .format(summary, allowed_values)
            )

        self._summary = summary

    @property
    def last_used(self):
        """Gets the last_used of this ApplicationApiHealth.  # noqa: E501

        time of last request relevant to the API health test  # noqa: E501

        :return: The last_used of this ApplicationApiHealth.  # noqa: E501
        :rtype: datetime
        """
        return self._last_used

    @last_used.setter
    def last_used(self, last_used):
        """Sets the last_used of this ApplicationApiHealth.

        time of last request relevant to the API health test  # noqa: E501

        :param last_used: The last_used of this ApplicationApiHealth.  # noqa: E501
        :type: datetime
        """
        if last_used is None:
            raise ValueError("Invalid value for `last_used`, must not be `None`")  # noqa: E501

        self._last_used = last_used

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationApiHealth, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationApiHealth):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
