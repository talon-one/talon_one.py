# coding: utf-8

"""
    Talon.One API

    The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class CustomerInventory(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'profile': 'CustomerProfile',
        'loyalty': 'Loyalty',
        'referrals': 'list[Referral]',
        'coupons': 'list[Coupon]'
    }

    attribute_map = {
        'profile': 'profile',
        'loyalty': 'loyalty',
        'referrals': 'referrals',
        'coupons': 'coupons'
    }

    def __init__(self, profile=None, loyalty=None, referrals=None, coupons=None, local_vars_configuration=None):  # noqa: E501
        """CustomerInventory - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._profile = None
        self._loyalty = None
        self._referrals = None
        self._coupons = None
        self.discriminator = None

        if profile is not None:
            self.profile = profile
        if loyalty is not None:
            self.loyalty = loyalty
        if referrals is not None:
            self.referrals = referrals
        if coupons is not None:
            self.coupons = coupons

    @property
    def profile(self):
        """Gets the profile of this CustomerInventory.  # noqa: E501


        :return: The profile of this CustomerInventory.  # noqa: E501
        :rtype: CustomerProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this CustomerInventory.


        :param profile: The profile of this CustomerInventory.  # noqa: E501
        :type: CustomerProfile
        """

        self._profile = profile

    @property
    def loyalty(self):
        """Gets the loyalty of this CustomerInventory.  # noqa: E501


        :return: The loyalty of this CustomerInventory.  # noqa: E501
        :rtype: Loyalty
        """
        return self._loyalty

    @loyalty.setter
    def loyalty(self, loyalty):
        """Sets the loyalty of this CustomerInventory.


        :param loyalty: The loyalty of this CustomerInventory.  # noqa: E501
        :type: Loyalty
        """

        self._loyalty = loyalty

    @property
    def referrals(self):
        """Gets the referrals of this CustomerInventory.  # noqa: E501


        :return: The referrals of this CustomerInventory.  # noqa: E501
        :rtype: list[Referral]
        """
        return self._referrals

    @referrals.setter
    def referrals(self, referrals):
        """Sets the referrals of this CustomerInventory.


        :param referrals: The referrals of this CustomerInventory.  # noqa: E501
        :type: list[Referral]
        """

        self._referrals = referrals

    @property
    def coupons(self):
        """Gets the coupons of this CustomerInventory.  # noqa: E501


        :return: The coupons of this CustomerInventory.  # noqa: E501
        :rtype: list[Coupon]
        """
        return self._coupons

    @coupons.setter
    def coupons(self, coupons):
        """Sets the coupons of this CustomerInventory.


        :param coupons: The coupons of this CustomerInventory.  # noqa: E501
        :type: list[Coupon]
        """

        self._coupons = coupons

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerInventory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomerInventory):
            return True

        return self.to_dict() != other.to_dict()
