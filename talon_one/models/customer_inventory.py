# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class CustomerInventory(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'profile': 'CustomerProfile',
        'loyalty': 'Loyalty',
        'referrals': 'list[InventoryReferral]',
        'coupons': 'list[InventoryCoupon]',
        'giveaways': 'list[Giveaway]',
        'achievements': 'list[AchievementProgress]'
    }

    attribute_map = {
        'profile': 'profile',
        'loyalty': 'loyalty',
        'referrals': 'referrals',
        'coupons': 'coupons',
        'giveaways': 'giveaways',
        'achievements': 'achievements'
    }

    def __init__(self, profile=None, loyalty=None, referrals=None, coupons=None, giveaways=None, achievements=None, local_vars_configuration=None):  # noqa: E501
        """CustomerInventory - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._profile = None
        self._loyalty = None
        self._referrals = None
        self._coupons = None
        self._giveaways = None
        self._achievements = None
        self.discriminator = None

        if profile is not None:
            self.profile = profile
        if loyalty is not None:
            self.loyalty = loyalty
        if referrals is not None:
            self.referrals = referrals
        if coupons is not None:
            self.coupons = coupons
        if giveaways is not None:
            self.giveaways = giveaways
        if achievements is not None:
            self.achievements = achievements

    @property
    def profile(self):
        """Gets the profile of this CustomerInventory.  # noqa: E501


        :return: The profile of this CustomerInventory.  # noqa: E501
        :rtype: CustomerProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this CustomerInventory.


        :param profile: The profile of this CustomerInventory.  # noqa: E501
        :type: CustomerProfile
        """

        self._profile = profile

    @property
    def loyalty(self):
        """Gets the loyalty of this CustomerInventory.  # noqa: E501


        :return: The loyalty of this CustomerInventory.  # noqa: E501
        :rtype: Loyalty
        """
        return self._loyalty

    @loyalty.setter
    def loyalty(self, loyalty):
        """Sets the loyalty of this CustomerInventory.


        :param loyalty: The loyalty of this CustomerInventory.  # noqa: E501
        :type: Loyalty
        """

        self._loyalty = loyalty

    @property
    def referrals(self):
        """Gets the referrals of this CustomerInventory.  # noqa: E501


        :return: The referrals of this CustomerInventory.  # noqa: E501
        :rtype: list[InventoryReferral]
        """
        return self._referrals

    @referrals.setter
    def referrals(self, referrals):
        """Sets the referrals of this CustomerInventory.


        :param referrals: The referrals of this CustomerInventory.  # noqa: E501
        :type: list[InventoryReferral]
        """

        self._referrals = referrals

    @property
    def coupons(self):
        """Gets the coupons of this CustomerInventory.  # noqa: E501

        The coupons reserved by this profile. This array includes hard and soft reservations.   # noqa: E501

        :return: The coupons of this CustomerInventory.  # noqa: E501
        :rtype: list[InventoryCoupon]
        """
        return self._coupons

    @coupons.setter
    def coupons(self, coupons):
        """Sets the coupons of this CustomerInventory.

        The coupons reserved by this profile. This array includes hard and soft reservations.   # noqa: E501

        :param coupons: The coupons of this CustomerInventory.  # noqa: E501
        :type: list[InventoryCoupon]
        """

        self._coupons = coupons

    @property
    def giveaways(self):
        """Gets the giveaways of this CustomerInventory.  # noqa: E501


        :return: The giveaways of this CustomerInventory.  # noqa: E501
        :rtype: list[Giveaway]
        """
        return self._giveaways

    @giveaways.setter
    def giveaways(self, giveaways):
        """Sets the giveaways of this CustomerInventory.


        :param giveaways: The giveaways of this CustomerInventory.  # noqa: E501
        :type: list[Giveaway]
        """

        self._giveaways = giveaways

    @property
    def achievements(self):
        """Gets the achievements of this CustomerInventory.  # noqa: E501


        :return: The achievements of this CustomerInventory.  # noqa: E501
        :rtype: list[AchievementProgress]
        """
        return self._achievements

    @achievements.setter
    def achievements(self, achievements):
        """Sets the achievements of this CustomerInventory.


        :param achievements: The achievements of this CustomerInventory.  # noqa: E501
        :type: list[AchievementProgress]
        """

        self._achievements = achievements

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerInventory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomerInventory):
            return True

        return self.to_dict() != other.to_dict()
