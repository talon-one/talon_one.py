# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class RemoveFromAudienceEffectProps(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'audience_id': 'int',
        'audience_name': 'str',
        'profile_integration_id': 'str',
        'profile_id': 'int'
    }

    attribute_map = {
        'audience_id': 'audienceId',
        'audience_name': 'audienceName',
        'profile_integration_id': 'profileIntegrationId',
        'profile_id': 'profileId'
    }

    def __init__(self, audience_id=None, audience_name=None, profile_integration_id=None, profile_id=None, local_vars_configuration=None):  # noqa: E501
        """RemoveFromAudienceEffectProps - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._audience_id = None
        self._audience_name = None
        self._profile_integration_id = None
        self._profile_id = None
        self.discriminator = None

        if audience_id is not None:
            self.audience_id = audience_id
        if audience_name is not None:
            self.audience_name = audience_name
        if profile_integration_id is not None:
            self.profile_integration_id = profile_integration_id
        if profile_id is not None:
            self.profile_id = profile_id

    @property
    def audience_id(self):
        """Gets the audience_id of this RemoveFromAudienceEffectProps.  # noqa: E501

        The internal ID of the audience.  # noqa: E501

        :return: The audience_id of this RemoveFromAudienceEffectProps.  # noqa: E501
        :rtype: int
        """
        return self._audience_id

    @audience_id.setter
    def audience_id(self, audience_id):
        """Sets the audience_id of this RemoveFromAudienceEffectProps.

        The internal ID of the audience.  # noqa: E501

        :param audience_id: The audience_id of this RemoveFromAudienceEffectProps.  # noqa: E501
        :type: int
        """

        self._audience_id = audience_id

    @property
    def audience_name(self):
        """Gets the audience_name of this RemoveFromAudienceEffectProps.  # noqa: E501

        The name of the audience.  # noqa: E501

        :return: The audience_name of this RemoveFromAudienceEffectProps.  # noqa: E501
        :rtype: str
        """
        return self._audience_name

    @audience_name.setter
    def audience_name(self, audience_name):
        """Sets the audience_name of this RemoveFromAudienceEffectProps.

        The name of the audience.  # noqa: E501

        :param audience_name: The audience_name of this RemoveFromAudienceEffectProps.  # noqa: E501
        :type: str
        """

        self._audience_name = audience_name

    @property
    def profile_integration_id(self):
        """Gets the profile_integration_id of this RemoveFromAudienceEffectProps.  # noqa: E501

        The ID of the customer profile in the third-party integration platform.  # noqa: E501

        :return: The profile_integration_id of this RemoveFromAudienceEffectProps.  # noqa: E501
        :rtype: str
        """
        return self._profile_integration_id

    @profile_integration_id.setter
    def profile_integration_id(self, profile_integration_id):
        """Sets the profile_integration_id of this RemoveFromAudienceEffectProps.

        The ID of the customer profile in the third-party integration platform.  # noqa: E501

        :param profile_integration_id: The profile_integration_id of this RemoveFromAudienceEffectProps.  # noqa: E501
        :type: str
        """

        self._profile_integration_id = profile_integration_id

    @property
    def profile_id(self):
        """Gets the profile_id of this RemoveFromAudienceEffectProps.  # noqa: E501

        The internal ID of the customer profile.  # noqa: E501

        :return: The profile_id of this RemoveFromAudienceEffectProps.  # noqa: E501
        :rtype: int
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this RemoveFromAudienceEffectProps.

        The internal ID of the customer profile.  # noqa: E501

        :param profile_id: The profile_id of this RemoveFromAudienceEffectProps.  # noqa: E501
        :type: int
        """

        self._profile_id = profile_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemoveFromAudienceEffectProps):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RemoveFromAudienceEffectProps):
            return True

        return self.to_dict() != other.to_dict()
