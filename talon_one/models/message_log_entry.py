# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class MessageLogEntry(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'service': 'str',
        'change_type': 'str',
        'notification_id': 'int',
        'notification_name': 'str',
        'request': 'MessageLogRequest',
        'response': 'MessageLogResponse',
        'created_at': 'datetime',
        'entity_type': 'str',
        'application_id': 'int',
        'loyalty_program_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'service': 'service',
        'change_type': 'changeType',
        'notification_id': 'notificationId',
        'notification_name': 'notificationName',
        'request': 'request',
        'response': 'response',
        'created_at': 'createdAt',
        'entity_type': 'entityType',
        'application_id': 'applicationId',
        'loyalty_program_id': 'loyaltyProgramId'
    }

    def __init__(self, id=None, service=None, change_type=None, notification_id=None, notification_name=None, request=None, response=None, created_at=None, entity_type=None, application_id=None, loyalty_program_id=None, local_vars_configuration=None):  # noqa: E501
        """MessageLogEntry - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._service = None
        self._change_type = None
        self._notification_id = None
        self._notification_name = None
        self._request = None
        self._response = None
        self._created_at = None
        self._entity_type = None
        self._application_id = None
        self._loyalty_program_id = None
        self.discriminator = None

        self.id = id
        self.service = service
        if change_type is not None:
            self.change_type = change_type
        if notification_id is not None:
            self.notification_id = notification_id
        if notification_name is not None:
            self.notification_name = notification_name
        if request is not None:
            self.request = request
        if response is not None:
            self.response = response
        self.created_at = created_at
        if entity_type is not None:
            self.entity_type = entity_type
        if application_id is not None:
            self.application_id = application_id
        if loyalty_program_id is not None:
            self.loyalty_program_id = loyalty_program_id

    @property
    def id(self):
        """Gets the id of this MessageLogEntry.  # noqa: E501

        Unique identifier of the message.  # noqa: E501

        :return: The id of this MessageLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MessageLogEntry.

        Unique identifier of the message.  # noqa: E501

        :param id: The id of this MessageLogEntry.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def service(self):
        """Gets the service of this MessageLogEntry.  # noqa: E501

        Name of the service that generated the log entry.  # noqa: E501

        :return: The service of this MessageLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this MessageLogEntry.

        Name of the service that generated the log entry.  # noqa: E501

        :param service: The service of this MessageLogEntry.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and service is None:  # noqa: E501
            raise ValueError("Invalid value for `service`, must not be `None`")  # noqa: E501

        self._service = service

    @property
    def change_type(self):
        """Gets the change_type of this MessageLogEntry.  # noqa: E501

        Type of change that triggered the notification.  # noqa: E501

        :return: The change_type of this MessageLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._change_type

    @change_type.setter
    def change_type(self, change_type):
        """Sets the change_type of this MessageLogEntry.

        Type of change that triggered the notification.  # noqa: E501

        :param change_type: The change_type of this MessageLogEntry.  # noqa: E501
        :type: str
        """

        self._change_type = change_type

    @property
    def notification_id(self):
        """Gets the notification_id of this MessageLogEntry.  # noqa: E501

        ID of the notification.  # noqa: E501

        :return: The notification_id of this MessageLogEntry.  # noqa: E501
        :rtype: int
        """
        return self._notification_id

    @notification_id.setter
    def notification_id(self, notification_id):
        """Sets the notification_id of this MessageLogEntry.

        ID of the notification.  # noqa: E501

        :param notification_id: The notification_id of this MessageLogEntry.  # noqa: E501
        :type: int
        """

        self._notification_id = notification_id

    @property
    def notification_name(self):
        """Gets the notification_name of this MessageLogEntry.  # noqa: E501

        The name of the notification.  # noqa: E501

        :return: The notification_name of this MessageLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._notification_name

    @notification_name.setter
    def notification_name(self, notification_name):
        """Sets the notification_name of this MessageLogEntry.

        The name of the notification.  # noqa: E501

        :param notification_name: The notification_name of this MessageLogEntry.  # noqa: E501
        :type: str
        """

        self._notification_name = notification_name

    @property
    def request(self):
        """Gets the request of this MessageLogEntry.  # noqa: E501


        :return: The request of this MessageLogEntry.  # noqa: E501
        :rtype: MessageLogRequest
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this MessageLogEntry.


        :param request: The request of this MessageLogEntry.  # noqa: E501
        :type: MessageLogRequest
        """

        self._request = request

    @property
    def response(self):
        """Gets the response of this MessageLogEntry.  # noqa: E501


        :return: The response of this MessageLogEntry.  # noqa: E501
        :rtype: MessageLogResponse
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this MessageLogEntry.


        :param response: The response of this MessageLogEntry.  # noqa: E501
        :type: MessageLogResponse
        """

        self._response = response

    @property
    def created_at(self):
        """Gets the created_at of this MessageLogEntry.  # noqa: E501

        Timestamp when the log entry was created.  # noqa: E501

        :return: The created_at of this MessageLogEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MessageLogEntry.

        Timestamp when the log entry was created.  # noqa: E501

        :param created_at: The created_at of this MessageLogEntry.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def entity_type(self):
        """Gets the entity_type of this MessageLogEntry.  # noqa: E501

        The entity type the notification is related to.   # noqa: E501

        :return: The entity_type of this MessageLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this MessageLogEntry.

        The entity type the notification is related to.   # noqa: E501

        :param entity_type: The entity_type of this MessageLogEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["application", "loyalty_program"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and entity_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"  # noqa: E501
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def application_id(self):
        """Gets the application_id of this MessageLogEntry.  # noqa: E501

        Identifier of the Application.  # noqa: E501

        :return: The application_id of this MessageLogEntry.  # noqa: E501
        :rtype: int
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this MessageLogEntry.

        Identifier of the Application.  # noqa: E501

        :param application_id: The application_id of this MessageLogEntry.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                application_id is not None and application_id < 1):  # noqa: E501
            raise ValueError("Invalid value for `application_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._application_id = application_id

    @property
    def loyalty_program_id(self):
        """Gets the loyalty_program_id of this MessageLogEntry.  # noqa: E501

        Identifier of the loyalty program.  # noqa: E501

        :return: The loyalty_program_id of this MessageLogEntry.  # noqa: E501
        :rtype: int
        """
        return self._loyalty_program_id

    @loyalty_program_id.setter
    def loyalty_program_id(self, loyalty_program_id):
        """Sets the loyalty_program_id of this MessageLogEntry.

        Identifier of the loyalty program.  # noqa: E501

        :param loyalty_program_id: The loyalty_program_id of this MessageLogEntry.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                loyalty_program_id is not None and loyalty_program_id < 1):  # noqa: E501
            raise ValueError("Invalid value for `loyalty_program_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._loyalty_program_id = loyalty_program_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessageLogEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MessageLogEntry):
            return True

        return self.to_dict() != other.to_dict()
