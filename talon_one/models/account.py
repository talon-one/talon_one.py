# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class Account(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'created': 'datetime',
        'modified': 'datetime',
        'company_name': 'str',
        'domain_name': 'str',
        'state': 'str',
        'billing_email': 'str',
        'plan_name': 'str',
        'plan_expires': 'datetime',
        'application_limit': 'int',
        'user_limit': 'int',
        'campaign_limit': 'int',
        'api_limit': 'int',
        'application_count': 'int',
        'user_count': 'int',
        'campaigns_active_count': 'int',
        'campaigns_inactive_count': 'int',
        'attributes': 'object'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'modified': 'modified',
        'company_name': 'companyName',
        'domain_name': 'domainName',
        'state': 'state',
        'billing_email': 'billingEmail',
        'plan_name': 'planName',
        'plan_expires': 'planExpires',
        'application_limit': 'applicationLimit',
        'user_limit': 'userLimit',
        'campaign_limit': 'campaignLimit',
        'api_limit': 'apiLimit',
        'application_count': 'applicationCount',
        'user_count': 'userCount',
        'campaigns_active_count': 'campaignsActiveCount',
        'campaigns_inactive_count': 'campaignsInactiveCount',
        'attributes': 'attributes'
    }

    def __init__(self, id=None, created=None, modified=None, company_name=None, domain_name=None, state=None, billing_email=None, plan_name=None, plan_expires=None, application_limit=None, user_limit=None, campaign_limit=None, api_limit=None, application_count=None, user_count=None, campaigns_active_count=None, campaigns_inactive_count=None, attributes=None, local_vars_configuration=None):  # noqa: E501
        """Account - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._created = None
        self._modified = None
        self._company_name = None
        self._domain_name = None
        self._state = None
        self._billing_email = None
        self._plan_name = None
        self._plan_expires = None
        self._application_limit = None
        self._user_limit = None
        self._campaign_limit = None
        self._api_limit = None
        self._application_count = None
        self._user_count = None
        self._campaigns_active_count = None
        self._campaigns_inactive_count = None
        self._attributes = None
        self.discriminator = None

        self.id = id
        self.created = created
        self.modified = modified
        self.company_name = company_name
        self.domain_name = domain_name
        self.state = state
        self.billing_email = billing_email
        if plan_name is not None:
            self.plan_name = plan_name
        if plan_expires is not None:
            self.plan_expires = plan_expires
        if application_limit is not None:
            self.application_limit = application_limit
        if user_limit is not None:
            self.user_limit = user_limit
        if campaign_limit is not None:
            self.campaign_limit = campaign_limit
        if api_limit is not None:
            self.api_limit = api_limit
        self.application_count = application_count
        self.user_count = user_count
        self.campaigns_active_count = campaigns_active_count
        self.campaigns_inactive_count = campaigns_inactive_count
        if attributes is not None:
            self.attributes = attributes

    @property
    def id(self):
        """Gets the id of this Account.  # noqa: E501

        Internal ID of this entity.  # noqa: E501

        :return: The id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.

        Internal ID of this entity.  # noqa: E501

        :param id: The id of this Account.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created(self):
        """Gets the created of this Account.  # noqa: E501

        The time this entity was created.  # noqa: E501

        :return: The created of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Account.

        The time this entity was created.  # noqa: E501

        :param created: The created of this Account.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this Account.  # noqa: E501

        The time this entity was last modified.  # noqa: E501

        :return: The modified of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Account.

        The time this entity was last modified.  # noqa: E501

        :param modified: The modified of this Account.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and modified is None:  # noqa: E501
            raise ValueError("Invalid value for `modified`, must not be `None`")  # noqa: E501

        self._modified = modified

    @property
    def company_name(self):
        """Gets the company_name of this Account.  # noqa: E501


        :return: The company_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Account.


        :param company_name: The company_name of this Account.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and company_name is None:  # noqa: E501
            raise ValueError("Invalid value for `company_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                company_name is not None and len(company_name) < 1):
            raise ValueError("Invalid value for `company_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._company_name = company_name

    @property
    def domain_name(self):
        """Gets the domain_name of this Account.  # noqa: E501

        Subdomain Name for yourcompany.talon.one.  # noqa: E501

        :return: The domain_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this Account.

        Subdomain Name for yourcompany.talon.one.  # noqa: E501

        :param domain_name: The domain_name of this Account.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and domain_name is None:  # noqa: E501
            raise ValueError("Invalid value for `domain_name`, must not be `None`")  # noqa: E501

        self._domain_name = domain_name

    @property
    def state(self):
        """Gets the state of this Account.  # noqa: E501

        State of the account (active, deactivated).  # noqa: E501

        :return: The state of this Account.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Account.

        State of the account (active, deactivated).  # noqa: E501

        :param state: The state of this Account.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and state is None:  # noqa: E501
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["active", "deactivated"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def billing_email(self):
        """Gets the billing_email of this Account.  # noqa: E501

        The billing email address associated with your company account.  # noqa: E501

        :return: The billing_email of this Account.  # noqa: E501
        :rtype: str
        """
        return self._billing_email

    @billing_email.setter
    def billing_email(self, billing_email):
        """Sets the billing_email of this Account.

        The billing email address associated with your company account.  # noqa: E501

        :param billing_email: The billing_email of this Account.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and billing_email is None:  # noqa: E501
            raise ValueError("Invalid value for `billing_email`, must not be `None`")  # noqa: E501

        self._billing_email = billing_email

    @property
    def plan_name(self):
        """Gets the plan_name of this Account.  # noqa: E501

        The name of your booked plan.  # noqa: E501

        :return: The plan_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._plan_name

    @plan_name.setter
    def plan_name(self, plan_name):
        """Sets the plan_name of this Account.

        The name of your booked plan.  # noqa: E501

        :param plan_name: The plan_name of this Account.  # noqa: E501
        :type: str
        """

        self._plan_name = plan_name

    @property
    def plan_expires(self):
        """Gets the plan_expires of this Account.  # noqa: E501

        The point in time at which your current plan expires.  # noqa: E501

        :return: The plan_expires of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._plan_expires

    @plan_expires.setter
    def plan_expires(self, plan_expires):
        """Sets the plan_expires of this Account.

        The point in time at which your current plan expires.  # noqa: E501

        :param plan_expires: The plan_expires of this Account.  # noqa: E501
        :type: datetime
        """

        self._plan_expires = plan_expires

    @property
    def application_limit(self):
        """Gets the application_limit of this Account.  # noqa: E501

        The maximum number of Applications covered by your plan.  # noqa: E501

        :return: The application_limit of this Account.  # noqa: E501
        :rtype: int
        """
        return self._application_limit

    @application_limit.setter
    def application_limit(self, application_limit):
        """Sets the application_limit of this Account.

        The maximum number of Applications covered by your plan.  # noqa: E501

        :param application_limit: The application_limit of this Account.  # noqa: E501
        :type: int
        """

        self._application_limit = application_limit

    @property
    def user_limit(self):
        """Gets the user_limit of this Account.  # noqa: E501

        The maximum number of Campaign Manager Users covered by your plan.  # noqa: E501

        :return: The user_limit of this Account.  # noqa: E501
        :rtype: int
        """
        return self._user_limit

    @user_limit.setter
    def user_limit(self, user_limit):
        """Sets the user_limit of this Account.

        The maximum number of Campaign Manager Users covered by your plan.  # noqa: E501

        :param user_limit: The user_limit of this Account.  # noqa: E501
        :type: int
        """

        self._user_limit = user_limit

    @property
    def campaign_limit(self):
        """Gets the campaign_limit of this Account.  # noqa: E501

        The maximum number of Campaigns covered by your plan.  # noqa: E501

        :return: The campaign_limit of this Account.  # noqa: E501
        :rtype: int
        """
        return self._campaign_limit

    @campaign_limit.setter
    def campaign_limit(self, campaign_limit):
        """Sets the campaign_limit of this Account.

        The maximum number of Campaigns covered by your plan.  # noqa: E501

        :param campaign_limit: The campaign_limit of this Account.  # noqa: E501
        :type: int
        """

        self._campaign_limit = campaign_limit

    @property
    def api_limit(self):
        """Gets the api_limit of this Account.  # noqa: E501

        The maximum number of Integration API calls covered by your plan per billing period.  # noqa: E501

        :return: The api_limit of this Account.  # noqa: E501
        :rtype: int
        """
        return self._api_limit

    @api_limit.setter
    def api_limit(self, api_limit):
        """Sets the api_limit of this Account.

        The maximum number of Integration API calls covered by your plan per billing period.  # noqa: E501

        :param api_limit: The api_limit of this Account.  # noqa: E501
        :type: int
        """

        self._api_limit = api_limit

    @property
    def application_count(self):
        """Gets the application_count of this Account.  # noqa: E501

        The current number of Applications in your account.  # noqa: E501

        :return: The application_count of this Account.  # noqa: E501
        :rtype: int
        """
        return self._application_count

    @application_count.setter
    def application_count(self, application_count):
        """Sets the application_count of this Account.

        The current number of Applications in your account.  # noqa: E501

        :param application_count: The application_count of this Account.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and application_count is None:  # noqa: E501
            raise ValueError("Invalid value for `application_count`, must not be `None`")  # noqa: E501

        self._application_count = application_count

    @property
    def user_count(self):
        """Gets the user_count of this Account.  # noqa: E501

        The current number of Campaign Manager Users in your account.  # noqa: E501

        :return: The user_count of this Account.  # noqa: E501
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this Account.

        The current number of Campaign Manager Users in your account.  # noqa: E501

        :param user_count: The user_count of this Account.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and user_count is None:  # noqa: E501
            raise ValueError("Invalid value for `user_count`, must not be `None`")  # noqa: E501

        self._user_count = user_count

    @property
    def campaigns_active_count(self):
        """Gets the campaigns_active_count of this Account.  # noqa: E501

        The current number of active Campaigns in your account.  # noqa: E501

        :return: The campaigns_active_count of this Account.  # noqa: E501
        :rtype: int
        """
        return self._campaigns_active_count

    @campaigns_active_count.setter
    def campaigns_active_count(self, campaigns_active_count):
        """Sets the campaigns_active_count of this Account.

        The current number of active Campaigns in your account.  # noqa: E501

        :param campaigns_active_count: The campaigns_active_count of this Account.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and campaigns_active_count is None:  # noqa: E501
            raise ValueError("Invalid value for `campaigns_active_count`, must not be `None`")  # noqa: E501

        self._campaigns_active_count = campaigns_active_count

    @property
    def campaigns_inactive_count(self):
        """Gets the campaigns_inactive_count of this Account.  # noqa: E501

        The current number of inactive Campaigns in your account.  # noqa: E501

        :return: The campaigns_inactive_count of this Account.  # noqa: E501
        :rtype: int
        """
        return self._campaigns_inactive_count

    @campaigns_inactive_count.setter
    def campaigns_inactive_count(self, campaigns_inactive_count):
        """Sets the campaigns_inactive_count of this Account.

        The current number of inactive Campaigns in your account.  # noqa: E501

        :param campaigns_inactive_count: The campaigns_inactive_count of this Account.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and campaigns_inactive_count is None:  # noqa: E501
            raise ValueError("Invalid value for `campaigns_inactive_count`, must not be `None`")  # noqa: E501

        self._campaigns_inactive_count = campaigns_inactive_count

    @property
    def attributes(self):
        """Gets the attributes of this Account.  # noqa: E501

        Arbitrary properties associated with this campaign.  # noqa: E501

        :return: The attributes of this Account.  # noqa: E501
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Account.

        Arbitrary properties associated with this campaign.  # noqa: E501

        :param attributes: The attributes of this Account.  # noqa: E501
        :type: object
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Account):
            return True

        return self.to_dict() != other.to_dict()
