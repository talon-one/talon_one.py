# coding: utf-8

"""
    Talon.One API

    The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from talon_one.models.binding import Binding  # noqa: F401,E501
from talon_one.models.rule import Rule  # noqa: F401,E501


class Ruleset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created': 'datetime',
        'campaign_id': 'int',
        'user_id': 'int',
        'rules': 'list[Rule]',
        'bindings': 'list[Binding]',
        'rb_version': 'str',
        'activate': 'bool',
        'activated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'campaign_id': 'campaignId',
        'user_id': 'userId',
        'rules': 'rules',
        'bindings': 'bindings',
        'rb_version': 'rbVersion',
        'activate': 'activate',
        'activated_at': 'activatedAt'
    }

    def __init__(self, id=None, created=None, campaign_id=None, user_id=None, rules=None, bindings=None, rb_version=None, activate=None, activated_at=None):  # noqa: E501
        """Ruleset - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._created = None
        self._campaign_id = None
        self._user_id = None
        self._rules = None
        self._bindings = None
        self._rb_version = None
        self._activate = None
        self._activated_at = None
        self.discriminator = None

        self.id = id
        self.created = created
        self.campaign_id = campaign_id
        self.user_id = user_id
        self.rules = rules
        self.bindings = bindings
        if rb_version is not None:
            self.rb_version = rb_version
        if activate is not None:
            self.activate = activate
        if activated_at is not None:
            self.activated_at = activated_at

    @property
    def id(self):
        """Gets the id of this Ruleset.  # noqa: E501

        Unique ID for this entity.  # noqa: E501

        :return: The id of this Ruleset.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Ruleset.

        Unique ID for this entity.  # noqa: E501

        :param id: The id of this Ruleset.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created(self):
        """Gets the created of this Ruleset.  # noqa: E501

        The exact moment this entity was created.  # noqa: E501

        :return: The created of this Ruleset.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Ruleset.

        The exact moment this entity was created.  # noqa: E501

        :param created: The created of this Ruleset.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def campaign_id(self):
        """Gets the campaign_id of this Ruleset.  # noqa: E501

        The ID of the campaign that owns this entity.  # noqa: E501

        :return: The campaign_id of this Ruleset.  # noqa: E501
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this Ruleset.

        The ID of the campaign that owns this entity.  # noqa: E501

        :param campaign_id: The campaign_id of this Ruleset.  # noqa: E501
        :type: int
        """
        if campaign_id is None:
            raise ValueError("Invalid value for `campaign_id`, must not be `None`")  # noqa: E501

        self._campaign_id = campaign_id

    @property
    def user_id(self):
        """Gets the user_id of this Ruleset.  # noqa: E501

        The ID of the account that owns this entity.  # noqa: E501

        :return: The user_id of this Ruleset.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Ruleset.

        The ID of the account that owns this entity.  # noqa: E501

        :param user_id: The user_id of this Ruleset.  # noqa: E501
        :type: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def rules(self):
        """Gets the rules of this Ruleset.  # noqa: E501

        Set of rules to apply.  # noqa: E501

        :return: The rules of this Ruleset.  # noqa: E501
        :rtype: list[Rule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this Ruleset.

        Set of rules to apply.  # noqa: E501

        :param rules: The rules of this Ruleset.  # noqa: E501
        :type: list[Rule]
        """
        if rules is None:
            raise ValueError("Invalid value for `rules`, must not be `None`")  # noqa: E501

        self._rules = rules

    @property
    def bindings(self):
        """Gets the bindings of this Ruleset.  # noqa: E501

        An array that provides objects with variable names (name) and talang expressions to whose result they are bound (expression) during rule evaluation. The order of the evaluation is decided by the position in the array.  # noqa: E501

        :return: The bindings of this Ruleset.  # noqa: E501
        :rtype: list[Binding]
        """
        return self._bindings

    @bindings.setter
    def bindings(self, bindings):
        """Sets the bindings of this Ruleset.

        An array that provides objects with variable names (name) and talang expressions to whose result they are bound (expression) during rule evaluation. The order of the evaluation is decided by the position in the array.  # noqa: E501

        :param bindings: The bindings of this Ruleset.  # noqa: E501
        :type: list[Binding]
        """
        if bindings is None:
            raise ValueError("Invalid value for `bindings`, must not be `None`")  # noqa: E501

        self._bindings = bindings

    @property
    def rb_version(self):
        """Gets the rb_version of this Ruleset.  # noqa: E501

        A string indicating which version of the rulebuilder was used to create this ruleset.  # noqa: E501

        :return: The rb_version of this Ruleset.  # noqa: E501
        :rtype: str
        """
        return self._rb_version

    @rb_version.setter
    def rb_version(self, rb_version):
        """Sets the rb_version of this Ruleset.

        A string indicating which version of the rulebuilder was used to create this ruleset.  # noqa: E501

        :param rb_version: The rb_version of this Ruleset.  # noqa: E501
        :type: str
        """

        self._rb_version = rb_version

    @property
    def activate(self):
        """Gets the activate of this Ruleset.  # noqa: E501

        A boolean indicating whether this newly created ruleset should also be activated for the campaign owns it  # noqa: E501

        :return: The activate of this Ruleset.  # noqa: E501
        :rtype: bool
        """
        return self._activate

    @activate.setter
    def activate(self, activate):
        """Sets the activate of this Ruleset.

        A boolean indicating whether this newly created ruleset should also be activated for the campaign owns it  # noqa: E501

        :param activate: The activate of this Ruleset.  # noqa: E501
        :type: bool
        """

        self._activate = activate

    @property
    def activated_at(self):
        """Gets the activated_at of this Ruleset.  # noqa: E501

        Timestamp indicating when this Ruleset was activated.  # noqa: E501

        :return: The activated_at of this Ruleset.  # noqa: E501
        :rtype: datetime
        """
        return self._activated_at

    @activated_at.setter
    def activated_at(self, activated_at):
        """Sets the activated_at of this Ruleset.

        Timestamp indicating when this Ruleset was activated.  # noqa: E501

        :param activated_at: The activated_at of this Ruleset.  # noqa: E501
        :type: datetime
        """

        self._activated_at = activated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Ruleset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ruleset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
