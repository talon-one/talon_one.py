# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class Ruleset(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'created': 'datetime',
        'user_id': 'int',
        'rules': 'list[Rule]',
        'strikethrough_rules': 'list[Rule]',
        'bindings': 'list[Binding]',
        'rb_version': 'str',
        'activate': 'bool',
        'campaign_id': 'int',
        'template_id': 'int',
        'activated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'user_id': 'userId',
        'rules': 'rules',
        'strikethrough_rules': 'strikethroughRules',
        'bindings': 'bindings',
        'rb_version': 'rbVersion',
        'activate': 'activate',
        'campaign_id': 'campaignId',
        'template_id': 'templateId',
        'activated_at': 'activatedAt'
    }

    def __init__(self, id=None, created=None, user_id=None, rules=None, strikethrough_rules=None, bindings=None, rb_version=None, activate=None, campaign_id=None, template_id=None, activated_at=None, local_vars_configuration=None):  # noqa: E501
        """Ruleset - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._created = None
        self._user_id = None
        self._rules = None
        self._strikethrough_rules = None
        self._bindings = None
        self._rb_version = None
        self._activate = None
        self._campaign_id = None
        self._template_id = None
        self._activated_at = None
        self.discriminator = None

        self.id = id
        self.created = created
        self.user_id = user_id
        self.rules = rules
        if strikethrough_rules is not None:
            self.strikethrough_rules = strikethrough_rules
        self.bindings = bindings
        if rb_version is not None:
            self.rb_version = rb_version
        if activate is not None:
            self.activate = activate
        if campaign_id is not None:
            self.campaign_id = campaign_id
        if template_id is not None:
            self.template_id = template_id
        if activated_at is not None:
            self.activated_at = activated_at

    @property
    def id(self):
        """Gets the id of this Ruleset.  # noqa: E501

        Internal ID of this entity.  # noqa: E501

        :return: The id of this Ruleset.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Ruleset.

        Internal ID of this entity.  # noqa: E501

        :param id: The id of this Ruleset.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created(self):
        """Gets the created of this Ruleset.  # noqa: E501

        The time this entity was created.  # noqa: E501

        :return: The created of this Ruleset.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Ruleset.

        The time this entity was created.  # noqa: E501

        :param created: The created of this Ruleset.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def user_id(self):
        """Gets the user_id of this Ruleset.  # noqa: E501

        The ID of the user associated with this entity.  # noqa: E501

        :return: The user_id of this Ruleset.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Ruleset.

        The ID of the user associated with this entity.  # noqa: E501

        :param user_id: The user_id of this Ruleset.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def rules(self):
        """Gets the rules of this Ruleset.  # noqa: E501

        Set of rules to apply.  # noqa: E501

        :return: The rules of this Ruleset.  # noqa: E501
        :rtype: list[Rule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this Ruleset.

        Set of rules to apply.  # noqa: E501

        :param rules: The rules of this Ruleset.  # noqa: E501
        :type: list[Rule]
        """
        if self.local_vars_configuration.client_side_validation and rules is None:  # noqa: E501
            raise ValueError("Invalid value for `rules`, must not be `None`")  # noqa: E501

        self._rules = rules

    @property
    def strikethrough_rules(self):
        """Gets the strikethrough_rules of this Ruleset.  # noqa: E501

        Set of rules to apply for strikethrough.  # noqa: E501

        :return: The strikethrough_rules of this Ruleset.  # noqa: E501
        :rtype: list[Rule]
        """
        return self._strikethrough_rules

    @strikethrough_rules.setter
    def strikethrough_rules(self, strikethrough_rules):
        """Sets the strikethrough_rules of this Ruleset.

        Set of rules to apply for strikethrough.  # noqa: E501

        :param strikethrough_rules: The strikethrough_rules of this Ruleset.  # noqa: E501
        :type: list[Rule]
        """

        self._strikethrough_rules = strikethrough_rules

    @property
    def bindings(self):
        """Gets the bindings of this Ruleset.  # noqa: E501

        An array that provides objects with variable names (name) and talang expressions to whose result they are bound (expression) during rule evaluation. The order of the evaluation is decided by the position in the array.  # noqa: E501

        :return: The bindings of this Ruleset.  # noqa: E501
        :rtype: list[Binding]
        """
        return self._bindings

    @bindings.setter
    def bindings(self, bindings):
        """Sets the bindings of this Ruleset.

        An array that provides objects with variable names (name) and talang expressions to whose result they are bound (expression) during rule evaluation. The order of the evaluation is decided by the position in the array.  # noqa: E501

        :param bindings: The bindings of this Ruleset.  # noqa: E501
        :type: list[Binding]
        """
        if self.local_vars_configuration.client_side_validation and bindings is None:  # noqa: E501
            raise ValueError("Invalid value for `bindings`, must not be `None`")  # noqa: E501

        self._bindings = bindings

    @property
    def rb_version(self):
        """Gets the rb_version of this Ruleset.  # noqa: E501

        The version of the rulebuilder used to create this ruleset.  # noqa: E501

        :return: The rb_version of this Ruleset.  # noqa: E501
        :rtype: str
        """
        return self._rb_version

    @rb_version.setter
    def rb_version(self, rb_version):
        """Sets the rb_version of this Ruleset.

        The version of the rulebuilder used to create this ruleset.  # noqa: E501

        :param rb_version: The rb_version of this Ruleset.  # noqa: E501
        :type: str
        """

        self._rb_version = rb_version

    @property
    def activate(self):
        """Gets the activate of this Ruleset.  # noqa: E501

        Indicates whether this created ruleset should be activated for the campaign that owns it.  # noqa: E501

        :return: The activate of this Ruleset.  # noqa: E501
        :rtype: bool
        """
        return self._activate

    @activate.setter
    def activate(self, activate):
        """Sets the activate of this Ruleset.

        Indicates whether this created ruleset should be activated for the campaign that owns it.  # noqa: E501

        :param activate: The activate of this Ruleset.  # noqa: E501
        :type: bool
        """

        self._activate = activate

    @property
    def campaign_id(self):
        """Gets the campaign_id of this Ruleset.  # noqa: E501

        The ID of the campaign that owns this entity.  # noqa: E501

        :return: The campaign_id of this Ruleset.  # noqa: E501
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this Ruleset.

        The ID of the campaign that owns this entity.  # noqa: E501

        :param campaign_id: The campaign_id of this Ruleset.  # noqa: E501
        :type: int
        """

        self._campaign_id = campaign_id

    @property
    def template_id(self):
        """Gets the template_id of this Ruleset.  # noqa: E501

        The ID of the campaign template that owns this entity.  # noqa: E501

        :return: The template_id of this Ruleset.  # noqa: E501
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this Ruleset.

        The ID of the campaign template that owns this entity.  # noqa: E501

        :param template_id: The template_id of this Ruleset.  # noqa: E501
        :type: int
        """

        self._template_id = template_id

    @property
    def activated_at(self):
        """Gets the activated_at of this Ruleset.  # noqa: E501

        Timestamp indicating when this Ruleset was activated.  # noqa: E501

        :return: The activated_at of this Ruleset.  # noqa: E501
        :rtype: datetime
        """
        return self._activated_at

    @activated_at.setter
    def activated_at(self, activated_at):
        """Sets the activated_at of this Ruleset.

        Timestamp indicating when this Ruleset was activated.  # noqa: E501

        :param activated_at: The activated_at of this Ruleset.  # noqa: E501
        :type: datetime
        """

        self._activated_at = activated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ruleset):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Ruleset):
            return True

        return self.to_dict() != other.to_dict()
