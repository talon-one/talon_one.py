# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class SetDiscountPerAdditionalCostEffectProps(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'additional_cost_id': 'int',
        'additional_cost': 'str',
        'value': 'float',
        'desired_value': 'float'
    }

    attribute_map = {
        'name': 'name',
        'additional_cost_id': 'additionalCostId',
        'additional_cost': 'additionalCost',
        'value': 'value',
        'desired_value': 'desiredValue'
    }

    def __init__(self, name=None, additional_cost_id=None, additional_cost=None, value=None, desired_value=None, local_vars_configuration=None):  # noqa: E501
        """SetDiscountPerAdditionalCostEffectProps - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._additional_cost_id = None
        self._additional_cost = None
        self._value = None
        self._desired_value = None
        self.discriminator = None

        self.name = name
        self.additional_cost_id = additional_cost_id
        self.additional_cost = additional_cost
        self.value = value
        if desired_value is not None:
            self.desired_value = desired_value

    @property
    def name(self):
        """Gets the name of this SetDiscountPerAdditionalCostEffectProps.  # noqa: E501

        The name / description of this discount  # noqa: E501

        :return: The name of this SetDiscountPerAdditionalCostEffectProps.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SetDiscountPerAdditionalCostEffectProps.

        The name / description of this discount  # noqa: E501

        :param name: The name of this SetDiscountPerAdditionalCostEffectProps.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def additional_cost_id(self):
        """Gets the additional_cost_id of this SetDiscountPerAdditionalCostEffectProps.  # noqa: E501

        The ID of the additional cost.  # noqa: E501

        :return: The additional_cost_id of this SetDiscountPerAdditionalCostEffectProps.  # noqa: E501
        :rtype: int
        """
        return self._additional_cost_id

    @additional_cost_id.setter
    def additional_cost_id(self, additional_cost_id):
        """Sets the additional_cost_id of this SetDiscountPerAdditionalCostEffectProps.

        The ID of the additional cost.  # noqa: E501

        :param additional_cost_id: The additional_cost_id of this SetDiscountPerAdditionalCostEffectProps.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and additional_cost_id is None:  # noqa: E501
            raise ValueError("Invalid value for `additional_cost_id`, must not be `None`")  # noqa: E501

        self._additional_cost_id = additional_cost_id

    @property
    def additional_cost(self):
        """Gets the additional_cost of this SetDiscountPerAdditionalCostEffectProps.  # noqa: E501

        The name of the additional cost.  # noqa: E501

        :return: The additional_cost of this SetDiscountPerAdditionalCostEffectProps.  # noqa: E501
        :rtype: str
        """
        return self._additional_cost

    @additional_cost.setter
    def additional_cost(self, additional_cost):
        """Sets the additional_cost of this SetDiscountPerAdditionalCostEffectProps.

        The name of the additional cost.  # noqa: E501

        :param additional_cost: The additional_cost of this SetDiscountPerAdditionalCostEffectProps.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and additional_cost is None:  # noqa: E501
            raise ValueError("Invalid value for `additional_cost`, must not be `None`")  # noqa: E501

        self._additional_cost = additional_cost

    @property
    def value(self):
        """Gets the value of this SetDiscountPerAdditionalCostEffectProps.  # noqa: E501

        The total monetary value of the discount.  # noqa: E501

        :return: The value of this SetDiscountPerAdditionalCostEffectProps.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SetDiscountPerAdditionalCostEffectProps.

        The total monetary value of the discount.  # noqa: E501

        :param value: The value of this SetDiscountPerAdditionalCostEffectProps.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and value is None:  # noqa: E501
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def desired_value(self):
        """Gets the desired_value of this SetDiscountPerAdditionalCostEffectProps.  # noqa: E501

        The original value of the discount.  # noqa: E501

        :return: The desired_value of this SetDiscountPerAdditionalCostEffectProps.  # noqa: E501
        :rtype: float
        """
        return self._desired_value

    @desired_value.setter
    def desired_value(self, desired_value):
        """Sets the desired_value of this SetDiscountPerAdditionalCostEffectProps.

        The original value of the discount.  # noqa: E501

        :param desired_value: The desired_value of this SetDiscountPerAdditionalCostEffectProps.  # noqa: E501
        :type: float
        """

        self._desired_value = desired_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetDiscountPerAdditionalCostEffectProps):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SetDiscountPerAdditionalCostEffectProps):
            return True

        return self.to_dict() != other.to_dict()
