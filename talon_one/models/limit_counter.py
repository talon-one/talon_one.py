# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class LimitCounter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'campaign_id': 'int',
        'application_id': 'int',
        'account_id': 'int',
        'id': 'int',
        'action': 'str',
        'profile_id': 'int',
        'profile_integration_id': 'str',
        'coupon_id': 'int',
        'coupon_value': 'str',
        'referral_id': 'int',
        'referral_value': 'str',
        'identifier': 'str',
        'period': 'str',
        'limit': 'float',
        'counter': 'float'
    }

    attribute_map = {
        'campaign_id': 'campaignId',
        'application_id': 'applicationId',
        'account_id': 'accountId',
        'id': 'id',
        'action': 'action',
        'profile_id': 'profileId',
        'profile_integration_id': 'profileIntegrationId',
        'coupon_id': 'couponId',
        'coupon_value': 'couponValue',
        'referral_id': 'referralId',
        'referral_value': 'referralValue',
        'identifier': 'identifier',
        'period': 'period',
        'limit': 'limit',
        'counter': 'counter'
    }

    def __init__(self, campaign_id=None, application_id=None, account_id=None, id=None, action=None, profile_id=None, profile_integration_id=None, coupon_id=None, coupon_value=None, referral_id=None, referral_value=None, identifier=None, period=None, limit=None, counter=None, local_vars_configuration=None):  # noqa: E501
        """LimitCounter - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._campaign_id = None
        self._application_id = None
        self._account_id = None
        self._id = None
        self._action = None
        self._profile_id = None
        self._profile_integration_id = None
        self._coupon_id = None
        self._coupon_value = None
        self._referral_id = None
        self._referral_value = None
        self._identifier = None
        self._period = None
        self._limit = None
        self._counter = None
        self.discriminator = None

        self.campaign_id = campaign_id
        self.application_id = application_id
        self.account_id = account_id
        self.id = id
        self.action = action
        if profile_id is not None:
            self.profile_id = profile_id
        if profile_integration_id is not None:
            self.profile_integration_id = profile_integration_id
        if coupon_id is not None:
            self.coupon_id = coupon_id
        if coupon_value is not None:
            self.coupon_value = coupon_value
        if referral_id is not None:
            self.referral_id = referral_id
        if referral_value is not None:
            self.referral_value = referral_value
        if identifier is not None:
            self.identifier = identifier
        if period is not None:
            self.period = period
        self.limit = limit
        self.counter = counter

    @property
    def campaign_id(self):
        """Gets the campaign_id of this LimitCounter.  # noqa: E501

        The ID of the campaign that owns this entity.  # noqa: E501

        :return: The campaign_id of this LimitCounter.  # noqa: E501
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this LimitCounter.

        The ID of the campaign that owns this entity.  # noqa: E501

        :param campaign_id: The campaign_id of this LimitCounter.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and campaign_id is None:  # noqa: E501
            raise ValueError("Invalid value for `campaign_id`, must not be `None`")  # noqa: E501

        self._campaign_id = campaign_id

    @property
    def application_id(self):
        """Gets the application_id of this LimitCounter.  # noqa: E501

        The ID of the application that owns this entity.  # noqa: E501

        :return: The application_id of this LimitCounter.  # noqa: E501
        :rtype: int
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this LimitCounter.

        The ID of the application that owns this entity.  # noqa: E501

        :param application_id: The application_id of this LimitCounter.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and application_id is None:  # noqa: E501
            raise ValueError("Invalid value for `application_id`, must not be `None`")  # noqa: E501

        self._application_id = application_id

    @property
    def account_id(self):
        """Gets the account_id of this LimitCounter.  # noqa: E501

        The ID of the account that owns this entity.  # noqa: E501

        :return: The account_id of this LimitCounter.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this LimitCounter.

        The ID of the account that owns this entity.  # noqa: E501

        :param account_id: The account_id of this LimitCounter.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and account_id is None:  # noqa: E501
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def id(self):
        """Gets the id of this LimitCounter.  # noqa: E501

        Unique ID for this entity.  # noqa: E501

        :return: The id of this LimitCounter.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LimitCounter.

        Unique ID for this entity.  # noqa: E501

        :param id: The id of this LimitCounter.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def action(self):
        """Gets the action of this LimitCounter.  # noqa: E501

        The limitable action of the limit counter.  # noqa: E501

        :return: The action of this LimitCounter.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this LimitCounter.

        The limitable action of the limit counter.  # noqa: E501

        :param action: The action of this LimitCounter.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and action is None:  # noqa: E501
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def profile_id(self):
        """Gets the profile_id of this LimitCounter.  # noqa: E501

        The profile ID for which this limit counter is used.  # noqa: E501

        :return: The profile_id of this LimitCounter.  # noqa: E501
        :rtype: int
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this LimitCounter.

        The profile ID for which this limit counter is used.  # noqa: E501

        :param profile_id: The profile_id of this LimitCounter.  # noqa: E501
        :type: int
        """

        self._profile_id = profile_id

    @property
    def profile_integration_id(self):
        """Gets the profile_integration_id of this LimitCounter.  # noqa: E501

        The profile integration ID for which this limit counter is used.  # noqa: E501

        :return: The profile_integration_id of this LimitCounter.  # noqa: E501
        :rtype: str
        """
        return self._profile_integration_id

    @profile_integration_id.setter
    def profile_integration_id(self, profile_integration_id):
        """Sets the profile_integration_id of this LimitCounter.

        The profile integration ID for which this limit counter is used.  # noqa: E501

        :param profile_integration_id: The profile_integration_id of this LimitCounter.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                profile_integration_id is not None and len(profile_integration_id) > 1000):
            raise ValueError("Invalid value for `profile_integration_id`, length must be less than or equal to `1000`")  # noqa: E501

        self._profile_integration_id = profile_integration_id

    @property
    def coupon_id(self):
        """Gets the coupon_id of this LimitCounter.  # noqa: E501

        The internal coupon ID for which this limit counter is used.  # noqa: E501

        :return: The coupon_id of this LimitCounter.  # noqa: E501
        :rtype: int
        """
        return self._coupon_id

    @coupon_id.setter
    def coupon_id(self, coupon_id):
        """Sets the coupon_id of this LimitCounter.

        The internal coupon ID for which this limit counter is used.  # noqa: E501

        :param coupon_id: The coupon_id of this LimitCounter.  # noqa: E501
        :type: int
        """

        self._coupon_id = coupon_id

    @property
    def coupon_value(self):
        """Gets the coupon_value of this LimitCounter.  # noqa: E501

        The coupon value for which this limit counter is used.  # noqa: E501

        :return: The coupon_value of this LimitCounter.  # noqa: E501
        :rtype: str
        """
        return self._coupon_value

    @coupon_value.setter
    def coupon_value(self, coupon_value):
        """Sets the coupon_value of this LimitCounter.

        The coupon value for which this limit counter is used.  # noqa: E501

        :param coupon_value: The coupon_value of this LimitCounter.  # noqa: E501
        :type: str
        """

        self._coupon_value = coupon_value

    @property
    def referral_id(self):
        """Gets the referral_id of this LimitCounter.  # noqa: E501

        The referral ID for which this limit counter is used.  # noqa: E501

        :return: The referral_id of this LimitCounter.  # noqa: E501
        :rtype: int
        """
        return self._referral_id

    @referral_id.setter
    def referral_id(self, referral_id):
        """Sets the referral_id of this LimitCounter.

        The referral ID for which this limit counter is used.  # noqa: E501

        :param referral_id: The referral_id of this LimitCounter.  # noqa: E501
        :type: int
        """

        self._referral_id = referral_id

    @property
    def referral_value(self):
        """Gets the referral_value of this LimitCounter.  # noqa: E501

        The referral value for which this limit counter is used.  # noqa: E501

        :return: The referral_value of this LimitCounter.  # noqa: E501
        :rtype: str
        """
        return self._referral_value

    @referral_value.setter
    def referral_value(self, referral_value):
        """Sets the referral_value of this LimitCounter.

        The referral value for which this limit counter is used.  # noqa: E501

        :param referral_value: The referral_value of this LimitCounter.  # noqa: E501
        :type: str
        """

        self._referral_value = referral_value

    @property
    def identifier(self):
        """Gets the identifier of this LimitCounter.  # noqa: E501

        The arbitrary identifier for which this limit counter is used.  # noqa: E501

        :return: The identifier of this LimitCounter.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this LimitCounter.

        The arbitrary identifier for which this limit counter is used.  # noqa: E501

        :param identifier: The identifier of this LimitCounter.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def period(self):
        """Gets the period of this LimitCounter.  # noqa: E501

        The time period for which this limit counter is used.  # noqa: E501

        :return: The period of this LimitCounter.  # noqa: E501
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this LimitCounter.

        The time period for which this limit counter is used.  # noqa: E501

        :param period: The period of this LimitCounter.  # noqa: E501
        :type: str
        """

        self._period = period

    @property
    def limit(self):
        """Gets the limit of this LimitCounter.  # noqa: E501

        The highest possible value for this limit counter.  # noqa: E501

        :return: The limit of this LimitCounter.  # noqa: E501
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this LimitCounter.

        The highest possible value for this limit counter.  # noqa: E501

        :param limit: The limit of this LimitCounter.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and limit is None:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must not be `None`")  # noqa: E501

        self._limit = limit

    @property
    def counter(self):
        """Gets the counter of this LimitCounter.  # noqa: E501

        The current value for this limit counter.  # noqa: E501

        :return: The counter of this LimitCounter.  # noqa: E501
        :rtype: float
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this LimitCounter.

        The current value for this limit counter.  # noqa: E501

        :param counter: The counter of this LimitCounter.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and counter is None:  # noqa: E501
            raise ValueError("Invalid value for `counter`, must not be `None`")  # noqa: E501

        self._counter = counter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LimitCounter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LimitCounter):
            return True

        return self.to_dict() != other.to_dict()
