# coding: utf-8

"""
    Talon.One API

    The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from talon_one.models.limit_config import LimitConfig  # noqa: F401,E501


class NewApplication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'key': 'str',
        'timezone': 'str',
        'currency': 'str',
        'case_sensitivity': 'str',
        'attributes': 'object',
        'limits': 'list[LimitConfig]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'key': 'key',
        'timezone': 'timezone',
        'currency': 'currency',
        'case_sensitivity': 'caseSensitivity',
        'attributes': 'attributes',
        'limits': 'limits'
    }

    def __init__(self, name=None, description=None, key=None, timezone=None, currency=None, case_sensitivity=None, attributes=None, limits=None):  # noqa: E501
        """NewApplication - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._key = None
        self._timezone = None
        self._currency = None
        self._case_sensitivity = None
        self._attributes = None
        self._limits = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        self.key = key
        self.timezone = timezone
        self.currency = currency
        if case_sensitivity is not None:
            self.case_sensitivity = case_sensitivity
        if attributes is not None:
            self.attributes = attributes
        if limits is not None:
            self.limits = limits

    @property
    def name(self):
        """Gets the name of this NewApplication.  # noqa: E501

        The name of this application.  # noqa: E501

        :return: The name of this NewApplication.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewApplication.

        The name of this application.  # noqa: E501

        :param name: The name of this NewApplication.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this NewApplication.  # noqa: E501

        A longer description of the application.  # noqa: E501

        :return: The description of this NewApplication.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NewApplication.

        A longer description of the application.  # noqa: E501

        :param description: The description of this NewApplication.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def key(self):
        """Gets the key of this NewApplication.  # noqa: E501

        Hex key for HMAC-signing API calls as coming from this application (16 hex digits)  # noqa: E501

        :return: The key of this NewApplication.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this NewApplication.

        Hex key for HMAC-signing API calls as coming from this application (16 hex digits)  # noqa: E501

        :param key: The key of this NewApplication.  # noqa: E501
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501
        if key is not None and len(key) > 16:
            raise ValueError("Invalid value for `key`, length must be less than or equal to `16`")  # noqa: E501
        if key is not None and len(key) < 16:
            raise ValueError("Invalid value for `key`, length must be greater than or equal to `16`")  # noqa: E501
        if key is not None and not re.search(r'^[a-fA-F0-9]{16}$', key):  # noqa: E501
            raise ValueError(r"Invalid value for `key`, must be a follow pattern or equal to `/^[a-fA-F0-9]{16}$/`")  # noqa: E501

        self._key = key

    @property
    def timezone(self):
        """Gets the timezone of this NewApplication.  # noqa: E501

        A string containing an IANA timezone descriptor.  # noqa: E501

        :return: The timezone of this NewApplication.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this NewApplication.

        A string containing an IANA timezone descriptor.  # noqa: E501

        :param timezone: The timezone of this NewApplication.  # noqa: E501
        :type: str
        """
        if timezone is None:
            raise ValueError("Invalid value for `timezone`, must not be `None`")  # noqa: E501
        if timezone is not None and len(timezone) < 1:
            raise ValueError("Invalid value for `timezone`, length must be greater than or equal to `1`")  # noqa: E501

        self._timezone = timezone

    @property
    def currency(self):
        """Gets the currency of this NewApplication.  # noqa: E501

        A string describing a default currency for new customer sessions.  # noqa: E501

        :return: The currency of this NewApplication.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this NewApplication.

        A string describing a default currency for new customer sessions.  # noqa: E501

        :param currency: The currency of this NewApplication.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501
        if currency is not None and len(currency) < 1:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `1`")  # noqa: E501

        self._currency = currency

    @property
    def case_sensitivity(self):
        """Gets the case_sensitivity of this NewApplication.  # noqa: E501

        A string indicating how should campaigns in this application deal with case sensitivity on coupon codes.  # noqa: E501

        :return: The case_sensitivity of this NewApplication.  # noqa: E501
        :rtype: str
        """
        return self._case_sensitivity

    @case_sensitivity.setter
    def case_sensitivity(self, case_sensitivity):
        """Sets the case_sensitivity of this NewApplication.

        A string indicating how should campaigns in this application deal with case sensitivity on coupon codes.  # noqa: E501

        :param case_sensitivity: The case_sensitivity of this NewApplication.  # noqa: E501
        :type: str
        """
        allowed_values = ["sensitive", "insensitive-uppercase", "insensitive-lowercase"]  # noqa: E501
        if case_sensitivity not in allowed_values:
            raise ValueError(
                "Invalid value for `case_sensitivity` ({0}), must be one of {1}"  # noqa: E501
                .format(case_sensitivity, allowed_values)
            )

        self._case_sensitivity = case_sensitivity

    @property
    def attributes(self):
        """Gets the attributes of this NewApplication.  # noqa: E501

        Arbitrary properties associated with this campaign  # noqa: E501

        :return: The attributes of this NewApplication.  # noqa: E501
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this NewApplication.

        Arbitrary properties associated with this campaign  # noqa: E501

        :param attributes: The attributes of this NewApplication.  # noqa: E501
        :type: object
        """

        self._attributes = attributes

    @property
    def limits(self):
        """Gets the limits of this NewApplication.  # noqa: E501

        Default limits for campaigns created in this application  # noqa: E501

        :return: The limits of this NewApplication.  # noqa: E501
        :rtype: list[LimitConfig]
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this NewApplication.

        Default limits for campaigns created in this application  # noqa: E501

        :param limits: The limits of this NewApplication.  # noqa: E501
        :type: list[LimitConfig]
        """

        self._limits = limits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewApplication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewApplication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
