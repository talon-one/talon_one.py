# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class CreateTemplateCampaign(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'template_id': 'int',
        'campaign_attributes_overrides': 'object',
        'template_param_values': 'list[Binding]',
        'limit_overrides': 'list[LimitConfig]',
        'campaign_groups': 'list[int]',
        'tags': 'list[str]',
        'evaluation_group_id': 'int',
        'linked_store_ids': 'list[int]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'template_id': 'templateId',
        'campaign_attributes_overrides': 'campaignAttributesOverrides',
        'template_param_values': 'templateParamValues',
        'limit_overrides': 'limitOverrides',
        'campaign_groups': 'campaignGroups',
        'tags': 'tags',
        'evaluation_group_id': 'evaluationGroupId',
        'linked_store_ids': 'linkedStoreIds'
    }

    def __init__(self, name=None, description=None, template_id=None, campaign_attributes_overrides=None, template_param_values=None, limit_overrides=None, campaign_groups=None, tags=None, evaluation_group_id=None, linked_store_ids=None, local_vars_configuration=None):  # noqa: E501
        """CreateTemplateCampaign - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._description = None
        self._template_id = None
        self._campaign_attributes_overrides = None
        self._template_param_values = None
        self._limit_overrides = None
        self._campaign_groups = None
        self._tags = None
        self._evaluation_group_id = None
        self._linked_store_ids = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        self.template_id = template_id
        if campaign_attributes_overrides is not None:
            self.campaign_attributes_overrides = campaign_attributes_overrides
        if template_param_values is not None:
            self.template_param_values = template_param_values
        if limit_overrides is not None:
            self.limit_overrides = limit_overrides
        if campaign_groups is not None:
            self.campaign_groups = campaign_groups
        if tags is not None:
            self.tags = tags
        if evaluation_group_id is not None:
            self.evaluation_group_id = evaluation_group_id
        if linked_store_ids is not None:
            self.linked_store_ids = linked_store_ids

    @property
    def name(self):
        """Gets the name of this CreateTemplateCampaign.  # noqa: E501

        A user-facing name for this campaign.  # noqa: E501

        :return: The name of this CreateTemplateCampaign.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateTemplateCampaign.

        A user-facing name for this campaign.  # noqa: E501

        :param name: The name of this CreateTemplateCampaign.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateTemplateCampaign.  # noqa: E501

        A detailed description of the campaign.  # noqa: E501

        :return: The description of this CreateTemplateCampaign.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateTemplateCampaign.

        A detailed description of the campaign.  # noqa: E501

        :param description: The description of this CreateTemplateCampaign.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def template_id(self):
        """Gets the template_id of this CreateTemplateCampaign.  # noqa: E501

        The ID of the Campaign Template which will be used in order to create the Campaign.  # noqa: E501

        :return: The template_id of this CreateTemplateCampaign.  # noqa: E501
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this CreateTemplateCampaign.

        The ID of the Campaign Template which will be used in order to create the Campaign.  # noqa: E501

        :param template_id: The template_id of this CreateTemplateCampaign.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and template_id is None:  # noqa: E501
            raise ValueError("Invalid value for `template_id`, must not be `None`")  # noqa: E501

        self._template_id = template_id

    @property
    def campaign_attributes_overrides(self):
        """Gets the campaign_attributes_overrides of this CreateTemplateCampaign.  # noqa: E501

        Custom Campaign Attributes. If the Campaign Template defines the same values, they will be overridden.  # noqa: E501

        :return: The campaign_attributes_overrides of this CreateTemplateCampaign.  # noqa: E501
        :rtype: object
        """
        return self._campaign_attributes_overrides

    @campaign_attributes_overrides.setter
    def campaign_attributes_overrides(self, campaign_attributes_overrides):
        """Sets the campaign_attributes_overrides of this CreateTemplateCampaign.

        Custom Campaign Attributes. If the Campaign Template defines the same values, they will be overridden.  # noqa: E501

        :param campaign_attributes_overrides: The campaign_attributes_overrides of this CreateTemplateCampaign.  # noqa: E501
        :type: object
        """

        self._campaign_attributes_overrides = campaign_attributes_overrides

    @property
    def template_param_values(self):
        """Gets the template_param_values of this CreateTemplateCampaign.  # noqa: E501

        Actual values to replace the template placeholder values in the Ruleset bindings. Values for all Template Parameters must be provided.  # noqa: E501

        :return: The template_param_values of this CreateTemplateCampaign.  # noqa: E501
        :rtype: list[Binding]
        """
        return self._template_param_values

    @template_param_values.setter
    def template_param_values(self, template_param_values):
        """Sets the template_param_values of this CreateTemplateCampaign.

        Actual values to replace the template placeholder values in the Ruleset bindings. Values for all Template Parameters must be provided.  # noqa: E501

        :param template_param_values: The template_param_values of this CreateTemplateCampaign.  # noqa: E501
        :type: list[Binding]
        """

        self._template_param_values = template_param_values

    @property
    def limit_overrides(self):
        """Gets the limit_overrides of this CreateTemplateCampaign.  # noqa: E501

        Limits for this Campaign. If the Campaign Template or Application define default values for the same limits, they will be overridden.  # noqa: E501

        :return: The limit_overrides of this CreateTemplateCampaign.  # noqa: E501
        :rtype: list[LimitConfig]
        """
        return self._limit_overrides

    @limit_overrides.setter
    def limit_overrides(self, limit_overrides):
        """Sets the limit_overrides of this CreateTemplateCampaign.

        Limits for this Campaign. If the Campaign Template or Application define default values for the same limits, they will be overridden.  # noqa: E501

        :param limit_overrides: The limit_overrides of this CreateTemplateCampaign.  # noqa: E501
        :type: list[LimitConfig]
        """

        self._limit_overrides = limit_overrides

    @property
    def campaign_groups(self):
        """Gets the campaign_groups of this CreateTemplateCampaign.  # noqa: E501

        The IDs of the [campaign groups](https://docs.talon.one/docs/product/account/account-settings/managing-campaign-groups) this campaign belongs to.   # noqa: E501

        :return: The campaign_groups of this CreateTemplateCampaign.  # noqa: E501
        :rtype: list[int]
        """
        return self._campaign_groups

    @campaign_groups.setter
    def campaign_groups(self, campaign_groups):
        """Sets the campaign_groups of this CreateTemplateCampaign.

        The IDs of the [campaign groups](https://docs.talon.one/docs/product/account/account-settings/managing-campaign-groups) this campaign belongs to.   # noqa: E501

        :param campaign_groups: The campaign_groups of this CreateTemplateCampaign.  # noqa: E501
        :type: list[int]
        """

        self._campaign_groups = campaign_groups

    @property
    def tags(self):
        """Gets the tags of this CreateTemplateCampaign.  # noqa: E501

        A list of tags for the campaign. If the campaign template has tags, they will be overridden by this list.  # noqa: E501

        :return: The tags of this CreateTemplateCampaign.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateTemplateCampaign.

        A list of tags for the campaign. If the campaign template has tags, they will be overridden by this list.  # noqa: E501

        :param tags: The tags of this CreateTemplateCampaign.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def evaluation_group_id(self):
        """Gets the evaluation_group_id of this CreateTemplateCampaign.  # noqa: E501

        The ID of the campaign evaluation group the campaign belongs to.  # noqa: E501

        :return: The evaluation_group_id of this CreateTemplateCampaign.  # noqa: E501
        :rtype: int
        """
        return self._evaluation_group_id

    @evaluation_group_id.setter
    def evaluation_group_id(self, evaluation_group_id):
        """Sets the evaluation_group_id of this CreateTemplateCampaign.

        The ID of the campaign evaluation group the campaign belongs to.  # noqa: E501

        :param evaluation_group_id: The evaluation_group_id of this CreateTemplateCampaign.  # noqa: E501
        :type: int
        """

        self._evaluation_group_id = evaluation_group_id

    @property
    def linked_store_ids(self):
        """Gets the linked_store_ids of this CreateTemplateCampaign.  # noqa: E501

        A list of store IDs that are linked to the campaign.  **Note:** Campaigns with linked store IDs will only be evaluated when there is a [customer session update](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2) that references a linked store.   # noqa: E501

        :return: The linked_store_ids of this CreateTemplateCampaign.  # noqa: E501
        :rtype: list[int]
        """
        return self._linked_store_ids

    @linked_store_ids.setter
    def linked_store_ids(self, linked_store_ids):
        """Sets the linked_store_ids of this CreateTemplateCampaign.

        A list of store IDs that are linked to the campaign.  **Note:** Campaigns with linked store IDs will only be evaluated when there is a [customer session update](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2) that references a linked store.   # noqa: E501

        :param linked_store_ids: The linked_store_ids of this CreateTemplateCampaign.  # noqa: E501
        :type: list[int]
        """

        self._linked_store_ids = linked_store_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTemplateCampaign):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateTemplateCampaign):
            return True

        return self.to_dict() != other.to_dict()
