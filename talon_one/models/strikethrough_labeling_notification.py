# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class StrikethroughLabelingNotification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'application_id': 'int',
        'current_batch': 'int',
        'total_batches': 'int',
        'trigger': 'StrikethroughTrigger',
        'changed_items': 'list[StrikethroughChangedItem]'
    }

    attribute_map = {
        'application_id': 'applicationId',
        'current_batch': 'currentBatch',
        'total_batches': 'totalBatches',
        'trigger': 'trigger',
        'changed_items': 'changedItems'
    }

    def __init__(self, application_id=None, current_batch=None, total_batches=None, trigger=None, changed_items=None, local_vars_configuration=None):  # noqa: E501
        """StrikethroughLabelingNotification - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._application_id = None
        self._current_batch = None
        self._total_batches = None
        self._trigger = None
        self._changed_items = None
        self.discriminator = None

        self.application_id = application_id
        self.current_batch = current_batch
        self.total_batches = total_batches
        self.trigger = trigger
        self.changed_items = changed_items

    @property
    def application_id(self):
        """Gets the application_id of this StrikethroughLabelingNotification.  # noqa: E501

        The ID of the application that catalog items labels belongs to.  # noqa: E501

        :return: The application_id of this StrikethroughLabelingNotification.  # noqa: E501
        :rtype: int
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this StrikethroughLabelingNotification.

        The ID of the application that catalog items labels belongs to.  # noqa: E501

        :param application_id: The application_id of this StrikethroughLabelingNotification.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and application_id is None:  # noqa: E501
            raise ValueError("Invalid value for `application_id`, must not be `None`")  # noqa: E501

        self._application_id = application_id

    @property
    def current_batch(self):
        """Gets the current_batch of this StrikethroughLabelingNotification.  # noqa: E501

        The batch number of the notification. Notifications might be sent in different batches.  # noqa: E501

        :return: The current_batch of this StrikethroughLabelingNotification.  # noqa: E501
        :rtype: int
        """
        return self._current_batch

    @current_batch.setter
    def current_batch(self, current_batch):
        """Sets the current_batch of this StrikethroughLabelingNotification.

        The batch number of the notification. Notifications might be sent in different batches.  # noqa: E501

        :param current_batch: The current_batch of this StrikethroughLabelingNotification.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and current_batch is None:  # noqa: E501
            raise ValueError("Invalid value for `current_batch`, must not be `None`")  # noqa: E501

        self._current_batch = current_batch

    @property
    def total_batches(self):
        """Gets the total_batches of this StrikethroughLabelingNotification.  # noqa: E501

        The total number of batches for the notification.  # noqa: E501

        :return: The total_batches of this StrikethroughLabelingNotification.  # noqa: E501
        :rtype: int
        """
        return self._total_batches

    @total_batches.setter
    def total_batches(self, total_batches):
        """Sets the total_batches of this StrikethroughLabelingNotification.

        The total number of batches for the notification.  # noqa: E501

        :param total_batches: The total_batches of this StrikethroughLabelingNotification.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and total_batches is None:  # noqa: E501
            raise ValueError("Invalid value for `total_batches`, must not be `None`")  # noqa: E501

        self._total_batches = total_batches

    @property
    def trigger(self):
        """Gets the trigger of this StrikethroughLabelingNotification.  # noqa: E501


        :return: The trigger of this StrikethroughLabelingNotification.  # noqa: E501
        :rtype: StrikethroughTrigger
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this StrikethroughLabelingNotification.


        :param trigger: The trigger of this StrikethroughLabelingNotification.  # noqa: E501
        :type: StrikethroughTrigger
        """
        if self.local_vars_configuration.client_side_validation and trigger is None:  # noqa: E501
            raise ValueError("Invalid value for `trigger`, must not be `None`")  # noqa: E501

        self._trigger = trigger

    @property
    def changed_items(self):
        """Gets the changed_items of this StrikethroughLabelingNotification.  # noqa: E501


        :return: The changed_items of this StrikethroughLabelingNotification.  # noqa: E501
        :rtype: list[StrikethroughChangedItem]
        """
        return self._changed_items

    @changed_items.setter
    def changed_items(self, changed_items):
        """Sets the changed_items of this StrikethroughLabelingNotification.


        :param changed_items: The changed_items of this StrikethroughLabelingNotification.  # noqa: E501
        :type: list[StrikethroughChangedItem]
        """
        if self.local_vars_configuration.client_side_validation and changed_items is None:  # noqa: E501
            raise ValueError("Invalid value for `changed_items`, must not be `None`")  # noqa: E501

        self._changed_items = changed_items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StrikethroughLabelingNotification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StrikethroughLabelingNotification):
            return True

        return self.to_dict() != other.to_dict()
