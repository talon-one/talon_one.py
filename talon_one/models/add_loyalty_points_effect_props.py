# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class AddLoyaltyPointsEffectProps(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'program_id': 'int',
        'sub_ledger_id': 'str',
        'value': 'float',
        'desired_value': 'float',
        'recipient_integration_id': 'str',
        'start_date': 'datetime',
        'expiry_date': 'datetime',
        'transaction_uuid': 'str',
        'cart_item_position': 'float',
        'cart_item_sub_position': 'float',
        'card_identifier': 'str',
        'bundle_index': 'int',
        'bundle_name': 'str'
    }

    attribute_map = {
        'name': 'name',
        'program_id': 'programId',
        'sub_ledger_id': 'subLedgerId',
        'value': 'value',
        'desired_value': 'desiredValue',
        'recipient_integration_id': 'recipientIntegrationId',
        'start_date': 'startDate',
        'expiry_date': 'expiryDate',
        'transaction_uuid': 'transactionUUID',
        'cart_item_position': 'cartItemPosition',
        'cart_item_sub_position': 'cartItemSubPosition',
        'card_identifier': 'cardIdentifier',
        'bundle_index': 'bundleIndex',
        'bundle_name': 'bundleName'
    }

    def __init__(self, name=None, program_id=None, sub_ledger_id=None, value=None, desired_value=None, recipient_integration_id=None, start_date=None, expiry_date=None, transaction_uuid=None, cart_item_position=None, cart_item_sub_position=None, card_identifier=None, bundle_index=None, bundle_name=None, local_vars_configuration=None):  # noqa: E501
        """AddLoyaltyPointsEffectProps - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._program_id = None
        self._sub_ledger_id = None
        self._value = None
        self._desired_value = None
        self._recipient_integration_id = None
        self._start_date = None
        self._expiry_date = None
        self._transaction_uuid = None
        self._cart_item_position = None
        self._cart_item_sub_position = None
        self._card_identifier = None
        self._bundle_index = None
        self._bundle_name = None
        self.discriminator = None

        self.name = name
        self.program_id = program_id
        self.sub_ledger_id = sub_ledger_id
        self.value = value
        if desired_value is not None:
            self.desired_value = desired_value
        self.recipient_integration_id = recipient_integration_id
        if start_date is not None:
            self.start_date = start_date
        if expiry_date is not None:
            self.expiry_date = expiry_date
        self.transaction_uuid = transaction_uuid
        if cart_item_position is not None:
            self.cart_item_position = cart_item_position
        if cart_item_sub_position is not None:
            self.cart_item_sub_position = cart_item_sub_position
        if card_identifier is not None:
            self.card_identifier = card_identifier
        if bundle_index is not None:
            self.bundle_index = bundle_index
        if bundle_name is not None:
            self.bundle_name = bundle_name

    @property
    def name(self):
        """Gets the name of this AddLoyaltyPointsEffectProps.  # noqa: E501

        The name / description of this loyalty point addition.  # noqa: E501

        :return: The name of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddLoyaltyPointsEffectProps.

        The name / description of this loyalty point addition.  # noqa: E501

        :param name: The name of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def program_id(self):
        """Gets the program_id of this AddLoyaltyPointsEffectProps.  # noqa: E501

        The ID of the loyalty program where these points were added.  # noqa: E501

        :return: The program_id of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :rtype: int
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """Sets the program_id of this AddLoyaltyPointsEffectProps.

        The ID of the loyalty program where these points were added.  # noqa: E501

        :param program_id: The program_id of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and program_id is None:  # noqa: E501
            raise ValueError("Invalid value for `program_id`, must not be `None`")  # noqa: E501

        self._program_id = program_id

    @property
    def sub_ledger_id(self):
        """Gets the sub_ledger_id of this AddLoyaltyPointsEffectProps.  # noqa: E501

        The ID of the subledger within the loyalty program where these points were added.  # noqa: E501

        :return: The sub_ledger_id of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :rtype: str
        """
        return self._sub_ledger_id

    @sub_ledger_id.setter
    def sub_ledger_id(self, sub_ledger_id):
        """Sets the sub_ledger_id of this AddLoyaltyPointsEffectProps.

        The ID of the subledger within the loyalty program where these points were added.  # noqa: E501

        :param sub_ledger_id: The sub_ledger_id of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and sub_ledger_id is None:  # noqa: E501
            raise ValueError("Invalid value for `sub_ledger_id`, must not be `None`")  # noqa: E501

        self._sub_ledger_id = sub_ledger_id

    @property
    def value(self):
        """Gets the value of this AddLoyaltyPointsEffectProps.  # noqa: E501

        The amount of points that were added.  # noqa: E501

        :return: The value of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AddLoyaltyPointsEffectProps.

        The amount of points that were added.  # noqa: E501

        :param value: The value of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and value is None:  # noqa: E501
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def desired_value(self):
        """Gets the desired_value of this AddLoyaltyPointsEffectProps.  # noqa: E501

        The original amount of loyalty points to be awarded.  # noqa: E501

        :return: The desired_value of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :rtype: float
        """
        return self._desired_value

    @desired_value.setter
    def desired_value(self, desired_value):
        """Sets the desired_value of this AddLoyaltyPointsEffectProps.

        The original amount of loyalty points to be awarded.  # noqa: E501

        :param desired_value: The desired_value of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :type: float
        """

        self._desired_value = desired_value

    @property
    def recipient_integration_id(self):
        """Gets the recipient_integration_id of this AddLoyaltyPointsEffectProps.  # noqa: E501

        The user for whom these points were added.  # noqa: E501

        :return: The recipient_integration_id of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :rtype: str
        """
        return self._recipient_integration_id

    @recipient_integration_id.setter
    def recipient_integration_id(self, recipient_integration_id):
        """Sets the recipient_integration_id of this AddLoyaltyPointsEffectProps.

        The user for whom these points were added.  # noqa: E501

        :param recipient_integration_id: The recipient_integration_id of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and recipient_integration_id is None:  # noqa: E501
            raise ValueError("Invalid value for `recipient_integration_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                recipient_integration_id is not None and len(recipient_integration_id) > 1000):
            raise ValueError("Invalid value for `recipient_integration_id`, length must be less than or equal to `1000`")  # noqa: E501

        self._recipient_integration_id = recipient_integration_id

    @property
    def start_date(self):
        """Gets the start_date of this AddLoyaltyPointsEffectProps.  # noqa: E501

        Date after which points will be valid.  # noqa: E501

        :return: The start_date of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this AddLoyaltyPointsEffectProps.

        Date after which points will be valid.  # noqa: E501

        :param start_date: The start_date of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def expiry_date(self):
        """Gets the expiry_date of this AddLoyaltyPointsEffectProps.  # noqa: E501

        Date after which points will expire.  # noqa: E501

        :return: The expiry_date of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this AddLoyaltyPointsEffectProps.

        Date after which points will expire.  # noqa: E501

        :param expiry_date: The expiry_date of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :type: datetime
        """

        self._expiry_date = expiry_date

    @property
    def transaction_uuid(self):
        """Gets the transaction_uuid of this AddLoyaltyPointsEffectProps.  # noqa: E501

        The identifier of this addition in the loyalty ledger.  # noqa: E501

        :return: The transaction_uuid of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :rtype: str
        """
        return self._transaction_uuid

    @transaction_uuid.setter
    def transaction_uuid(self, transaction_uuid):
        """Sets the transaction_uuid of this AddLoyaltyPointsEffectProps.

        The identifier of this addition in the loyalty ledger.  # noqa: E501

        :param transaction_uuid: The transaction_uuid of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and transaction_uuid is None:  # noqa: E501
            raise ValueError("Invalid value for `transaction_uuid`, must not be `None`")  # noqa: E501

        self._transaction_uuid = transaction_uuid

    @property
    def cart_item_position(self):
        """Gets the cart_item_position of this AddLoyaltyPointsEffectProps.  # noqa: E501

        The index of the item in the cart items list on which the loyal points addition should be applied.  # noqa: E501

        :return: The cart_item_position of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :rtype: float
        """
        return self._cart_item_position

    @cart_item_position.setter
    def cart_item_position(self, cart_item_position):
        """Sets the cart_item_position of this AddLoyaltyPointsEffectProps.

        The index of the item in the cart items list on which the loyal points addition should be applied.  # noqa: E501

        :param cart_item_position: The cart_item_position of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :type: float
        """

        self._cart_item_position = cart_item_position

    @property
    def cart_item_sub_position(self):
        """Gets the cart_item_sub_position of this AddLoyaltyPointsEffectProps.  # noqa: E501

        For cart items with `quantity` > 1, the sub position indicates to which item the loyalty points addition is applied.   # noqa: E501

        :return: The cart_item_sub_position of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :rtype: float
        """
        return self._cart_item_sub_position

    @cart_item_sub_position.setter
    def cart_item_sub_position(self, cart_item_sub_position):
        """Sets the cart_item_sub_position of this AddLoyaltyPointsEffectProps.

        For cart items with `quantity` > 1, the sub position indicates to which item the loyalty points addition is applied.   # noqa: E501

        :param cart_item_sub_position: The cart_item_sub_position of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :type: float
        """

        self._cart_item_sub_position = cart_item_sub_position

    @property
    def card_identifier(self):
        """Gets the card_identifier of this AddLoyaltyPointsEffectProps.  # noqa: E501

        The alphanumeric identifier of the loyalty card.   # noqa: E501

        :return: The card_identifier of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :rtype: str
        """
        return self._card_identifier

    @card_identifier.setter
    def card_identifier(self, card_identifier):
        """Sets the card_identifier of this AddLoyaltyPointsEffectProps.

        The alphanumeric identifier of the loyalty card.   # noqa: E501

        :param card_identifier: The card_identifier of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                card_identifier is not None and len(card_identifier) > 108):
            raise ValueError("Invalid value for `card_identifier`, length must be less than or equal to `108`")  # noqa: E501

        self._card_identifier = card_identifier

    @property
    def bundle_index(self):
        """Gets the bundle_index of this AddLoyaltyPointsEffectProps.  # noqa: E501

        The position of the bundle in a list of item bundles created from the same bundle definition.  # noqa: E501

        :return: The bundle_index of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :rtype: int
        """
        return self._bundle_index

    @bundle_index.setter
    def bundle_index(self, bundle_index):
        """Sets the bundle_index of this AddLoyaltyPointsEffectProps.

        The position of the bundle in a list of item bundles created from the same bundle definition.  # noqa: E501

        :param bundle_index: The bundle_index of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :type: int
        """

        self._bundle_index = bundle_index

    @property
    def bundle_name(self):
        """Gets the bundle_name of this AddLoyaltyPointsEffectProps.  # noqa: E501

        The name of the bundle definition.  # noqa: E501

        :return: The bundle_name of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :rtype: str
        """
        return self._bundle_name

    @bundle_name.setter
    def bundle_name(self, bundle_name):
        """Sets the bundle_name of this AddLoyaltyPointsEffectProps.

        The name of the bundle definition.  # noqa: E501

        :param bundle_name: The bundle_name of this AddLoyaltyPointsEffectProps.  # noqa: E501
        :type: str
        """

        self._bundle_name = bundle_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddLoyaltyPointsEffectProps):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddLoyaltyPointsEffectProps):
            return True

        return self.to_dict() != other.to_dict()
