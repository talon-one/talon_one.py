# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class CustomerActivityReport(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'integration_id': 'str',
        'created': 'datetime',
        'name': 'str',
        'customer_id': 'int',
        'last_activity': 'datetime',
        'coupon_redemptions': 'int',
        'coupon_use_attempts': 'int',
        'coupon_failed_attempts': 'int',
        'accrued_discounts': 'float',
        'accrued_revenue': 'float',
        'total_orders': 'int',
        'total_orders_no_coupon': 'int',
        'campaign_name': 'str'
    }

    attribute_map = {
        'integration_id': 'integrationId',
        'created': 'created',
        'name': 'name',
        'customer_id': 'customerId',
        'last_activity': 'lastActivity',
        'coupon_redemptions': 'couponRedemptions',
        'coupon_use_attempts': 'couponUseAttempts',
        'coupon_failed_attempts': 'couponFailedAttempts',
        'accrued_discounts': 'accruedDiscounts',
        'accrued_revenue': 'accruedRevenue',
        'total_orders': 'totalOrders',
        'total_orders_no_coupon': 'totalOrdersNoCoupon',
        'campaign_name': 'campaignName'
    }

    def __init__(self, integration_id=None, created=None, name=None, customer_id=None, last_activity=None, coupon_redemptions=None, coupon_use_attempts=None, coupon_failed_attempts=None, accrued_discounts=None, accrued_revenue=None, total_orders=None, total_orders_no_coupon=None, campaign_name=None, local_vars_configuration=None):  # noqa: E501
        """CustomerActivityReport - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._integration_id = None
        self._created = None
        self._name = None
        self._customer_id = None
        self._last_activity = None
        self._coupon_redemptions = None
        self._coupon_use_attempts = None
        self._coupon_failed_attempts = None
        self._accrued_discounts = None
        self._accrued_revenue = None
        self._total_orders = None
        self._total_orders_no_coupon = None
        self._campaign_name = None
        self.discriminator = None

        self.integration_id = integration_id
        self.created = created
        self.name = name
        self.customer_id = customer_id
        if last_activity is not None:
            self.last_activity = last_activity
        self.coupon_redemptions = coupon_redemptions
        self.coupon_use_attempts = coupon_use_attempts
        self.coupon_failed_attempts = coupon_failed_attempts
        self.accrued_discounts = accrued_discounts
        self.accrued_revenue = accrued_revenue
        self.total_orders = total_orders
        self.total_orders_no_coupon = total_orders_no_coupon
        self.campaign_name = campaign_name

    @property
    def integration_id(self):
        """Gets the integration_id of this CustomerActivityReport.  # noqa: E501

        The integration ID set by your integration layer.  # noqa: E501

        :return: The integration_id of this CustomerActivityReport.  # noqa: E501
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this CustomerActivityReport.

        The integration ID set by your integration layer.  # noqa: E501

        :param integration_id: The integration_id of this CustomerActivityReport.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and integration_id is None:  # noqa: E501
            raise ValueError("Invalid value for `integration_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                integration_id is not None and len(integration_id) > 1000):
            raise ValueError("Invalid value for `integration_id`, length must be less than or equal to `1000`")  # noqa: E501

        self._integration_id = integration_id

    @property
    def created(self):
        """Gets the created of this CustomerActivityReport.  # noqa: E501

        The time this entity was created.  # noqa: E501

        :return: The created of this CustomerActivityReport.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CustomerActivityReport.

        The time this entity was created.  # noqa: E501

        :param created: The created of this CustomerActivityReport.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def name(self):
        """Gets the name of this CustomerActivityReport.  # noqa: E501

        The name for this customer profile.  # noqa: E501

        :return: The name of this CustomerActivityReport.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomerActivityReport.

        The name for this customer profile.  # noqa: E501

        :param name: The name of this CustomerActivityReport.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def customer_id(self):
        """Gets the customer_id of this CustomerActivityReport.  # noqa: E501

        The internal Talon.One ID of the customer.  # noqa: E501

        :return: The customer_id of this CustomerActivityReport.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CustomerActivityReport.

        The internal Talon.One ID of the customer.  # noqa: E501

        :param customer_id: The customer_id of this CustomerActivityReport.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and customer_id is None:  # noqa: E501
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def last_activity(self):
        """Gets the last_activity of this CustomerActivityReport.  # noqa: E501

        The last activity of the customer.  # noqa: E501

        :return: The last_activity of this CustomerActivityReport.  # noqa: E501
        :rtype: datetime
        """
        return self._last_activity

    @last_activity.setter
    def last_activity(self, last_activity):
        """Sets the last_activity of this CustomerActivityReport.

        The last activity of the customer.  # noqa: E501

        :param last_activity: The last_activity of this CustomerActivityReport.  # noqa: E501
        :type: datetime
        """

        self._last_activity = last_activity

    @property
    def coupon_redemptions(self):
        """Gets the coupon_redemptions of this CustomerActivityReport.  # noqa: E501

        Number of coupon redemptions in all customer campaigns.  # noqa: E501

        :return: The coupon_redemptions of this CustomerActivityReport.  # noqa: E501
        :rtype: int
        """
        return self._coupon_redemptions

    @coupon_redemptions.setter
    def coupon_redemptions(self, coupon_redemptions):
        """Sets the coupon_redemptions of this CustomerActivityReport.

        Number of coupon redemptions in all customer campaigns.  # noqa: E501

        :param coupon_redemptions: The coupon_redemptions of this CustomerActivityReport.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and coupon_redemptions is None:  # noqa: E501
            raise ValueError("Invalid value for `coupon_redemptions`, must not be `None`")  # noqa: E501

        self._coupon_redemptions = coupon_redemptions

    @property
    def coupon_use_attempts(self):
        """Gets the coupon_use_attempts of this CustomerActivityReport.  # noqa: E501

        Number of coupon use attempts in all customer campaigns.  # noqa: E501

        :return: The coupon_use_attempts of this CustomerActivityReport.  # noqa: E501
        :rtype: int
        """
        return self._coupon_use_attempts

    @coupon_use_attempts.setter
    def coupon_use_attempts(self, coupon_use_attempts):
        """Sets the coupon_use_attempts of this CustomerActivityReport.

        Number of coupon use attempts in all customer campaigns.  # noqa: E501

        :param coupon_use_attempts: The coupon_use_attempts of this CustomerActivityReport.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and coupon_use_attempts is None:  # noqa: E501
            raise ValueError("Invalid value for `coupon_use_attempts`, must not be `None`")  # noqa: E501

        self._coupon_use_attempts = coupon_use_attempts

    @property
    def coupon_failed_attempts(self):
        """Gets the coupon_failed_attempts of this CustomerActivityReport.  # noqa: E501

        Number of failed coupon use attempts in all customer campaigns.  # noqa: E501

        :return: The coupon_failed_attempts of this CustomerActivityReport.  # noqa: E501
        :rtype: int
        """
        return self._coupon_failed_attempts

    @coupon_failed_attempts.setter
    def coupon_failed_attempts(self, coupon_failed_attempts):
        """Sets the coupon_failed_attempts of this CustomerActivityReport.

        Number of failed coupon use attempts in all customer campaigns.  # noqa: E501

        :param coupon_failed_attempts: The coupon_failed_attempts of this CustomerActivityReport.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and coupon_failed_attempts is None:  # noqa: E501
            raise ValueError("Invalid value for `coupon_failed_attempts`, must not be `None`")  # noqa: E501

        self._coupon_failed_attempts = coupon_failed_attempts

    @property
    def accrued_discounts(self):
        """Gets the accrued_discounts of this CustomerActivityReport.  # noqa: E501

        Number of accrued discounts in all customer campaigns.  # noqa: E501

        :return: The accrued_discounts of this CustomerActivityReport.  # noqa: E501
        :rtype: float
        """
        return self._accrued_discounts

    @accrued_discounts.setter
    def accrued_discounts(self, accrued_discounts):
        """Sets the accrued_discounts of this CustomerActivityReport.

        Number of accrued discounts in all customer campaigns.  # noqa: E501

        :param accrued_discounts: The accrued_discounts of this CustomerActivityReport.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and accrued_discounts is None:  # noqa: E501
            raise ValueError("Invalid value for `accrued_discounts`, must not be `None`")  # noqa: E501

        self._accrued_discounts = accrued_discounts

    @property
    def accrued_revenue(self):
        """Gets the accrued_revenue of this CustomerActivityReport.  # noqa: E501

        Amount of accrued revenue in all customer campaigns.  # noqa: E501

        :return: The accrued_revenue of this CustomerActivityReport.  # noqa: E501
        :rtype: float
        """
        return self._accrued_revenue

    @accrued_revenue.setter
    def accrued_revenue(self, accrued_revenue):
        """Sets the accrued_revenue of this CustomerActivityReport.

        Amount of accrued revenue in all customer campaigns.  # noqa: E501

        :param accrued_revenue: The accrued_revenue of this CustomerActivityReport.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and accrued_revenue is None:  # noqa: E501
            raise ValueError("Invalid value for `accrued_revenue`, must not be `None`")  # noqa: E501

        self._accrued_revenue = accrued_revenue

    @property
    def total_orders(self):
        """Gets the total_orders of this CustomerActivityReport.  # noqa: E501

        Number of orders in all customer campaigns.  # noqa: E501

        :return: The total_orders of this CustomerActivityReport.  # noqa: E501
        :rtype: int
        """
        return self._total_orders

    @total_orders.setter
    def total_orders(self, total_orders):
        """Sets the total_orders of this CustomerActivityReport.

        Number of orders in all customer campaigns.  # noqa: E501

        :param total_orders: The total_orders of this CustomerActivityReport.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and total_orders is None:  # noqa: E501
            raise ValueError("Invalid value for `total_orders`, must not be `None`")  # noqa: E501

        self._total_orders = total_orders

    @property
    def total_orders_no_coupon(self):
        """Gets the total_orders_no_coupon of this CustomerActivityReport.  # noqa: E501

        Number of orders without coupon used in all customer campaigns.  # noqa: E501

        :return: The total_orders_no_coupon of this CustomerActivityReport.  # noqa: E501
        :rtype: int
        """
        return self._total_orders_no_coupon

    @total_orders_no_coupon.setter
    def total_orders_no_coupon(self, total_orders_no_coupon):
        """Sets the total_orders_no_coupon of this CustomerActivityReport.

        Number of orders without coupon used in all customer campaigns.  # noqa: E501

        :param total_orders_no_coupon: The total_orders_no_coupon of this CustomerActivityReport.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and total_orders_no_coupon is None:  # noqa: E501
            raise ValueError("Invalid value for `total_orders_no_coupon`, must not be `None`")  # noqa: E501

        self._total_orders_no_coupon = total_orders_no_coupon

    @property
    def campaign_name(self):
        """Gets the campaign_name of this CustomerActivityReport.  # noqa: E501

        The name of the campaign this customer belongs to.  # noqa: E501

        :return: The campaign_name of this CustomerActivityReport.  # noqa: E501
        :rtype: str
        """
        return self._campaign_name

    @campaign_name.setter
    def campaign_name(self, campaign_name):
        """Sets the campaign_name of this CustomerActivityReport.

        The name of the campaign this customer belongs to.  # noqa: E501

        :param campaign_name: The campaign_name of this CustomerActivityReport.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and campaign_name is None:  # noqa: E501
            raise ValueError("Invalid value for `campaign_name`, must not be `None`")  # noqa: E501

        self._campaign_name = campaign_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerActivityReport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomerActivityReport):
            return True

        return self.to_dict() != other.to_dict()
