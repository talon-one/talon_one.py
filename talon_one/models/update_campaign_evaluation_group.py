# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class UpdateCampaignEvaluationGroup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'parent_id': 'int',
        'description': 'str',
        'evaluation_mode': 'str',
        'evaluation_scope': 'str',
        'locked': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'parent_id': 'parentId',
        'description': 'description',
        'evaluation_mode': 'evaluationMode',
        'evaluation_scope': 'evaluationScope',
        'locked': 'locked'
    }

    def __init__(self, name=None, parent_id=None, description=None, evaluation_mode=None, evaluation_scope=None, locked=None, local_vars_configuration=None):  # noqa: E501
        """UpdateCampaignEvaluationGroup - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._parent_id = None
        self._description = None
        self._evaluation_mode = None
        self._evaluation_scope = None
        self._locked = None
        self.discriminator = None

        self.name = name
        self.parent_id = parent_id
        if description is not None:
            self.description = description
        self.evaluation_mode = evaluation_mode
        self.evaluation_scope = evaluation_scope
        self.locked = locked

    @property
    def name(self):
        """Gets the name of this UpdateCampaignEvaluationGroup.  # noqa: E501

        The name of the campaign evaluation group.  # noqa: E501

        :return: The name of this UpdateCampaignEvaluationGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateCampaignEvaluationGroup.

        The name of the campaign evaluation group.  # noqa: E501

        :param name: The name of this UpdateCampaignEvaluationGroup.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def parent_id(self):
        """Gets the parent_id of this UpdateCampaignEvaluationGroup.  # noqa: E501

        The ID of the parent group that contains the campaign evaluation group.  # noqa: E501

        :return: The parent_id of this UpdateCampaignEvaluationGroup.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this UpdateCampaignEvaluationGroup.

        The ID of the parent group that contains the campaign evaluation group.  # noqa: E501

        :param parent_id: The parent_id of this UpdateCampaignEvaluationGroup.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and parent_id is None:  # noqa: E501
            raise ValueError("Invalid value for `parent_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                parent_id is not None and parent_id < 1):  # noqa: E501
            raise ValueError("Invalid value for `parent_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._parent_id = parent_id

    @property
    def description(self):
        """Gets the description of this UpdateCampaignEvaluationGroup.  # noqa: E501

        A description of the campaign evaluation group.  # noqa: E501

        :return: The description of this UpdateCampaignEvaluationGroup.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateCampaignEvaluationGroup.

        A description of the campaign evaluation group.  # noqa: E501

        :param description: The description of this UpdateCampaignEvaluationGroup.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def evaluation_mode(self):
        """Gets the evaluation_mode of this UpdateCampaignEvaluationGroup.  # noqa: E501

        The mode by which campaigns in the campaign evaluation group are evaluated.  # noqa: E501

        :return: The evaluation_mode of this UpdateCampaignEvaluationGroup.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_mode

    @evaluation_mode.setter
    def evaluation_mode(self, evaluation_mode):
        """Sets the evaluation_mode of this UpdateCampaignEvaluationGroup.

        The mode by which campaigns in the campaign evaluation group are evaluated.  # noqa: E501

        :param evaluation_mode: The evaluation_mode of this UpdateCampaignEvaluationGroup.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and evaluation_mode is None:  # noqa: E501
            raise ValueError("Invalid value for `evaluation_mode`, must not be `None`")  # noqa: E501
        allowed_values = ["stackable", "listOrder", "lowestDiscount", "highestDiscount"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and evaluation_mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `evaluation_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(evaluation_mode, allowed_values)
            )

        self._evaluation_mode = evaluation_mode

    @property
    def evaluation_scope(self):
        """Gets the evaluation_scope of this UpdateCampaignEvaluationGroup.  # noqa: E501

        The evaluation scope of the campaign evaluation group.  # noqa: E501

        :return: The evaluation_scope of this UpdateCampaignEvaluationGroup.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_scope

    @evaluation_scope.setter
    def evaluation_scope(self, evaluation_scope):
        """Sets the evaluation_scope of this UpdateCampaignEvaluationGroup.

        The evaluation scope of the campaign evaluation group.  # noqa: E501

        :param evaluation_scope: The evaluation_scope of this UpdateCampaignEvaluationGroup.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and evaluation_scope is None:  # noqa: E501
            raise ValueError("Invalid value for `evaluation_scope`, must not be `None`")  # noqa: E501
        allowed_values = ["cartItem", "session"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and evaluation_scope not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `evaluation_scope` ({0}), must be one of {1}"  # noqa: E501
                .format(evaluation_scope, allowed_values)
            )

        self._evaluation_scope = evaluation_scope

    @property
    def locked(self):
        """Gets the locked of this UpdateCampaignEvaluationGroup.  # noqa: E501

        An indicator of whether the campaign evaluation group is locked for modification.  # noqa: E501

        :return: The locked of this UpdateCampaignEvaluationGroup.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this UpdateCampaignEvaluationGroup.

        An indicator of whether the campaign evaluation group is locked for modification.  # noqa: E501

        :param locked: The locked of this UpdateCampaignEvaluationGroup.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and locked is None:  # noqa: E501
            raise ValueError("Invalid value for `locked`, must not be `None`")  # noqa: E501

        self._locked = locked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateCampaignEvaluationGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateCampaignEvaluationGroup):
            return True

        return self.to_dict() != other.to_dict()
