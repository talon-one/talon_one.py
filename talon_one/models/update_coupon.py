# coding: utf-8

"""
    Talon.One API

    The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdateCoupon(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'usage_limit': 'int',
        'start_date': 'datetime',
        'expiry_date': 'datetime',
        'recipient_integration_id': 'str',
        'attributes': 'object'
    }

    attribute_map = {
        'usage_limit': 'usageLimit',
        'start_date': 'startDate',
        'expiry_date': 'expiryDate',
        'recipient_integration_id': 'recipientIntegrationId',
        'attributes': 'attributes'
    }

    def __init__(self, usage_limit=None, start_date=None, expiry_date=None, recipient_integration_id=None, attributes=None):  # noqa: E501
        """UpdateCoupon - a model defined in Swagger"""  # noqa: E501

        self._usage_limit = None
        self._start_date = None
        self._expiry_date = None
        self._recipient_integration_id = None
        self._attributes = None
        self.discriminator = None

        if usage_limit is not None:
            self.usage_limit = usage_limit
        if start_date is not None:
            self.start_date = start_date
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if recipient_integration_id is not None:
            self.recipient_integration_id = recipient_integration_id
        if attributes is not None:
            self.attributes = attributes

    @property
    def usage_limit(self):
        """Gets the usage_limit of this UpdateCoupon.  # noqa: E501

        The number of times a coupon code can be redeemed. This can be set to 0 for no limit, but any campaign usage limits will still apply.   # noqa: E501

        :return: The usage_limit of this UpdateCoupon.  # noqa: E501
        :rtype: int
        """
        return self._usage_limit

    @usage_limit.setter
    def usage_limit(self, usage_limit):
        """Sets the usage_limit of this UpdateCoupon.

        The number of times a coupon code can be redeemed. This can be set to 0 for no limit, but any campaign usage limits will still apply.   # noqa: E501

        :param usage_limit: The usage_limit of this UpdateCoupon.  # noqa: E501
        :type: int
        """
        if usage_limit is not None and usage_limit > 999999:  # noqa: E501
            raise ValueError("Invalid value for `usage_limit`, must be a value less than or equal to `999999`")  # noqa: E501
        if usage_limit is not None and usage_limit < 0:  # noqa: E501
            raise ValueError("Invalid value for `usage_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._usage_limit = usage_limit

    @property
    def start_date(self):
        """Gets the start_date of this UpdateCoupon.  # noqa: E501

        Timestamp at which point the coupon becomes valid.  # noqa: E501

        :return: The start_date of this UpdateCoupon.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this UpdateCoupon.

        Timestamp at which point the coupon becomes valid.  # noqa: E501

        :param start_date: The start_date of this UpdateCoupon.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def expiry_date(self):
        """Gets the expiry_date of this UpdateCoupon.  # noqa: E501

        Expiry date of the coupon. Coupon never expires if this is omitted, zero, or negative.  # noqa: E501

        :return: The expiry_date of this UpdateCoupon.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this UpdateCoupon.

        Expiry date of the coupon. Coupon never expires if this is omitted, zero, or negative.  # noqa: E501

        :param expiry_date: The expiry_date of this UpdateCoupon.  # noqa: E501
        :type: datetime
        """

        self._expiry_date = expiry_date

    @property
    def recipient_integration_id(self):
        """Gets the recipient_integration_id of this UpdateCoupon.  # noqa: E501

        The integration ID for this coupon's beneficiary's profile  # noqa: E501

        :return: The recipient_integration_id of this UpdateCoupon.  # noqa: E501
        :rtype: str
        """
        return self._recipient_integration_id

    @recipient_integration_id.setter
    def recipient_integration_id(self, recipient_integration_id):
        """Sets the recipient_integration_id of this UpdateCoupon.

        The integration ID for this coupon's beneficiary's profile  # noqa: E501

        :param recipient_integration_id: The recipient_integration_id of this UpdateCoupon.  # noqa: E501
        :type: str
        """

        self._recipient_integration_id = recipient_integration_id

    @property
    def attributes(self):
        """Gets the attributes of this UpdateCoupon.  # noqa: E501

        Arbitrary properties associated with this item  # noqa: E501

        :return: The attributes of this UpdateCoupon.  # noqa: E501
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this UpdateCoupon.

        Arbitrary properties associated with this item  # noqa: E501

        :param attributes: The attributes of this UpdateCoupon.  # noqa: E501
        :type: object
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateCoupon, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateCoupon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
