# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class NewRuleset(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'rules': 'list[Rule]',
        'strikethrough_rules': 'list[Rule]',
        'bindings': 'list[Binding]',
        'rb_version': 'str',
        'activate': 'bool'
    }

    attribute_map = {
        'rules': 'rules',
        'strikethrough_rules': 'strikethroughRules',
        'bindings': 'bindings',
        'rb_version': 'rbVersion',
        'activate': 'activate'
    }

    def __init__(self, rules=None, strikethrough_rules=None, bindings=None, rb_version=None, activate=None, local_vars_configuration=None):  # noqa: E501
        """NewRuleset - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._rules = None
        self._strikethrough_rules = None
        self._bindings = None
        self._rb_version = None
        self._activate = None
        self.discriminator = None

        self.rules = rules
        if strikethrough_rules is not None:
            self.strikethrough_rules = strikethrough_rules
        self.bindings = bindings
        if rb_version is not None:
            self.rb_version = rb_version
        if activate is not None:
            self.activate = activate

    @property
    def rules(self):
        """Gets the rules of this NewRuleset.  # noqa: E501

        Set of rules to apply.  # noqa: E501

        :return: The rules of this NewRuleset.  # noqa: E501
        :rtype: list[Rule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this NewRuleset.

        Set of rules to apply.  # noqa: E501

        :param rules: The rules of this NewRuleset.  # noqa: E501
        :type: list[Rule]
        """
        if self.local_vars_configuration.client_side_validation and rules is None:  # noqa: E501
            raise ValueError("Invalid value for `rules`, must not be `None`")  # noqa: E501

        self._rules = rules

    @property
    def strikethrough_rules(self):
        """Gets the strikethrough_rules of this NewRuleset.  # noqa: E501

        Set of rules to apply for strikethrough.  # noqa: E501

        :return: The strikethrough_rules of this NewRuleset.  # noqa: E501
        :rtype: list[Rule]
        """
        return self._strikethrough_rules

    @strikethrough_rules.setter
    def strikethrough_rules(self, strikethrough_rules):
        """Sets the strikethrough_rules of this NewRuleset.

        Set of rules to apply for strikethrough.  # noqa: E501

        :param strikethrough_rules: The strikethrough_rules of this NewRuleset.  # noqa: E501
        :type: list[Rule]
        """

        self._strikethrough_rules = strikethrough_rules

    @property
    def bindings(self):
        """Gets the bindings of this NewRuleset.  # noqa: E501

        An array that provides objects with variable names (name) and talang expressions to whose result they are bound (expression) during rule evaluation. The order of the evaluation is decided by the position in the array.  # noqa: E501

        :return: The bindings of this NewRuleset.  # noqa: E501
        :rtype: list[Binding]
        """
        return self._bindings

    @bindings.setter
    def bindings(self, bindings):
        """Sets the bindings of this NewRuleset.

        An array that provides objects with variable names (name) and talang expressions to whose result they are bound (expression) during rule evaluation. The order of the evaluation is decided by the position in the array.  # noqa: E501

        :param bindings: The bindings of this NewRuleset.  # noqa: E501
        :type: list[Binding]
        """
        if self.local_vars_configuration.client_side_validation and bindings is None:  # noqa: E501
            raise ValueError("Invalid value for `bindings`, must not be `None`")  # noqa: E501

        self._bindings = bindings

    @property
    def rb_version(self):
        """Gets the rb_version of this NewRuleset.  # noqa: E501

        The version of the rulebuilder used to create this ruleset.  # noqa: E501

        :return: The rb_version of this NewRuleset.  # noqa: E501
        :rtype: str
        """
        return self._rb_version

    @rb_version.setter
    def rb_version(self, rb_version):
        """Sets the rb_version of this NewRuleset.

        The version of the rulebuilder used to create this ruleset.  # noqa: E501

        :param rb_version: The rb_version of this NewRuleset.  # noqa: E501
        :type: str
        """

        self._rb_version = rb_version

    @property
    def activate(self):
        """Gets the activate of this NewRuleset.  # noqa: E501

        Indicates whether this created ruleset should be activated for the campaign that owns it.  # noqa: E501

        :return: The activate of this NewRuleset.  # noqa: E501
        :rtype: bool
        """
        return self._activate

    @activate.setter
    def activate(self, activate):
        """Sets the activate of this NewRuleset.

        Indicates whether this created ruleset should be activated for the campaign that owns it.  # noqa: E501

        :param activate: The activate of this NewRuleset.  # noqa: E501
        :type: bool
        """

        self._activate = activate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewRuleset):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewRuleset):
            return True

        return self.to_dict() != other.to_dict()
