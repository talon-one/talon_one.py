# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class NewCouponCreationJob(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'usage_limit': 'int',
        'discount_limit': 'float',
        'reservation_limit': 'int',
        'start_date': 'datetime',
        'expiry_date': 'datetime',
        'number_of_coupons': 'int',
        'coupon_settings': 'CodeGeneratorSettings',
        'attributes': 'object'
    }

    attribute_map = {
        'usage_limit': 'usageLimit',
        'discount_limit': 'discountLimit',
        'reservation_limit': 'reservationLimit',
        'start_date': 'startDate',
        'expiry_date': 'expiryDate',
        'number_of_coupons': 'numberOfCoupons',
        'coupon_settings': 'couponSettings',
        'attributes': 'attributes'
    }

    def __init__(self, usage_limit=None, discount_limit=None, reservation_limit=None, start_date=None, expiry_date=None, number_of_coupons=None, coupon_settings=None, attributes=None, local_vars_configuration=None):  # noqa: E501
        """NewCouponCreationJob - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._usage_limit = None
        self._discount_limit = None
        self._reservation_limit = None
        self._start_date = None
        self._expiry_date = None
        self._number_of_coupons = None
        self._coupon_settings = None
        self._attributes = None
        self.discriminator = None

        self.usage_limit = usage_limit
        if discount_limit is not None:
            self.discount_limit = discount_limit
        if reservation_limit is not None:
            self.reservation_limit = reservation_limit
        if start_date is not None:
            self.start_date = start_date
        if expiry_date is not None:
            self.expiry_date = expiry_date
        self.number_of_coupons = number_of_coupons
        if coupon_settings is not None:
            self.coupon_settings = coupon_settings
        self.attributes = attributes

    @property
    def usage_limit(self):
        """Gets the usage_limit of this NewCouponCreationJob.  # noqa: E501

        The number of times the coupon code can be redeemed. `0` means unlimited redemptions but any campaign usage limits will still apply.   # noqa: E501

        :return: The usage_limit of this NewCouponCreationJob.  # noqa: E501
        :rtype: int
        """
        return self._usage_limit

    @usage_limit.setter
    def usage_limit(self, usage_limit):
        """Sets the usage_limit of this NewCouponCreationJob.

        The number of times the coupon code can be redeemed. `0` means unlimited redemptions but any campaign usage limits will still apply.   # noqa: E501

        :param usage_limit: The usage_limit of this NewCouponCreationJob.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and usage_limit is None:  # noqa: E501
            raise ValueError("Invalid value for `usage_limit`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                usage_limit is not None and usage_limit > 999999):  # noqa: E501
            raise ValueError("Invalid value for `usage_limit`, must be a value less than or equal to `999999`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                usage_limit is not None and usage_limit < 0):  # noqa: E501
            raise ValueError("Invalid value for `usage_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._usage_limit = usage_limit

    @property
    def discount_limit(self):
        """Gets the discount_limit of this NewCouponCreationJob.  # noqa: E501

        The total discount value that the code can give. Typically used to represent a gift card value.   # noqa: E501

        :return: The discount_limit of this NewCouponCreationJob.  # noqa: E501
        :rtype: float
        """
        return self._discount_limit

    @discount_limit.setter
    def discount_limit(self, discount_limit):
        """Sets the discount_limit of this NewCouponCreationJob.

        The total discount value that the code can give. Typically used to represent a gift card value.   # noqa: E501

        :param discount_limit: The discount_limit of this NewCouponCreationJob.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                discount_limit is not None and discount_limit > 999999):  # noqa: E501
            raise ValueError("Invalid value for `discount_limit`, must be a value less than or equal to `999999`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                discount_limit is not None and discount_limit < 0):  # noqa: E501
            raise ValueError("Invalid value for `discount_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._discount_limit = discount_limit

    @property
    def reservation_limit(self):
        """Gets the reservation_limit of this NewCouponCreationJob.  # noqa: E501

        The number of reservations that can be made with this coupon code.   # noqa: E501

        :return: The reservation_limit of this NewCouponCreationJob.  # noqa: E501
        :rtype: int
        """
        return self._reservation_limit

    @reservation_limit.setter
    def reservation_limit(self, reservation_limit):
        """Sets the reservation_limit of this NewCouponCreationJob.

        The number of reservations that can be made with this coupon code.   # noqa: E501

        :param reservation_limit: The reservation_limit of this NewCouponCreationJob.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                reservation_limit is not None and reservation_limit > 999999):  # noqa: E501
            raise ValueError("Invalid value for `reservation_limit`, must be a value less than or equal to `999999`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                reservation_limit is not None and reservation_limit < 0):  # noqa: E501
            raise ValueError("Invalid value for `reservation_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._reservation_limit = reservation_limit

    @property
    def start_date(self):
        """Gets the start_date of this NewCouponCreationJob.  # noqa: E501

        Timestamp at which point the coupon becomes valid.  # noqa: E501

        :return: The start_date of this NewCouponCreationJob.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this NewCouponCreationJob.

        Timestamp at which point the coupon becomes valid.  # noqa: E501

        :param start_date: The start_date of this NewCouponCreationJob.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def expiry_date(self):
        """Gets the expiry_date of this NewCouponCreationJob.  # noqa: E501

        Expiration date of the coupon. Coupon never expires if this is omitted.  # noqa: E501

        :return: The expiry_date of this NewCouponCreationJob.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this NewCouponCreationJob.

        Expiration date of the coupon. Coupon never expires if this is omitted.  # noqa: E501

        :param expiry_date: The expiry_date of this NewCouponCreationJob.  # noqa: E501
        :type: datetime
        """

        self._expiry_date = expiry_date

    @property
    def number_of_coupons(self):
        """Gets the number_of_coupons of this NewCouponCreationJob.  # noqa: E501

        The number of new coupon codes to generate for the campaign.  # noqa: E501

        :return: The number_of_coupons of this NewCouponCreationJob.  # noqa: E501
        :rtype: int
        """
        return self._number_of_coupons

    @number_of_coupons.setter
    def number_of_coupons(self, number_of_coupons):
        """Sets the number_of_coupons of this NewCouponCreationJob.

        The number of new coupon codes to generate for the campaign.  # noqa: E501

        :param number_of_coupons: The number_of_coupons of this NewCouponCreationJob.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and number_of_coupons is None:  # noqa: E501
            raise ValueError("Invalid value for `number_of_coupons`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                number_of_coupons is not None and number_of_coupons > 5000000):  # noqa: E501
            raise ValueError("Invalid value for `number_of_coupons`, must be a value less than or equal to `5000000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                number_of_coupons is not None and number_of_coupons < 1):  # noqa: E501
            raise ValueError("Invalid value for `number_of_coupons`, must be a value greater than or equal to `1`")  # noqa: E501

        self._number_of_coupons = number_of_coupons

    @property
    def coupon_settings(self):
        """Gets the coupon_settings of this NewCouponCreationJob.  # noqa: E501


        :return: The coupon_settings of this NewCouponCreationJob.  # noqa: E501
        :rtype: CodeGeneratorSettings
        """
        return self._coupon_settings

    @coupon_settings.setter
    def coupon_settings(self, coupon_settings):
        """Sets the coupon_settings of this NewCouponCreationJob.


        :param coupon_settings: The coupon_settings of this NewCouponCreationJob.  # noqa: E501
        :type: CodeGeneratorSettings
        """

        self._coupon_settings = coupon_settings

    @property
    def attributes(self):
        """Gets the attributes of this NewCouponCreationJob.  # noqa: E501

        Arbitrary properties associated with coupons.  # noqa: E501

        :return: The attributes of this NewCouponCreationJob.  # noqa: E501
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this NewCouponCreationJob.

        Arbitrary properties associated with coupons.  # noqa: E501

        :param attributes: The attributes of this NewCouponCreationJob.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and attributes is None:  # noqa: E501
            raise ValueError("Invalid value for `attributes`, must not be `None`")  # noqa: E501

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewCouponCreationJob):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewCouponCreationJob):
            return True

        return self.to_dict() != other.to_dict()
