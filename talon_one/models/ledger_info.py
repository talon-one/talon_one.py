# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class LedgerInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'current_balance': 'float',
        'pending_balance': 'float',
        'expired_balance': 'float',
        'spent_balance': 'float',
        'tentative_current_balance': 'float',
        'tentative_pending_balance': 'float',
        'current_tier': 'Tier',
        'points_to_next_tier': 'float'
    }

    attribute_map = {
        'current_balance': 'currentBalance',
        'pending_balance': 'pendingBalance',
        'expired_balance': 'expiredBalance',
        'spent_balance': 'spentBalance',
        'tentative_current_balance': 'tentativeCurrentBalance',
        'tentative_pending_balance': 'tentativePendingBalance',
        'current_tier': 'currentTier',
        'points_to_next_tier': 'pointsToNextTier'
    }

    def __init__(self, current_balance=None, pending_balance=None, expired_balance=None, spent_balance=None, tentative_current_balance=None, tentative_pending_balance=None, current_tier=None, points_to_next_tier=None, local_vars_configuration=None):  # noqa: E501
        """LedgerInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._current_balance = None
        self._pending_balance = None
        self._expired_balance = None
        self._spent_balance = None
        self._tentative_current_balance = None
        self._tentative_pending_balance = None
        self._current_tier = None
        self._points_to_next_tier = None
        self.discriminator = None

        self.current_balance = current_balance
        self.pending_balance = pending_balance
        self.expired_balance = expired_balance
        self.spent_balance = spent_balance
        self.tentative_current_balance = tentative_current_balance
        if tentative_pending_balance is not None:
            self.tentative_pending_balance = tentative_pending_balance
        if current_tier is not None:
            self.current_tier = current_tier
        if points_to_next_tier is not None:
            self.points_to_next_tier = points_to_next_tier

    @property
    def current_balance(self):
        """Gets the current_balance of this LedgerInfo.  # noqa: E501

        Sum of currently active points.  # noqa: E501

        :return: The current_balance of this LedgerInfo.  # noqa: E501
        :rtype: float
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this LedgerInfo.

        Sum of currently active points.  # noqa: E501

        :param current_balance: The current_balance of this LedgerInfo.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and current_balance is None:  # noqa: E501
            raise ValueError("Invalid value for `current_balance`, must not be `None`")  # noqa: E501

        self._current_balance = current_balance

    @property
    def pending_balance(self):
        """Gets the pending_balance of this LedgerInfo.  # noqa: E501

        Sum of pending points.  # noqa: E501

        :return: The pending_balance of this LedgerInfo.  # noqa: E501
        :rtype: float
        """
        return self._pending_balance

    @pending_balance.setter
    def pending_balance(self, pending_balance):
        """Sets the pending_balance of this LedgerInfo.

        Sum of pending points.  # noqa: E501

        :param pending_balance: The pending_balance of this LedgerInfo.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and pending_balance is None:  # noqa: E501
            raise ValueError("Invalid value for `pending_balance`, must not be `None`")  # noqa: E501

        self._pending_balance = pending_balance

    @property
    def expired_balance(self):
        """Gets the expired_balance of this LedgerInfo.  # noqa: E501

        **DEPRECATED** Value is shown as 0.   # noqa: E501

        :return: The expired_balance of this LedgerInfo.  # noqa: E501
        :rtype: float
        """
        return self._expired_balance

    @expired_balance.setter
    def expired_balance(self, expired_balance):
        """Sets the expired_balance of this LedgerInfo.

        **DEPRECATED** Value is shown as 0.   # noqa: E501

        :param expired_balance: The expired_balance of this LedgerInfo.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and expired_balance is None:  # noqa: E501
            raise ValueError("Invalid value for `expired_balance`, must not be `None`")  # noqa: E501

        self._expired_balance = expired_balance

    @property
    def spent_balance(self):
        """Gets the spent_balance of this LedgerInfo.  # noqa: E501

        **DEPRECATED** Value is shown as 0.   # noqa: E501

        :return: The spent_balance of this LedgerInfo.  # noqa: E501
        :rtype: float
        """
        return self._spent_balance

    @spent_balance.setter
    def spent_balance(self, spent_balance):
        """Sets the spent_balance of this LedgerInfo.

        **DEPRECATED** Value is shown as 0.   # noqa: E501

        :param spent_balance: The spent_balance of this LedgerInfo.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and spent_balance is None:  # noqa: E501
            raise ValueError("Invalid value for `spent_balance`, must not be `None`")  # noqa: E501

        self._spent_balance = spent_balance

    @property
    def tentative_current_balance(self):
        """Gets the tentative_current_balance of this LedgerInfo.  # noqa: E501

        Sum of the tentative active points (including additions and deductions) inside the currently open session. The `currentBalance` is updated to this value when you close the session, and the effects are applied.  # noqa: E501

        :return: The tentative_current_balance of this LedgerInfo.  # noqa: E501
        :rtype: float
        """
        return self._tentative_current_balance

    @tentative_current_balance.setter
    def tentative_current_balance(self, tentative_current_balance):
        """Sets the tentative_current_balance of this LedgerInfo.

        Sum of the tentative active points (including additions and deductions) inside the currently open session. The `currentBalance` is updated to this value when you close the session, and the effects are applied.  # noqa: E501

        :param tentative_current_balance: The tentative_current_balance of this LedgerInfo.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and tentative_current_balance is None:  # noqa: E501
            raise ValueError("Invalid value for `tentative_current_balance`, must not be `None`")  # noqa: E501

        self._tentative_current_balance = tentative_current_balance

    @property
    def tentative_pending_balance(self):
        """Gets the tentative_pending_balance of this LedgerInfo.  # noqa: E501

        Sum of pending points (including additions and deductions) inside the currently open session. The `pendingBalance` is updated to this value when you close the session, and the effects are applied.  # noqa: E501

        :return: The tentative_pending_balance of this LedgerInfo.  # noqa: E501
        :rtype: float
        """
        return self._tentative_pending_balance

    @tentative_pending_balance.setter
    def tentative_pending_balance(self, tentative_pending_balance):
        """Sets the tentative_pending_balance of this LedgerInfo.

        Sum of pending points (including additions and deductions) inside the currently open session. The `pendingBalance` is updated to this value when you close the session, and the effects are applied.  # noqa: E501

        :param tentative_pending_balance: The tentative_pending_balance of this LedgerInfo.  # noqa: E501
        :type: float
        """

        self._tentative_pending_balance = tentative_pending_balance

    @property
    def current_tier(self):
        """Gets the current_tier of this LedgerInfo.  # noqa: E501


        :return: The current_tier of this LedgerInfo.  # noqa: E501
        :rtype: Tier
        """
        return self._current_tier

    @current_tier.setter
    def current_tier(self, current_tier):
        """Sets the current_tier of this LedgerInfo.


        :param current_tier: The current_tier of this LedgerInfo.  # noqa: E501
        :type: Tier
        """

        self._current_tier = current_tier

    @property
    def points_to_next_tier(self):
        """Gets the points_to_next_tier of this LedgerInfo.  # noqa: E501

        Points required to move up a tier.  # noqa: E501

        :return: The points_to_next_tier of this LedgerInfo.  # noqa: E501
        :rtype: float
        """
        return self._points_to_next_tier

    @points_to_next_tier.setter
    def points_to_next_tier(self, points_to_next_tier):
        """Sets the points_to_next_tier of this LedgerInfo.

        Points required to move up a tier.  # noqa: E501

        :param points_to_next_tier: The points_to_next_tier of this LedgerInfo.  # noqa: E501
        :type: float
        """

        self._points_to_next_tier = points_to_next_tier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LedgerInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LedgerInfo):
            return True

        return self.to_dict() != other.to_dict()
