# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class Giveaway(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'created': 'datetime',
        'code': 'str',
        'pool_id': 'int',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'attributes': 'object',
        'used': 'bool',
        'import_id': 'int',
        'profile_integration_id': 'str',
        'profile_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'code': 'code',
        'pool_id': 'poolId',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'attributes': 'attributes',
        'used': 'used',
        'import_id': 'importId',
        'profile_integration_id': 'profileIntegrationId',
        'profile_id': 'profileId'
    }

    def __init__(self, id=None, created=None, code=None, pool_id=None, start_date=None, end_date=None, attributes=None, used=None, import_id=None, profile_integration_id=None, profile_id=None, local_vars_configuration=None):  # noqa: E501
        """Giveaway - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._created = None
        self._code = None
        self._pool_id = None
        self._start_date = None
        self._end_date = None
        self._attributes = None
        self._used = None
        self._import_id = None
        self._profile_integration_id = None
        self._profile_id = None
        self.discriminator = None

        self.id = id
        self.created = created
        self.code = code
        self.pool_id = pool_id
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if attributes is not None:
            self.attributes = attributes
        if used is not None:
            self.used = used
        if import_id is not None:
            self.import_id = import_id
        if profile_integration_id is not None:
            self.profile_integration_id = profile_integration_id
        if profile_id is not None:
            self.profile_id = profile_id

    @property
    def id(self):
        """Gets the id of this Giveaway.  # noqa: E501

        Internal ID of this entity.  # noqa: E501

        :return: The id of this Giveaway.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Giveaway.

        Internal ID of this entity.  # noqa: E501

        :param id: The id of this Giveaway.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created(self):
        """Gets the created of this Giveaway.  # noqa: E501

        The time this entity was created.  # noqa: E501

        :return: The created of this Giveaway.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Giveaway.

        The time this entity was created.  # noqa: E501

        :param created: The created of this Giveaway.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def code(self):
        """Gets the code of this Giveaway.  # noqa: E501

        The code value of this giveaway.  # noqa: E501

        :return: The code of this Giveaway.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Giveaway.

        The code value of this giveaway.  # noqa: E501

        :param code: The code of this Giveaway.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and code is None:  # noqa: E501
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def pool_id(self):
        """Gets the pool_id of this Giveaway.  # noqa: E501

        The ID of the pool to return giveaway codes from.  # noqa: E501

        :return: The pool_id of this Giveaway.  # noqa: E501
        :rtype: int
        """
        return self._pool_id

    @pool_id.setter
    def pool_id(self, pool_id):
        """Sets the pool_id of this Giveaway.

        The ID of the pool to return giveaway codes from.  # noqa: E501

        :param pool_id: The pool_id of this Giveaway.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and pool_id is None:  # noqa: E501
            raise ValueError("Invalid value for `pool_id`, must not be `None`")  # noqa: E501

        self._pool_id = pool_id

    @property
    def start_date(self):
        """Gets the start_date of this Giveaway.  # noqa: E501

        Timestamp at which point the giveaway becomes valid.  # noqa: E501

        :return: The start_date of this Giveaway.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Giveaway.

        Timestamp at which point the giveaway becomes valid.  # noqa: E501

        :param start_date: The start_date of this Giveaway.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this Giveaway.  # noqa: E501

        Timestamp at which point the giveaway becomes invalid.  # noqa: E501

        :return: The end_date of this Giveaway.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Giveaway.

        Timestamp at which point the giveaway becomes invalid.  # noqa: E501

        :param end_date: The end_date of this Giveaway.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def attributes(self):
        """Gets the attributes of this Giveaway.  # noqa: E501

        Arbitrary properties associated with this giveaway.  # noqa: E501

        :return: The attributes of this Giveaway.  # noqa: E501
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Giveaway.

        Arbitrary properties associated with this giveaway.  # noqa: E501

        :param attributes: The attributes of this Giveaway.  # noqa: E501
        :type: object
        """

        self._attributes = attributes

    @property
    def used(self):
        """Gets the used of this Giveaway.  # noqa: E501

        Indicates whether this giveaway code was given before.  # noqa: E501

        :return: The used of this Giveaway.  # noqa: E501
        :rtype: bool
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this Giveaway.

        Indicates whether this giveaway code was given before.  # noqa: E501

        :param used: The used of this Giveaway.  # noqa: E501
        :type: bool
        """

        self._used = used

    @property
    def import_id(self):
        """Gets the import_id of this Giveaway.  # noqa: E501

        The ID of the Import which created this giveaway.  # noqa: E501

        :return: The import_id of this Giveaway.  # noqa: E501
        :rtype: int
        """
        return self._import_id

    @import_id.setter
    def import_id(self, import_id):
        """Sets the import_id of this Giveaway.

        The ID of the Import which created this giveaway.  # noqa: E501

        :param import_id: The import_id of this Giveaway.  # noqa: E501
        :type: int
        """

        self._import_id = import_id

    @property
    def profile_integration_id(self):
        """Gets the profile_integration_id of this Giveaway.  # noqa: E501

        The third-party integration ID of the customer profile that was awarded the giveaway, if the giveaway was awarded.  # noqa: E501

        :return: The profile_integration_id of this Giveaway.  # noqa: E501
        :rtype: str
        """
        return self._profile_integration_id

    @profile_integration_id.setter
    def profile_integration_id(self, profile_integration_id):
        """Sets the profile_integration_id of this Giveaway.

        The third-party integration ID of the customer profile that was awarded the giveaway, if the giveaway was awarded.  # noqa: E501

        :param profile_integration_id: The profile_integration_id of this Giveaway.  # noqa: E501
        :type: str
        """

        self._profile_integration_id = profile_integration_id

    @property
    def profile_id(self):
        """Gets the profile_id of this Giveaway.  # noqa: E501

        The internal ID of the customer profile that was awarded the giveaway, if the giveaway was awarded and an internal ID exists.  # noqa: E501

        :return: The profile_id of this Giveaway.  # noqa: E501
        :rtype: int
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this Giveaway.

        The internal ID of the customer profile that was awarded the giveaway, if the giveaway was awarded and an internal ID exists.  # noqa: E501

        :param profile_id: The profile_id of this Giveaway.  # noqa: E501
        :type: int
        """

        self._profile_id = profile_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Giveaway):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Giveaway):
            return True

        return self.to_dict() != other.to_dict()
