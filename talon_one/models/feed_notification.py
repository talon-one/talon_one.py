# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class FeedNotification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'title': 'str',
        'created': 'datetime',
        'updated': 'datetime',
        'article_url': 'str',
        'type': 'str',
        'body': 'str'
    }

    attribute_map = {
        'title': 'title',
        'created': 'created',
        'updated': 'updated',
        'article_url': 'articleUrl',
        'type': 'type',
        'body': 'body'
    }

    def __init__(self, title=None, created=None, updated=None, article_url=None, type=None, body=None, local_vars_configuration=None):  # noqa: E501
        """FeedNotification - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._title = None
        self._created = None
        self._updated = None
        self._article_url = None
        self._type = None
        self._body = None
        self.discriminator = None

        self.title = title
        self.created = created
        self.updated = updated
        self.article_url = article_url
        self.type = type
        self.body = body

    @property
    def title(self):
        """Gets the title of this FeedNotification.  # noqa: E501

        Title of the feed notification.  # noqa: E501

        :return: The title of this FeedNotification.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this FeedNotification.

        Title of the feed notification.  # noqa: E501

        :param title: The title of this FeedNotification.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def created(self):
        """Gets the created of this FeedNotification.  # noqa: E501

        Timestamp of the moment this feed notification was created.  # noqa: E501

        :return: The created of this FeedNotification.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this FeedNotification.

        Timestamp of the moment this feed notification was created.  # noqa: E501

        :param created: The created of this FeedNotification.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this FeedNotification.  # noqa: E501

        Timestamp of the moment this feed notification was last updated.  # noqa: E501

        :return: The updated of this FeedNotification.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this FeedNotification.

        Timestamp of the moment this feed notification was last updated.  # noqa: E501

        :param updated: The updated of this FeedNotification.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated is None:  # noqa: E501
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    @property
    def article_url(self):
        """Gets the article_url of this FeedNotification.  # noqa: E501

        URL to the feed notification in the help center.  # noqa: E501

        :return: The article_url of this FeedNotification.  # noqa: E501
        :rtype: str
        """
        return self._article_url

    @article_url.setter
    def article_url(self, article_url):
        """Sets the article_url of this FeedNotification.

        URL to the feed notification in the help center.  # noqa: E501

        :param article_url: The article_url of this FeedNotification.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and article_url is None:  # noqa: E501
            raise ValueError("Invalid value for `article_url`, must not be `None`")  # noqa: E501

        self._article_url = article_url

    @property
    def type(self):
        """Gets the type of this FeedNotification.  # noqa: E501

        The type of the feed notification.  # noqa: E501

        :return: The type of this FeedNotification.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FeedNotification.

        The type of the feed notification.  # noqa: E501

        :param type: The type of this FeedNotification.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["feed", "feature", "announcement", "alert", "test"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def body(self):
        """Gets the body of this FeedNotification.  # noqa: E501

        Body of the feed notification.  # noqa: E501

        :return: The body of this FeedNotification.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this FeedNotification.

        Body of the feed notification.  # noqa: E501

        :param body: The body of this FeedNotification.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and body is None:  # noqa: E501
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeedNotification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FeedNotification):
            return True

        return self.to_dict() != other.to_dict()
