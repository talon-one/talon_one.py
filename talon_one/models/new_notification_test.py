# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class NewNotificationTest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        '_query_params': 'dict(str, str)',
        'headers': 'dict(str, str)',
        'verb': 'str',
        'url': 'str',
        'payload': 'str'
    }

    attribute_map = {
        'type': 'type',
        '_query_params': 'queryParams',
        'headers': 'headers',
        'verb': 'verb',
        'url': 'url',
        'payload': 'payload'
    }

    def __init__(self, type=None, _query_params=None, headers=None, verb=None, url=None, payload=None, local_vars_configuration=None):  # noqa: E501
        """NewNotificationTest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self.__query_params = None
        self._headers = None
        self._verb = None
        self._url = None
        self._payload = None
        self.discriminator = None

        self.type = type
        if _query_params is not None:
            self._query_params = _query_params
        if headers is not None:
            self.headers = headers
        self.verb = verb
        self.url = url
        self.payload = payload

    @property
    def type(self):
        """Gets the type of this NewNotificationTest.  # noqa: E501

        The notification type.  # noqa: E501

        :return: The type of this NewNotificationTest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NewNotificationTest.

        The notification type.  # noqa: E501

        :param type: The type of this NewNotificationTest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["campaign", "loyalty_added_deducted_points", "card_added_deducted_points", "coupon", "expiring_coupons", "expiring_points", "pending_to_active_points", "strikethrough_pricing", "tier_downgrade", "tier_upgrade", "tier_will_downgrade", "card_expiring_points"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def _query_params(self):
        """Gets the _query_params of this NewNotificationTest.  # noqa: E501

        Array of query parameters.  # noqa: E501

        :return: The _query_params of this NewNotificationTest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self.__query_params

    @_query_params.setter
    def _query_params(self, _query_params):
        """Sets the _query_params of this NewNotificationTest.

        Array of query parameters.  # noqa: E501

        :param _query_params: The _query_params of this NewNotificationTest.  # noqa: E501
        :type: dict(str, str)
        """

        self.__query_params = _query_params

    @property
    def headers(self):
        """Gets the headers of this NewNotificationTest.  # noqa: E501

        List of API HTTP headers for the given webhook-based notification.  # noqa: E501

        :return: The headers of this NewNotificationTest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this NewNotificationTest.

        List of API HTTP headers for the given webhook-based notification.  # noqa: E501

        :param headers: The headers of this NewNotificationTest.  # noqa: E501
        :type: dict(str, str)
        """

        self._headers = headers

    @property
    def verb(self):
        """Gets the verb of this NewNotificationTest.  # noqa: E501

        API method for this notification.  # noqa: E501

        :return: The verb of this NewNotificationTest.  # noqa: E501
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """Sets the verb of this NewNotificationTest.

        API method for this notification.  # noqa: E501

        :param verb: The verb of this NewNotificationTest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and verb is None:  # noqa: E501
            raise ValueError("Invalid value for `verb`, must not be `None`")  # noqa: E501
        allowed_values = ["POST", "PUT", "GET", "DELETE", "PATCH"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and verb not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `verb` ({0}), must be one of {1}"  # noqa: E501
                .format(verb, allowed_values)
            )

        self._verb = verb

    @property
    def url(self):
        """Gets the url of this NewNotificationTest.  # noqa: E501

        API URL for the given notification.  # noqa: E501

        :return: The url of this NewNotificationTest.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NewNotificationTest.

        API URL for the given notification.  # noqa: E501

        :param url: The url of this NewNotificationTest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def payload(self):
        """Gets the payload of this NewNotificationTest.  # noqa: E501

        API payload of this notification.  # noqa: E501

        :return: The payload of this NewNotificationTest.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this NewNotificationTest.

        API payload of this notification.  # noqa: E501

        :param payload: The payload of this NewNotificationTest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and payload is None:  # noqa: E501
            raise ValueError("Invalid value for `payload`, must not be `None`")  # noqa: E501

        self._payload = payload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewNotificationTest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewNotificationTest):
            return True

        return self.to_dict() != other.to_dict()
