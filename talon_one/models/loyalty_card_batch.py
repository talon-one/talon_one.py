# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class LoyaltyCardBatch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'number_of_cards': 'int',
        'batch_id': 'str',
        'status': 'str',
        'card_code_settings': 'CodeGeneratorSettings'
    }

    attribute_map = {
        'number_of_cards': 'numberOfCards',
        'batch_id': 'batchId',
        'status': 'status',
        'card_code_settings': 'cardCodeSettings'
    }

    def __init__(self, number_of_cards=None, batch_id=None, status='active', card_code_settings=None, local_vars_configuration=None):  # noqa: E501
        """LoyaltyCardBatch - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._number_of_cards = None
        self._batch_id = None
        self._status = None
        self._card_code_settings = None
        self.discriminator = None

        self.number_of_cards = number_of_cards
        if batch_id is not None:
            self.batch_id = batch_id
        if status is not None:
            self.status = status
        if card_code_settings is not None:
            self.card_code_settings = card_code_settings

    @property
    def number_of_cards(self):
        """Gets the number_of_cards of this LoyaltyCardBatch.  # noqa: E501

        Number of loyalty cards in the batch.  # noqa: E501

        :return: The number_of_cards of this LoyaltyCardBatch.  # noqa: E501
        :rtype: int
        """
        return self._number_of_cards

    @number_of_cards.setter
    def number_of_cards(self, number_of_cards):
        """Sets the number_of_cards of this LoyaltyCardBatch.

        Number of loyalty cards in the batch.  # noqa: E501

        :param number_of_cards: The number_of_cards of this LoyaltyCardBatch.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and number_of_cards is None:  # noqa: E501
            raise ValueError("Invalid value for `number_of_cards`, must not be `None`")  # noqa: E501

        self._number_of_cards = number_of_cards

    @property
    def batch_id(self):
        """Gets the batch_id of this LoyaltyCardBatch.  # noqa: E501

        ID of the loyalty card batch.  # noqa: E501

        :return: The batch_id of this LoyaltyCardBatch.  # noqa: E501
        :rtype: str
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this LoyaltyCardBatch.

        ID of the loyalty card batch.  # noqa: E501

        :param batch_id: The batch_id of this LoyaltyCardBatch.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                batch_id is not None and len(batch_id) > 20):
            raise ValueError("Invalid value for `batch_id`, length must be less than or equal to `20`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                batch_id is not None and len(batch_id) < 4):
            raise ValueError("Invalid value for `batch_id`, length must be greater than or equal to `4`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                batch_id is not None and not re.search(r'^[A-Za-z0-9_-]*$', batch_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `batch_id`, must be a follow pattern or equal to `/^[A-Za-z0-9_-]*$/`")  # noqa: E501

        self._batch_id = batch_id

    @property
    def status(self):
        """Gets the status of this LoyaltyCardBatch.  # noqa: E501

        Status of the loyalty cards in the batch.  # noqa: E501

        :return: The status of this LoyaltyCardBatch.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LoyaltyCardBatch.

        Status of the loyalty cards in the batch.  # noqa: E501

        :param status: The status of this LoyaltyCardBatch.  # noqa: E501
        :type: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def card_code_settings(self):
        """Gets the card_code_settings of this LoyaltyCardBatch.  # noqa: E501


        :return: The card_code_settings of this LoyaltyCardBatch.  # noqa: E501
        :rtype: CodeGeneratorSettings
        """
        return self._card_code_settings

    @card_code_settings.setter
    def card_code_settings(self, card_code_settings):
        """Sets the card_code_settings of this LoyaltyCardBatch.


        :param card_code_settings: The card_code_settings of this LoyaltyCardBatch.  # noqa: E501
        :type: CodeGeneratorSettings
        """

        self._card_code_settings = card_code_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoyaltyCardBatch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LoyaltyCardBatch):
            return True

        return self.to_dict() != other.to_dict()
