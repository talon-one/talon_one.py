# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class Tier(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'start_date': 'datetime',
        'expiry_date': 'datetime',
        'downgrade_policy': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'start_date': 'startDate',
        'expiry_date': 'expiryDate',
        'downgrade_policy': 'downgradePolicy'
    }

    def __init__(self, id=None, name=None, start_date=None, expiry_date=None, downgrade_policy=None, local_vars_configuration=None):  # noqa: E501
        """Tier - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._start_date = None
        self._expiry_date = None
        self._downgrade_policy = None
        self.discriminator = None

        self.id = id
        self.name = name
        if start_date is not None:
            self.start_date = start_date
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if downgrade_policy is not None:
            self.downgrade_policy = downgrade_policy

    @property
    def id(self):
        """Gets the id of this Tier.  # noqa: E501

        The internal ID of the tier.  # noqa: E501

        :return: The id of this Tier.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tier.

        The internal ID of the tier.  # noqa: E501

        :param id: The id of this Tier.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Tier.  # noqa: E501

        The name of the tier.  # noqa: E501

        :return: The name of this Tier.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tier.

        The name of the tier.  # noqa: E501

        :param name: The name of this Tier.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def start_date(self):
        """Gets the start_date of this Tier.  # noqa: E501

        Date and time when the customer moved to this tier. This value uses the loyalty program's time zone setting.  # noqa: E501

        :return: The start_date of this Tier.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Tier.

        Date and time when the customer moved to this tier. This value uses the loyalty program's time zone setting.  # noqa: E501

        :param start_date: The start_date of this Tier.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def expiry_date(self):
        """Gets the expiry_date of this Tier.  # noqa: E501

        Date when tier level expires in the RFC3339 format (in the Loyalty Program's timezone).  # noqa: E501

        :return: The expiry_date of this Tier.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this Tier.

        Date when tier level expires in the RFC3339 format (in the Loyalty Program's timezone).  # noqa: E501

        :param expiry_date: The expiry_date of this Tier.  # noqa: E501
        :type: datetime
        """

        self._expiry_date = expiry_date

    @property
    def downgrade_policy(self):
        """Gets the downgrade_policy of this Tier.  # noqa: E501

        The policy that defines how customer tiers are downgraded in the loyalty program after tier reevaluation.  - `one_down`: If the customer doesn't have enough points to stay in the current tier, they are downgraded by one tier.  - `balance_based`: The customer's tier is reevaluated based on the amount of active points they have at the moment.   # noqa: E501

        :return: The downgrade_policy of this Tier.  # noqa: E501
        :rtype: str
        """
        return self._downgrade_policy

    @downgrade_policy.setter
    def downgrade_policy(self, downgrade_policy):
        """Sets the downgrade_policy of this Tier.

        The policy that defines how customer tiers are downgraded in the loyalty program after tier reevaluation.  - `one_down`: If the customer doesn't have enough points to stay in the current tier, they are downgraded by one tier.  - `balance_based`: The customer's tier is reevaluated based on the amount of active points they have at the moment.   # noqa: E501

        :param downgrade_policy: The downgrade_policy of this Tier.  # noqa: E501
        :type: str
        """
        allowed_values = ["one_down", "balance_based"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and downgrade_policy not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `downgrade_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(downgrade_policy, allowed_values)
            )

        self._downgrade_policy = downgrade_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tier):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Tier):
            return True

        return self.to_dict() != other.to_dict()
