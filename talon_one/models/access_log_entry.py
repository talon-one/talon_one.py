# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class AccessLogEntry(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uuid': 'str',
        'status': 'int',
        'method': 'str',
        'request_uri': 'str',
        'time': 'datetime',
        'request_payload': 'str',
        'response_payload': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'status': 'status',
        'method': 'method',
        'request_uri': 'requestUri',
        'time': 'time',
        'request_payload': 'requestPayload',
        'response_payload': 'responsePayload'
    }

    def __init__(self, uuid=None, status=None, method=None, request_uri=None, time=None, request_payload=None, response_payload=None, local_vars_configuration=None):  # noqa: E501
        """AccessLogEntry - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uuid = None
        self._status = None
        self._method = None
        self._request_uri = None
        self._time = None
        self._request_payload = None
        self._response_payload = None
        self.discriminator = None

        self.uuid = uuid
        self.status = status
        self.method = method
        self.request_uri = request_uri
        self.time = time
        self.request_payload = request_payload
        self.response_payload = response_payload

    @property
    def uuid(self):
        """Gets the uuid of this AccessLogEntry.  # noqa: E501

        UUID reference of request.  # noqa: E501

        :return: The uuid of this AccessLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this AccessLogEntry.

        UUID reference of request.  # noqa: E501

        :param uuid: The uuid of this AccessLogEntry.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and uuid is None:  # noqa: E501
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def status(self):
        """Gets the status of this AccessLogEntry.  # noqa: E501

        HTTP status code of response.  # noqa: E501

        :return: The status of this AccessLogEntry.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccessLogEntry.

        HTTP status code of response.  # noqa: E501

        :param status: The status of this AccessLogEntry.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def method(self):
        """Gets the method of this AccessLogEntry.  # noqa: E501

        HTTP method of request.  # noqa: E501

        :return: The method of this AccessLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this AccessLogEntry.

        HTTP method of request.  # noqa: E501

        :param method: The method of this AccessLogEntry.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and method is None:  # noqa: E501
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501

        self._method = method

    @property
    def request_uri(self):
        """Gets the request_uri of this AccessLogEntry.  # noqa: E501

        target URI of request  # noqa: E501

        :return: The request_uri of this AccessLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this AccessLogEntry.

        target URI of request  # noqa: E501

        :param request_uri: The request_uri of this AccessLogEntry.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and request_uri is None:  # noqa: E501
            raise ValueError("Invalid value for `request_uri`, must not be `None`")  # noqa: E501

        self._request_uri = request_uri

    @property
    def time(self):
        """Gets the time of this AccessLogEntry.  # noqa: E501

        timestamp of request  # noqa: E501

        :return: The time of this AccessLogEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this AccessLogEntry.

        timestamp of request  # noqa: E501

        :param time: The time of this AccessLogEntry.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and time is None:  # noqa: E501
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def request_payload(self):
        """Gets the request_payload of this AccessLogEntry.  # noqa: E501

        payload of request  # noqa: E501

        :return: The request_payload of this AccessLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._request_payload

    @request_payload.setter
    def request_payload(self, request_payload):
        """Sets the request_payload of this AccessLogEntry.

        payload of request  # noqa: E501

        :param request_payload: The request_payload of this AccessLogEntry.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and request_payload is None:  # noqa: E501
            raise ValueError("Invalid value for `request_payload`, must not be `None`")  # noqa: E501

        self._request_payload = request_payload

    @property
    def response_payload(self):
        """Gets the response_payload of this AccessLogEntry.  # noqa: E501

        payload of response  # noqa: E501

        :return: The response_payload of this AccessLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._response_payload

    @response_payload.setter
    def response_payload(self, response_payload):
        """Sets the response_payload of this AccessLogEntry.

        payload of response  # noqa: E501

        :param response_payload: The response_payload of this AccessLogEntry.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and response_payload is None:  # noqa: E501
            raise ValueError("Invalid value for `response_payload`, must not be `None`")  # noqa: E501

        self._response_payload = response_payload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessLogEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccessLogEntry):
            return True

        return self.to_dict() != other.to_dict()
