# coding: utf-8

"""
    Talon.One API

    The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdateAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attributes': 'object',
        'company_name': 'str',
        'billing_email': 'str'
    }

    attribute_map = {
        'attributes': 'attributes',
        'company_name': 'companyName',
        'billing_email': 'billingEmail'
    }

    def __init__(self, attributes=None, company_name=None, billing_email=None):  # noqa: E501
        """UpdateAccount - a model defined in Swagger"""  # noqa: E501

        self._attributes = None
        self._company_name = None
        self._billing_email = None
        self.discriminator = None

        if attributes is not None:
            self.attributes = attributes
        self.company_name = company_name
        self.billing_email = billing_email

    @property
    def attributes(self):
        """Gets the attributes of this UpdateAccount.  # noqa: E501

        Arbitrary properties associated with this campaign  # noqa: E501

        :return: The attributes of this UpdateAccount.  # noqa: E501
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this UpdateAccount.

        Arbitrary properties associated with this campaign  # noqa: E501

        :param attributes: The attributes of this UpdateAccount.  # noqa: E501
        :type: object
        """

        self._attributes = attributes

    @property
    def company_name(self):
        """Gets the company_name of this UpdateAccount.  # noqa: E501

        Name of your company.  # noqa: E501

        :return: The company_name of this UpdateAccount.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this UpdateAccount.

        Name of your company.  # noqa: E501

        :param company_name: The company_name of this UpdateAccount.  # noqa: E501
        :type: str
        """
        if company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")  # noqa: E501
        if company_name is not None and len(company_name) < 1:
            raise ValueError("Invalid value for `company_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._company_name = company_name

    @property
    def billing_email(self):
        """Gets the billing_email of this UpdateAccount.  # noqa: E501

        The billing email address associated with your company account.  # noqa: E501

        :return: The billing_email of this UpdateAccount.  # noqa: E501
        :rtype: str
        """
        return self._billing_email

    @billing_email.setter
    def billing_email(self, billing_email):
        """Sets the billing_email of this UpdateAccount.

        The billing email address associated with your company account.  # noqa: E501

        :param billing_email: The billing_email of this UpdateAccount.  # noqa: E501
        :type: str
        """
        if billing_email is None:
            raise ValueError("Invalid value for `billing_email`, must not be `None`")  # noqa: E501

        self._billing_email = billing_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
