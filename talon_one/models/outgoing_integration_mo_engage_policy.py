# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class OutgoingIntegrationMoEngagePolicy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'base_url': 'str',
        'app_id': 'str',
        'data_api_id': 'str',
        'data_api_key': 'str'
    }

    attribute_map = {
        'base_url': 'baseUrl',
        'app_id': 'appId',
        'data_api_id': 'dataApiId',
        'data_api_key': 'dataApiKey'
    }

    def __init__(self, base_url=None, app_id=None, data_api_id=None, data_api_key=None, local_vars_configuration=None):  # noqa: E501
        """OutgoingIntegrationMoEngagePolicy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._base_url = None
        self._app_id = None
        self._data_api_id = None
        self._data_api_key = None
        self.discriminator = None

        self.base_url = base_url
        self.app_id = app_id
        self.data_api_id = data_api_id
        self.data_api_key = data_api_key

    @property
    def base_url(self):
        """Gets the base_url of this OutgoingIntegrationMoEngagePolicy.  # noqa: E501

        The base URL of your MoEngage deployment, containing the MoEngage data center number (represented by `0X`).  # noqa: E501

        :return: The base_url of this OutgoingIntegrationMoEngagePolicy.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this OutgoingIntegrationMoEngagePolicy.

        The base URL of your MoEngage deployment, containing the MoEngage data center number (represented by `0X`).  # noqa: E501

        :param base_url: The base_url of this OutgoingIntegrationMoEngagePolicy.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and base_url is None:  # noqa: E501
            raise ValueError("Invalid value for `base_url`, must not be `None`")  # noqa: E501

        self._base_url = base_url

    @property
    def app_id(self):
        """Gets the app_id of this OutgoingIntegrationMoEngagePolicy.  # noqa: E501

        MoEngage APP ID. See [MoEngage Developer Guide](https://developers.moengage.com/hc/en-us/articles/4404674776724-Overview).  # noqa: E501

        :return: The app_id of this OutgoingIntegrationMoEngagePolicy.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this OutgoingIntegrationMoEngagePolicy.

        MoEngage APP ID. See [MoEngage Developer Guide](https://developers.moengage.com/hc/en-us/articles/4404674776724-Overview).  # noqa: E501

        :param app_id: The app_id of this OutgoingIntegrationMoEngagePolicy.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and app_id is None:  # noqa: E501
            raise ValueError("Invalid value for `app_id`, must not be `None`")  # noqa: E501

        self._app_id = app_id

    @property
    def data_api_id(self):
        """Gets the data_api_id of this OutgoingIntegrationMoEngagePolicy.  # noqa: E501

        MoEngage DATA API ID. See [MoEngage Developer Guide](https://developers.moengage.com/hc/en-us/articles/4404674776724-Overview).  # noqa: E501

        :return: The data_api_id of this OutgoingIntegrationMoEngagePolicy.  # noqa: E501
        :rtype: str
        """
        return self._data_api_id

    @data_api_id.setter
    def data_api_id(self, data_api_id):
        """Sets the data_api_id of this OutgoingIntegrationMoEngagePolicy.

        MoEngage DATA API ID. See [MoEngage Developer Guide](https://developers.moengage.com/hc/en-us/articles/4404674776724-Overview).  # noqa: E501

        :param data_api_id: The data_api_id of this OutgoingIntegrationMoEngagePolicy.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and data_api_id is None:  # noqa: E501
            raise ValueError("Invalid value for `data_api_id`, must not be `None`")  # noqa: E501

        self._data_api_id = data_api_id

    @property
    def data_api_key(self):
        """Gets the data_api_key of this OutgoingIntegrationMoEngagePolicy.  # noqa: E501

        MoEngage DATA API Key. See [MoEngage Developer Guide](https://developers.moengage.com/hc/en-us/articles/4404674776724-Overview).  # noqa: E501

        :return: The data_api_key of this OutgoingIntegrationMoEngagePolicy.  # noqa: E501
        :rtype: str
        """
        return self._data_api_key

    @data_api_key.setter
    def data_api_key(self, data_api_key):
        """Sets the data_api_key of this OutgoingIntegrationMoEngagePolicy.

        MoEngage DATA API Key. See [MoEngage Developer Guide](https://developers.moengage.com/hc/en-us/articles/4404674776724-Overview).  # noqa: E501

        :param data_api_key: The data_api_key of this OutgoingIntegrationMoEngagePolicy.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and data_api_key is None:  # noqa: E501
            raise ValueError("Invalid value for `data_api_key`, must not be `None`")  # noqa: E501

        self._data_api_key = data_api_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OutgoingIntegrationMoEngagePolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OutgoingIntegrationMoEngagePolicy):
            return True

        return self.to_dict() != other.to_dict()
