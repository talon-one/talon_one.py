# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class RuleFailureReason(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'campaign_id': 'int',
        'campaign_name': 'str',
        'ruleset_id': 'int',
        'coupon_id': 'int',
        'coupon_value': 'str',
        'referral_id': 'int',
        'referral_value': 'str',
        'rule_index': 'int',
        'rule_name': 'str',
        'condition_index': 'int',
        'effect_index': 'int',
        'details': 'str',
        'evaluation_group_id': 'int',
        'evaluation_group_mode': 'str'
    }

    attribute_map = {
        'campaign_id': 'campaignID',
        'campaign_name': 'campaignName',
        'ruleset_id': 'rulesetID',
        'coupon_id': 'couponID',
        'coupon_value': 'couponValue',
        'referral_id': 'referralID',
        'referral_value': 'referralValue',
        'rule_index': 'ruleIndex',
        'rule_name': 'ruleName',
        'condition_index': 'conditionIndex',
        'effect_index': 'effectIndex',
        'details': 'details',
        'evaluation_group_id': 'evaluationGroupID',
        'evaluation_group_mode': 'evaluationGroupMode'
    }

    def __init__(self, campaign_id=None, campaign_name=None, ruleset_id=None, coupon_id=None, coupon_value=None, referral_id=None, referral_value=None, rule_index=None, rule_name=None, condition_index=None, effect_index=None, details=None, evaluation_group_id=None, evaluation_group_mode=None, local_vars_configuration=None):  # noqa: E501
        """RuleFailureReason - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._campaign_id = None
        self._campaign_name = None
        self._ruleset_id = None
        self._coupon_id = None
        self._coupon_value = None
        self._referral_id = None
        self._referral_value = None
        self._rule_index = None
        self._rule_name = None
        self._condition_index = None
        self._effect_index = None
        self._details = None
        self._evaluation_group_id = None
        self._evaluation_group_mode = None
        self.discriminator = None

        self.campaign_id = campaign_id
        self.campaign_name = campaign_name
        self.ruleset_id = ruleset_id
        if coupon_id is not None:
            self.coupon_id = coupon_id
        if coupon_value is not None:
            self.coupon_value = coupon_value
        if referral_id is not None:
            self.referral_id = referral_id
        if referral_value is not None:
            self.referral_value = referral_value
        self.rule_index = rule_index
        self.rule_name = rule_name
        if condition_index is not None:
            self.condition_index = condition_index
        if effect_index is not None:
            self.effect_index = effect_index
        if details is not None:
            self.details = details
        if evaluation_group_id is not None:
            self.evaluation_group_id = evaluation_group_id
        if evaluation_group_mode is not None:
            self.evaluation_group_mode = evaluation_group_mode

    @property
    def campaign_id(self):
        """Gets the campaign_id of this RuleFailureReason.  # noqa: E501

        The ID of the campaign that contains the rule that failed.  # noqa: E501

        :return: The campaign_id of this RuleFailureReason.  # noqa: E501
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this RuleFailureReason.

        The ID of the campaign that contains the rule that failed.  # noqa: E501

        :param campaign_id: The campaign_id of this RuleFailureReason.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and campaign_id is None:  # noqa: E501
            raise ValueError("Invalid value for `campaign_id`, must not be `None`")  # noqa: E501

        self._campaign_id = campaign_id

    @property
    def campaign_name(self):
        """Gets the campaign_name of this RuleFailureReason.  # noqa: E501

        The name of the campaign that contains the rule that failed.  # noqa: E501

        :return: The campaign_name of this RuleFailureReason.  # noqa: E501
        :rtype: str
        """
        return self._campaign_name

    @campaign_name.setter
    def campaign_name(self, campaign_name):
        """Sets the campaign_name of this RuleFailureReason.

        The name of the campaign that contains the rule that failed.  # noqa: E501

        :param campaign_name: The campaign_name of this RuleFailureReason.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and campaign_name is None:  # noqa: E501
            raise ValueError("Invalid value for `campaign_name`, must not be `None`")  # noqa: E501

        self._campaign_name = campaign_name

    @property
    def ruleset_id(self):
        """Gets the ruleset_id of this RuleFailureReason.  # noqa: E501

        The ID of the ruleset that contains the rule that failed.  # noqa: E501

        :return: The ruleset_id of this RuleFailureReason.  # noqa: E501
        :rtype: int
        """
        return self._ruleset_id

    @ruleset_id.setter
    def ruleset_id(self, ruleset_id):
        """Sets the ruleset_id of this RuleFailureReason.

        The ID of the ruleset that contains the rule that failed.  # noqa: E501

        :param ruleset_id: The ruleset_id of this RuleFailureReason.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and ruleset_id is None:  # noqa: E501
            raise ValueError("Invalid value for `ruleset_id`, must not be `None`")  # noqa: E501

        self._ruleset_id = ruleset_id

    @property
    def coupon_id(self):
        """Gets the coupon_id of this RuleFailureReason.  # noqa: E501

        The ID of the coupon that was being evaluated at the time of the rule failure.  # noqa: E501

        :return: The coupon_id of this RuleFailureReason.  # noqa: E501
        :rtype: int
        """
        return self._coupon_id

    @coupon_id.setter
    def coupon_id(self, coupon_id):
        """Sets the coupon_id of this RuleFailureReason.

        The ID of the coupon that was being evaluated at the time of the rule failure.  # noqa: E501

        :param coupon_id: The coupon_id of this RuleFailureReason.  # noqa: E501
        :type: int
        """

        self._coupon_id = coupon_id

    @property
    def coupon_value(self):
        """Gets the coupon_value of this RuleFailureReason.  # noqa: E501

        The code of the coupon that was being evaluated at the time of the rule failure.  # noqa: E501

        :return: The coupon_value of this RuleFailureReason.  # noqa: E501
        :rtype: str
        """
        return self._coupon_value

    @coupon_value.setter
    def coupon_value(self, coupon_value):
        """Sets the coupon_value of this RuleFailureReason.

        The code of the coupon that was being evaluated at the time of the rule failure.  # noqa: E501

        :param coupon_value: The coupon_value of this RuleFailureReason.  # noqa: E501
        :type: str
        """

        self._coupon_value = coupon_value

    @property
    def referral_id(self):
        """Gets the referral_id of this RuleFailureReason.  # noqa: E501

        The ID of the referral that was being evaluated at the time of the rule failure.  # noqa: E501

        :return: The referral_id of this RuleFailureReason.  # noqa: E501
        :rtype: int
        """
        return self._referral_id

    @referral_id.setter
    def referral_id(self, referral_id):
        """Sets the referral_id of this RuleFailureReason.

        The ID of the referral that was being evaluated at the time of the rule failure.  # noqa: E501

        :param referral_id: The referral_id of this RuleFailureReason.  # noqa: E501
        :type: int
        """

        self._referral_id = referral_id

    @property
    def referral_value(self):
        """Gets the referral_value of this RuleFailureReason.  # noqa: E501

        The code of the referral that was being evaluated at the time of the rule failure.  # noqa: E501

        :return: The referral_value of this RuleFailureReason.  # noqa: E501
        :rtype: str
        """
        return self._referral_value

    @referral_value.setter
    def referral_value(self, referral_value):
        """Sets the referral_value of this RuleFailureReason.

        The code of the referral that was being evaluated at the time of the rule failure.  # noqa: E501

        :param referral_value: The referral_value of this RuleFailureReason.  # noqa: E501
        :type: str
        """

        self._referral_value = referral_value

    @property
    def rule_index(self):
        """Gets the rule_index of this RuleFailureReason.  # noqa: E501

        The index of the rule that failed within the ruleset.  # noqa: E501

        :return: The rule_index of this RuleFailureReason.  # noqa: E501
        :rtype: int
        """
        return self._rule_index

    @rule_index.setter
    def rule_index(self, rule_index):
        """Sets the rule_index of this RuleFailureReason.

        The index of the rule that failed within the ruleset.  # noqa: E501

        :param rule_index: The rule_index of this RuleFailureReason.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and rule_index is None:  # noqa: E501
            raise ValueError("Invalid value for `rule_index`, must not be `None`")  # noqa: E501

        self._rule_index = rule_index

    @property
    def rule_name(self):
        """Gets the rule_name of this RuleFailureReason.  # noqa: E501

        The name of the rule that failed within the ruleset.  # noqa: E501

        :return: The rule_name of this RuleFailureReason.  # noqa: E501
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this RuleFailureReason.

        The name of the rule that failed within the ruleset.  # noqa: E501

        :param rule_name: The rule_name of this RuleFailureReason.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and rule_name is None:  # noqa: E501
            raise ValueError("Invalid value for `rule_name`, must not be `None`")  # noqa: E501

        self._rule_name = rule_name

    @property
    def condition_index(self):
        """Gets the condition_index of this RuleFailureReason.  # noqa: E501

        The index of the condition that failed.  # noqa: E501

        :return: The condition_index of this RuleFailureReason.  # noqa: E501
        :rtype: int
        """
        return self._condition_index

    @condition_index.setter
    def condition_index(self, condition_index):
        """Sets the condition_index of this RuleFailureReason.

        The index of the condition that failed.  # noqa: E501

        :param condition_index: The condition_index of this RuleFailureReason.  # noqa: E501
        :type: int
        """

        self._condition_index = condition_index

    @property
    def effect_index(self):
        """Gets the effect_index of this RuleFailureReason.  # noqa: E501

        The index of the effect that failed.  # noqa: E501

        :return: The effect_index of this RuleFailureReason.  # noqa: E501
        :rtype: int
        """
        return self._effect_index

    @effect_index.setter
    def effect_index(self, effect_index):
        """Sets the effect_index of this RuleFailureReason.

        The index of the effect that failed.  # noqa: E501

        :param effect_index: The effect_index of this RuleFailureReason.  # noqa: E501
        :type: int
        """

        self._effect_index = effect_index

    @property
    def details(self):
        """Gets the details of this RuleFailureReason.  # noqa: E501

        More details about the failure.  # noqa: E501

        :return: The details of this RuleFailureReason.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this RuleFailureReason.

        More details about the failure.  # noqa: E501

        :param details: The details of this RuleFailureReason.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def evaluation_group_id(self):
        """Gets the evaluation_group_id of this RuleFailureReason.  # noqa: E501

        The ID of the evaluation group. For more information, see [Managing campaign evaluation](https://docs.talon.one/docs/product/applications/managing-campaign-evaluation).  # noqa: E501

        :return: The evaluation_group_id of this RuleFailureReason.  # noqa: E501
        :rtype: int
        """
        return self._evaluation_group_id

    @evaluation_group_id.setter
    def evaluation_group_id(self, evaluation_group_id):
        """Sets the evaluation_group_id of this RuleFailureReason.

        The ID of the evaluation group. For more information, see [Managing campaign evaluation](https://docs.talon.one/docs/product/applications/managing-campaign-evaluation).  # noqa: E501

        :param evaluation_group_id: The evaluation_group_id of this RuleFailureReason.  # noqa: E501
        :type: int
        """

        self._evaluation_group_id = evaluation_group_id

    @property
    def evaluation_group_mode(self):
        """Gets the evaluation_group_mode of this RuleFailureReason.  # noqa: E501

        The evaluation mode of the evaluation group. For more information, see [Managing campaign evaluation](https://docs.talon.one/docs/product/applications/managing-campaign-  # noqa: E501

        :return: The evaluation_group_mode of this RuleFailureReason.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_group_mode

    @evaluation_group_mode.setter
    def evaluation_group_mode(self, evaluation_group_mode):
        """Sets the evaluation_group_mode of this RuleFailureReason.

        The evaluation mode of the evaluation group. For more information, see [Managing campaign evaluation](https://docs.talon.one/docs/product/applications/managing-campaign-  # noqa: E501

        :param evaluation_group_mode: The evaluation_group_mode of this RuleFailureReason.  # noqa: E501
        :type: str
        """

        self._evaluation_group_mode = evaluation_group_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleFailureReason):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RuleFailureReason):
            return True

        return self.to_dict() != other.to_dict()
