# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class Meta(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'campaigns': 'object',
        'coupons': 'object',
        'coupon_rejection_reason': 'CouponRejectionReason',
        'referral_rejection_reason': 'ReferralRejectionReason',
        'warnings': 'object'
    }

    attribute_map = {
        'campaigns': 'campaigns',
        'coupons': 'coupons',
        'coupon_rejection_reason': 'couponRejectionReason',
        'referral_rejection_reason': 'referralRejectionReason',
        'warnings': 'warnings'
    }

    def __init__(self, campaigns=None, coupons=None, coupon_rejection_reason=None, referral_rejection_reason=None, warnings=None, local_vars_configuration=None):  # noqa: E501
        """Meta - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._campaigns = None
        self._coupons = None
        self._coupon_rejection_reason = None
        self._referral_rejection_reason = None
        self._warnings = None
        self.discriminator = None

        if campaigns is not None:
            self.campaigns = campaigns
        if coupons is not None:
            self.coupons = coupons
        if coupon_rejection_reason is not None:
            self.coupon_rejection_reason = coupon_rejection_reason
        if referral_rejection_reason is not None:
            self.referral_rejection_reason = referral_rejection_reason
        if warnings is not None:
            self.warnings = warnings

    @property
    def campaigns(self):
        """Gets the campaigns of this Meta.  # noqa: E501

        Maps each evaluated campaign ID to a key-value list of that campaigns attributes. Campaigns without attributes will be omitted.  # noqa: E501

        :return: The campaigns of this Meta.  # noqa: E501
        :rtype: object
        """
        return self._campaigns

    @campaigns.setter
    def campaigns(self, campaigns):
        """Sets the campaigns of this Meta.

        Maps each evaluated campaign ID to a key-value list of that campaigns attributes. Campaigns without attributes will be omitted.  # noqa: E501

        :param campaigns: The campaigns of this Meta.  # noqa: E501
        :type: object
        """

        self._campaigns = campaigns

    @property
    def coupons(self):
        """Gets the coupons of this Meta.  # noqa: E501

        Maps the coupon value to a key-value list of that coupons attributes.  # noqa: E501

        :return: The coupons of this Meta.  # noqa: E501
        :rtype: object
        """
        return self._coupons

    @coupons.setter
    def coupons(self, coupons):
        """Sets the coupons of this Meta.

        Maps the coupon value to a key-value list of that coupons attributes.  # noqa: E501

        :param coupons: The coupons of this Meta.  # noqa: E501
        :type: object
        """

        self._coupons = coupons

    @property
    def coupon_rejection_reason(self):
        """Gets the coupon_rejection_reason of this Meta.  # noqa: E501


        :return: The coupon_rejection_reason of this Meta.  # noqa: E501
        :rtype: CouponRejectionReason
        """
        return self._coupon_rejection_reason

    @coupon_rejection_reason.setter
    def coupon_rejection_reason(self, coupon_rejection_reason):
        """Sets the coupon_rejection_reason of this Meta.


        :param coupon_rejection_reason: The coupon_rejection_reason of this Meta.  # noqa: E501
        :type: CouponRejectionReason
        """

        self._coupon_rejection_reason = coupon_rejection_reason

    @property
    def referral_rejection_reason(self):
        """Gets the referral_rejection_reason of this Meta.  # noqa: E501


        :return: The referral_rejection_reason of this Meta.  # noqa: E501
        :rtype: ReferralRejectionReason
        """
        return self._referral_rejection_reason

    @referral_rejection_reason.setter
    def referral_rejection_reason(self, referral_rejection_reason):
        """Sets the referral_rejection_reason of this Meta.


        :param referral_rejection_reason: The referral_rejection_reason of this Meta.  # noqa: E501
        :type: ReferralRejectionReason
        """

        self._referral_rejection_reason = referral_rejection_reason

    @property
    def warnings(self):
        """Gets the warnings of this Meta.  # noqa: E501

        Contains warnings about possible misuse.  # noqa: E501

        :return: The warnings of this Meta.  # noqa: E501
        :rtype: object
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this Meta.

        Contains warnings about possible misuse.  # noqa: E501

        :param warnings: The warnings of this Meta.  # noqa: E501
        :type: object
        """

        self._warnings = warnings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Meta):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Meta):
            return True

        return self.to_dict() != other.to_dict()
