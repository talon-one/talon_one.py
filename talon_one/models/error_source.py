# coding: utf-8

"""
    Talon.One API

    The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ErrorSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pointer': 'str',
        'parameter': 'str',
        'line': 'str'
    }

    attribute_map = {
        'pointer': 'pointer',
        'parameter': 'parameter',
        'line': 'line'
    }

    def __init__(self, pointer=None, parameter=None, line=None):  # noqa: E501
        """ErrorSource - a model defined in Swagger"""  # noqa: E501

        self._pointer = None
        self._parameter = None
        self._line = None
        self.discriminator = None

        if pointer is not None:
            self.pointer = pointer
        if parameter is not None:
            self.parameter = parameter
        if line is not None:
            self.line = line

    @property
    def pointer(self):
        """Gets the pointer of this ErrorSource.  # noqa: E501

        Pointer to the path in the payload that caused this error.  # noqa: E501

        :return: The pointer of this ErrorSource.  # noqa: E501
        :rtype: str
        """
        return self._pointer

    @pointer.setter
    def pointer(self, pointer):
        """Sets the pointer of this ErrorSource.

        Pointer to the path in the payload that caused this error.  # noqa: E501

        :param pointer: The pointer of this ErrorSource.  # noqa: E501
        :type: str
        """

        self._pointer = pointer

    @property
    def parameter(self):
        """Gets the parameter of this ErrorSource.  # noqa: E501

        Query parameter that caused this error.  # noqa: E501

        :return: The parameter of this ErrorSource.  # noqa: E501
        :rtype: str
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this ErrorSource.

        Query parameter that caused this error.  # noqa: E501

        :param parameter: The parameter of this ErrorSource.  # noqa: E501
        :type: str
        """

        self._parameter = parameter

    @property
    def line(self):
        """Gets the line of this ErrorSource.  # noqa: E501

        Line number in uploaded multipart file that caused this error. 'N/A' if unknown.  # noqa: E501

        :return: The line of this ErrorSource.  # noqa: E501
        :rtype: str
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this ErrorSource.

        Line number in uploaded multipart file that caused this error. 'N/A' if unknown.  # noqa: E501

        :param line: The line of this ErrorSource.  # noqa: E501
        :type: str
        """

        self._line = line

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
