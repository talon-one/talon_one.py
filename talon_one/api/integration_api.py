# coding: utf-8

"""
    Talon.One API

    The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from talon_one.api_client import ApiClient


class IntegrationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_coupon_reservation(self, coupon_value, body, **kwargs):  # noqa: E501
        """Create a new coupon reservation  # noqa: E501

        Creates a coupon reservation for all passed customer profiles on this couponID   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_coupon_reservation(coupon_value, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str coupon_value: The value of a coupon (required)
        :param CouponReservations body: (required)
        :return: Coupon
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_coupon_reservation_with_http_info(coupon_value, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_coupon_reservation_with_http_info(coupon_value, body, **kwargs)  # noqa: E501
            return data

    def create_coupon_reservation_with_http_info(self, coupon_value, body, **kwargs):  # noqa: E501
        """Create a new coupon reservation  # noqa: E501

        Creates a coupon reservation for all passed customer profiles on this couponID   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_coupon_reservation_with_http_info(coupon_value, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str coupon_value: The value of a coupon (required)
        :param CouponReservations body: (required)
        :return: Coupon
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coupon_value', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_coupon_reservation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coupon_value' is set
        if ('coupon_value' not in params or
                params['coupon_value'] is None):
            raise ValueError("Missing the required parameter `coupon_value` when calling `create_coupon_reservation`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_coupon_reservation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'coupon_value' in params:
            path_params['couponValue'] = params['coupon_value']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_v1', 'integration_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/coupon_reservations/{couponValue}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Coupon',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_referral(self, body, **kwargs):  # noqa: E501
        """Create a referral code for an advocate  # noqa: E501

        Creates a referral code for an advocate. The code will be valid for the referral campaign for which is created, indicated in the `campaignId` parameter, and will be associated with the profile specified in the `advocateProfileIntegrationId` parameter as the advocate's profile.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_referral(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewReferral body: (required)
        :return: Referral
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_referral_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_referral_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_referral_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a referral code for an advocate  # noqa: E501

        Creates a referral code for an advocate. The code will be valid for the referral campaign for which is created, indicated in the `campaignId` parameter, and will be associated with the profile specified in the `advocateProfileIntegrationId` parameter as the advocate's profile.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_referral_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewReferral body: (required)
        :return: Referral
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_referral" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_referral`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_v1', 'integration_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/referrals', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Referral',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_coupon_reservation(self, coupon_value, body, **kwargs):  # noqa: E501
        """Delete coupon reservations  # noqa: E501

        Removes all passed customer profiles reservation from this coupon   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_coupon_reservation(coupon_value, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str coupon_value: The value of a coupon (required)
        :param CouponReservations body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_coupon_reservation_with_http_info(coupon_value, body, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_coupon_reservation_with_http_info(coupon_value, body, **kwargs)  # noqa: E501
            return data

    def delete_coupon_reservation_with_http_info(self, coupon_value, body, **kwargs):  # noqa: E501
        """Delete coupon reservations  # noqa: E501

        Removes all passed customer profiles reservation from this coupon   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_coupon_reservation_with_http_info(coupon_value, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str coupon_value: The value of a coupon (required)
        :param CouponReservations body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coupon_value', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_coupon_reservation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coupon_value' is set
        if ('coupon_value' not in params or
                params['coupon_value'] is None):
            raise ValueError("Missing the required parameter `coupon_value` when calling `delete_coupon_reservation`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_coupon_reservation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'coupon_value' in params:
            path_params['couponValue'] = params['coupon_value']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_v1', 'integration_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/coupon_reservations/{couponValue}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_customer_data(self, integration_id, **kwargs):  # noqa: E501
        """Delete the personal data of a customer.  # noqa: E501

        Delete all attributes on the customer profile and on entities that reference that customer profile.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_customer_data(integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_id: The custom identifier for this profile, must be unique within the account. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_customer_data_with_http_info(integration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_customer_data_with_http_info(integration_id, **kwargs)  # noqa: E501
            return data

    def delete_customer_data_with_http_info(self, integration_id, **kwargs):  # noqa: E501
        """Delete the personal data of a customer.  # noqa: E501

        Delete all attributes on the customer profile and on entities that reference that customer profile.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_customer_data_with_http_info(integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_id: The custom identifier for this profile, must be unique within the account. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['integration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_customer_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'integration_id' is set
        if ('integration_id' not in params or
                params['integration_id'] is None):
            raise ValueError("Missing the required parameter `integration_id` when calling `delete_customer_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'integration_id' in params:
            path_params['integrationId'] = params['integration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_v1', 'integration_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/customer_data/{integrationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_customer_inventory(self, integration_id, **kwargs):  # noqa: E501
        """Get an inventory of all data associated with a specific customer profile.  # noqa: E501

        Get information regarding entities referencing this customer profile's integrationId. Currently we support customer profile information and referral codes. In the future, this will be expanded with coupon codes and loyalty points.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customer_inventory(integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_id: The custom identifier for this profile, must be unique within the account. (required)
        :param object profile: optional flag to decide if you would like customer profile information in the response
        :param object referrals: optional flag to decide if you would like referral information in the response
        :return: CustomerInventory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_customer_inventory_with_http_info(integration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_customer_inventory_with_http_info(integration_id, **kwargs)  # noqa: E501
            return data

    def get_customer_inventory_with_http_info(self, integration_id, **kwargs):  # noqa: E501
        """Get an inventory of all data associated with a specific customer profile.  # noqa: E501

        Get information regarding entities referencing this customer profile's integrationId. Currently we support customer profile information and referral codes. In the future, this will be expanded with coupon codes and loyalty points.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customer_inventory_with_http_info(integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_id: The custom identifier for this profile, must be unique within the account. (required)
        :param object profile: optional flag to decide if you would like customer profile information in the response
        :param object referrals: optional flag to decide if you would like referral information in the response
        :return: CustomerInventory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['integration_id', 'profile', 'referrals']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_customer_inventory" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'integration_id' is set
        if ('integration_id' not in params or
                params['integration_id'] is None):
            raise ValueError("Missing the required parameter `integration_id` when calling `get_customer_inventory`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'integration_id' in params:
            path_params['integrationId'] = params['integration_id']  # noqa: E501

        query_params = []
        if 'profile' in params:
            query_params.append(('profile', params['profile']))  # noqa: E501
        if 'referrals' in params:
            query_params.append(('referrals', params['referrals']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_v1', 'integration_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/customer_profiles/{integrationId}/inventory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomerInventory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_reserved_coupons(self, integration_id, **kwargs):  # noqa: E501
        """Get all valid reserved coupons  # noqa: E501

        Returns all coupons this user is subscribed to that are valid and usable   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reserved_coupons(integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_id: The custom identifier for this profile, must be unique within the account. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_reserved_coupons_with_http_info(integration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_reserved_coupons_with_http_info(integration_id, **kwargs)  # noqa: E501
            return data

    def get_reserved_coupons_with_http_info(self, integration_id, **kwargs):  # noqa: E501
        """Get all valid reserved coupons  # noqa: E501

        Returns all coupons this user is subscribed to that are valid and usable   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reserved_coupons_with_http_info(integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_id: The custom identifier for this profile, must be unique within the account. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['integration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reserved_coupons" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'integration_id' is set
        if ('integration_id' not in params or
                params['integration_id'] is None):
            raise ValueError("Missing the required parameter `integration_id` when calling `get_reserved_coupons`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'integration_id' in params:
            path_params['integrationId'] = params['integration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_v1', 'integration_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/coupon_reservations/coupons/{integrationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_reserved_customers(self, coupon_value, **kwargs):  # noqa: E501
        """Get the users that have this coupon reserved  # noqa: E501

        Returns all users that have this coupon marked as reserved   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reserved_customers(coupon_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str coupon_value: The value of a coupon (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_reserved_customers_with_http_info(coupon_value, **kwargs)  # noqa: E501
        else:
            (data) = self.get_reserved_customers_with_http_info(coupon_value, **kwargs)  # noqa: E501
            return data

    def get_reserved_customers_with_http_info(self, coupon_value, **kwargs):  # noqa: E501
        """Get the users that have this coupon reserved  # noqa: E501

        Returns all users that have this coupon marked as reserved   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reserved_customers_with_http_info(coupon_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str coupon_value: The value of a coupon (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coupon_value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reserved_customers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coupon_value' is set
        if ('coupon_value' not in params or
                params['coupon_value'] is None):
            raise ValueError("Missing the required parameter `coupon_value` when calling `get_reserved_customers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'coupon_value' in params:
            path_params['couponValue'] = params['coupon_value']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_v1', 'integration_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/coupon_reservations/customerprofiles/{couponValue}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def track_event(self, body, **kwargs):  # noqa: E501
        """Track an Event  # noqa: E501

        Records an arbitrary event in a customer session. For example, an integration might record an event when a user updates their payment information.  The `sessionId` body parameter is required, an event is always part of a session. Much like updating a customer session, if either the profile or the session do not exist, a new empty one will be created. Note that if the specified session already exists, it must belong to the same `profileId` or an error will be returned.  As with customer sessions, you can use an empty string for `profileId` to indicate that this is an anonymous session.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.track_event(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewEvent body: (required)
        :return: IntegrationState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.track_event_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.track_event_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def track_event_with_http_info(self, body, **kwargs):  # noqa: E501
        """Track an Event  # noqa: E501

        Records an arbitrary event in a customer session. For example, an integration might record an event when a user updates their payment information.  The `sessionId` body parameter is required, an event is always part of a session. Much like updating a customer session, if either the profile or the session do not exist, a new empty one will be created. Note that if the specified session already exists, it must belong to the same `profileId` or an error will be returned.  As with customer sessions, you can use an empty string for `profileId` to indicate that this is an anonymous session.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.track_event_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewEvent body: (required)
        :return: IntegrationState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method track_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `track_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_v1', 'integration_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/events', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IntegrationState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_customer_profile(self, integration_id, body, **kwargs):  # noqa: E501
        """Update a Customer Profile  # noqa: E501

        Update (or create) a [Customer Profile][]. This profile information can then be matched and/or updated by campaign [Rules][].  The `integrationId` may be any identifier that will remain stable for the customer. For example, you might use a database ID, an email, or a phone number as the `integrationId`. It is vital that this ID **not** change over time, so **don't** use any identifier that the customer can update themselves. E.g. if your application allows a customer to update their e-mail address, you should instead use a database ID.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  [Customer Profile]: /Getting-Started/entities#customer-profile [Rules]: /Getting-Started/entities#campaigns-rulesets-and-coupons   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_customer_profile(integration_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_id: The custom identifier for this profile, must be unique within the account. (required)
        :param NewCustomerProfile body: (required)
        :return: IntegrationState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_customer_profile_with_http_info(integration_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_customer_profile_with_http_info(integration_id, body, **kwargs)  # noqa: E501
            return data

    def update_customer_profile_with_http_info(self, integration_id, body, **kwargs):  # noqa: E501
        """Update a Customer Profile  # noqa: E501

        Update (or create) a [Customer Profile][]. This profile information can then be matched and/or updated by campaign [Rules][].  The `integrationId` may be any identifier that will remain stable for the customer. For example, you might use a database ID, an email, or a phone number as the `integrationId`. It is vital that this ID **not** change over time, so **don't** use any identifier that the customer can update themselves. E.g. if your application allows a customer to update their e-mail address, you should instead use a database ID.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  [Customer Profile]: /Getting-Started/entities#customer-profile [Rules]: /Getting-Started/entities#campaigns-rulesets-and-coupons   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_customer_profile_with_http_info(integration_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_id: The custom identifier for this profile, must be unique within the account. (required)
        :param NewCustomerProfile body: (required)
        :return: IntegrationState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['integration_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_customer_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'integration_id' is set
        if ('integration_id' not in params or
                params['integration_id'] is None):
            raise ValueError("Missing the required parameter `integration_id` when calling `update_customer_profile`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_customer_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'integration_id' in params:
            path_params['integrationId'] = params['integration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_v1', 'integration_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/customer_profiles/{integrationId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IntegrationState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_customer_session(self, customer_session_id, body, **kwargs):  # noqa: E501
        """Update a Customer Session  # noqa: E501

        Update (or create) a [Customer Session][]. For example, the items in a customers cart are part of a session.  The Talon.One platform supports multiple simultaneous sessions for the same profile, so if you have multiple ways of accessing the same application you have the option of either tracking multiple independent sessions or using the same session across all of them. You should share sessions when application access points share other state, such as the users cart. If two points of access to the application have independent state (e.g. a user can have different items in their cart across the two) they should use independent customer session ID's.  The `profileId` parameter in the request body should correspond to an `integrationId` for a customer profile, to track an anonymous session use the empty string (`\"\"`) as the `profileId`. Note that you do **not** need to create a customer profile first: if the specified profile does not yet exist, an empty profile will be created automatically.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  The currency for the session and the cart items in the session is the same as that of the application with which the session is associated.  [Customer Session]: /Getting-Started/entities#customer-session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_customer_session(customer_session_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_session_id: The custom identifier for this session, must be unique within the account. (required)
        :param NewCustomerSession body: (required)
        :return: IntegrationState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_customer_session_with_http_info(customer_session_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_customer_session_with_http_info(customer_session_id, body, **kwargs)  # noqa: E501
            return data

    def update_customer_session_with_http_info(self, customer_session_id, body, **kwargs):  # noqa: E501
        """Update a Customer Session  # noqa: E501

        Update (or create) a [Customer Session][]. For example, the items in a customers cart are part of a session.  The Talon.One platform supports multiple simultaneous sessions for the same profile, so if you have multiple ways of accessing the same application you have the option of either tracking multiple independent sessions or using the same session across all of them. You should share sessions when application access points share other state, such as the users cart. If two points of access to the application have independent state (e.g. a user can have different items in their cart across the two) they should use independent customer session ID's.  The `profileId` parameter in the request body should correspond to an `integrationId` for a customer profile, to track an anonymous session use the empty string (`\"\"`) as the `profileId`. Note that you do **not** need to create a customer profile first: if the specified profile does not yet exist, an empty profile will be created automatically.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  The currency for the session and the cart items in the session is the same as that of the application with which the session is associated.  [Customer Session]: /Getting-Started/entities#customer-session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_customer_session_with_http_info(customer_session_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_session_id: The custom identifier for this session, must be unique within the account. (required)
        :param NewCustomerSession body: (required)
        :return: IntegrationState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_session_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_customer_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_session_id' is set
        if ('customer_session_id' not in params or
                params['customer_session_id'] is None):
            raise ValueError("Missing the required parameter `customer_session_id` when calling `update_customer_session`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_customer_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_session_id' in params:
            path_params['customerSessionId'] = params['customer_session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_v1', 'integration_auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/customer_sessions/{customerSessionId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IntegrationState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
