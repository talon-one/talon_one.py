# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import talon_one
from talon_one.models.loyalty_balances_with_tiers import LoyaltyBalancesWithTiers  # noqa: E501
from talon_one.rest import ApiException

class TestLoyaltyBalancesWithTiers(unittest.TestCase):
    """LoyaltyBalancesWithTiers unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test LoyaltyBalancesWithTiers
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = talon_one.models.loyalty_balances_with_tiers.LoyaltyBalancesWithTiers()  # noqa: E501
        if include_optional :
            return LoyaltyBalancesWithTiers(
                balance = talon_one.models.loyalty_balance_with_tier.LoyaltyBalanceWithTier(
                    active_points = 286.0, 
                    pending_points = 50.0, 
                    spent_points = 150.0, 
                    expired_points = 286.0, 
                    current_tier = talon_one.models.tier.Tier(
                        id = 11, 
                        name = 'bronze', 
                        start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        expiry_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        downgrade_policy = 'one_down', ), 
                    projected_tier = talon_one.models.projected_tier.ProjectedTier(
                        projected_active_points = 198.0, 
                        stay_in_tier_points = 2.0, 
                        projected_tier_name = 'Tier 1', ), 
                    points_to_next_tier = 20.0, 
                    next_tier_name = 'silver', ), 
                subledger_balances = {"mysubledger":{"activePoints":286,"pendingPoints":50,"spentPoints":150,"expiredPoints":25}}
            )
        else :
            return LoyaltyBalancesWithTiers(
        )

    def testLoyaltyBalancesWithTiers(self):
        """Test LoyaltyBalancesWithTiers"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
