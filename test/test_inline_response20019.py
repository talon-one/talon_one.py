# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import talon_one
from talon_one.models.inline_response20019 import InlineResponse20019  # noqa: E501
from talon_one.rest import ApiException

class TestInlineResponse20019(unittest.TestCase):
    """InlineResponse20019 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test InlineResponse20019
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = talon_one.models.inline_response20019.InlineResponse20019()  # noqa: E501
        if include_optional :
            return InlineResponse20019(
                has_more = True, 
                data = [
                    talon_one.models.access_log_entry.AccessLogEntry(
                        uuid = '606e7d34-2d36-4d53-ac71-d4442c325985', 
                        status = 200, 
                        method = 'PUT', 
                        request_uri = '/v2/customer_sessions/Session136667', 
                        time = '2023-01-16T16:00:00.700763Z', 
                        request_payload = '{
    "customerSession": {
        "profileId": "customer123",
        "state": "closed",
...
}', 
                        response_payload = '{"coupons":[],"createdCoupons":[],...}', )
                    ]
            )
        else :
            return InlineResponse20019(
                has_more = True,
                data = [
                    talon_one.models.access_log_entry.AccessLogEntry(
                        uuid = '606e7d34-2d36-4d53-ac71-d4442c325985', 
                        status = 200, 
                        method = 'PUT', 
                        request_uri = '/v2/customer_sessions/Session136667', 
                        time = '2023-01-16T16:00:00.700763Z', 
                        request_payload = '{
    "customerSession": {
        "profileId": "customer123",
        "state": "closed",
...
}', 
                        response_payload = '{"coupons":[],"createdCoupons":[],...}', )
                    ],
        )

    def testInlineResponse20019(self):
        """Test InlineResponse20019"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
