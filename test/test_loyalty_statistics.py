# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import talon_one
from talon_one.models.loyalty_statistics import LoyaltyStatistics  # noqa: E501
from talon_one.rest import ApiException

class TestLoyaltyStatistics(unittest.TestCase):
    """LoyaltyStatistics unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test LoyaltyStatistics
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = talon_one.models.loyalty_statistics.LoyaltyStatistics()  # noqa: E501
        if include_optional :
            return LoyaltyStatistics(
                date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                total_active_points = 9756.0, 
                total_pending_points = 548.0, 
                total_spent_points = 25668.0, 
                total_expired_points = 1156.0, 
                total_members = 2582.0, 
                new_members = 3.0, 
                spent_points = talon_one.models.loyalty_dashboard_points_breakdown.LoyaltyDashboardPointsBreakdown(
                    created_manually = 125.0, 
                    created_via_rule_engine = 9631.0, ), 
                earned_points = talon_one.models.loyalty_dashboard_points_breakdown.LoyaltyDashboardPointsBreakdown(
                    created_manually = 125.0, 
                    created_via_rule_engine = 9631.0, )
            )
        else :
            return LoyaltyStatistics(
                date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                total_active_points = 9756.0,
                total_pending_points = 548.0,
                total_spent_points = 25668.0,
                total_expired_points = 1156.0,
                total_members = 2582.0,
                new_members = 3.0,
                spent_points = talon_one.models.loyalty_dashboard_points_breakdown.LoyaltyDashboardPointsBreakdown(
                    created_manually = 125.0, 
                    created_via_rule_engine = 9631.0, ),
                earned_points = talon_one.models.loyalty_dashboard_points_breakdown.LoyaltyDashboardPointsBreakdown(
                    created_manually = 125.0, 
                    created_via_rule_engine = 9631.0, ),
        )

    def testLoyaltyStatistics(self):
        """Test LoyaltyStatistics"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
