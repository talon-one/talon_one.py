# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import talon_one
from talon_one.models.coupon_deletion_job import CouponDeletionJob  # noqa: E501
from talon_one.rest import ApiException

class TestCouponDeletionJob(unittest.TestCase):
    """CouponDeletionJob unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test CouponDeletionJob
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = talon_one.models.coupon_deletion_job.CouponDeletionJob()  # noqa: E501
        if include_optional :
            return CouponDeletionJob(
                id = 6, 
                created = '2020-06-10T09:05:27.993483Z', 
                application_id = 322, 
                account_id = 3886, 
                filters = talon_one.models.coupon_deletion_filters.CouponDeletionFilters(
                    created_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    starts_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    starts_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    valid = 'expired', 
                    usable = True, 
                    redeemed = True, 
                    recipient_integration_id = '0', 
                    exact_match = True, 
                    value = 'false', 
                    batch_id = '0', 
                    referral_id = 56, 
                    expires_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    expires_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                status = 'pending', 
                deleted_amount = 1000000, 
                fail_count = 10, 
                errors = [Connection to database was reset, failed to delete codes], 
                created_by = 1, 
                communicated = False, 
                campaign_i_ds = [
                    56
                    ]
            )
        else :
            return CouponDeletionJob(
                id = 6,
                created = '2020-06-10T09:05:27.993483Z',
                application_id = 322,
                account_id = 3886,
                filters = talon_one.models.coupon_deletion_filters.CouponDeletionFilters(
                    created_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    starts_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    starts_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    valid = 'expired', 
                    usable = True, 
                    redeemed = True, 
                    recipient_integration_id = '0', 
                    exact_match = True, 
                    value = 'false', 
                    batch_id = '0', 
                    referral_id = 56, 
                    expires_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    expires_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                status = 'pending',
                fail_count = 10,
                errors = [Connection to database was reset, failed to delete codes],
                created_by = 1,
                communicated = False,
        )

    def testCouponDeletionJob(self):
        """Test CouponDeletionJob"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
